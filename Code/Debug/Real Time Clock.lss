
Real Time Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00004404  00004498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000b6  008000b6  000044ee  2**0
                  ALLOC
  3 .stab         00001950  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005e2  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006428  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020f8  00000000  00000000  000065e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065a  00000000  00000000  000086e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001419  00000000  00000000  00008d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  0000a154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cb  00000000  00000000  0000a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9b  00000000  00000000  0000afbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__vector_5>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      34:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      38:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      40:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>

00000054 <myFont>:
	...
      5c:	00 00 5f 00 00 00 00 00 00 00 07 00 07 00 00 00     .._.............
      6c:	00 14 7f 14 7f 14 00 00 00 24 2a 7f 2a 12 00 00     .........$*.*...
      7c:	00 23 13 08 64 62 00 00 00 36 49 55 22 50 00 00     .#..db...6IU"P..
      8c:	00 00 05 03 00 00 00 00 00 1c 22 41 00 00 00 00     .........."A....
      9c:	00 41 22 1c 00 00 00 00 00 08 2a 1c 2a 08 00 00     .A".......*.*...
      ac:	00 08 08 3e 08 08 00 00 00 a0 60 00 00 00 00 00     ...>......`.....
      bc:	00 08 08 08 08 08 00 00 00 60 60 00 00 00 00 00     .........``.....
      cc:	00 20 10 08 04 02 00 00 00 3e 51 49 45 3e 00 00     . .......>QIE>..
      dc:	00 00 42 7f 40 00 00 00 00 62 51 49 49 46 00 00     ..B.@....bQIIF..
      ec:	00 22 41 49 49 36 00 00 00 18 14 12 7f 10 00 00     ."AII6..........
      fc:	00 27 45 45 45 39 00 00 00 3c 4a 49 49 30 00 00     .'EEE9...<JII0..
     10c:	00 01 71 09 05 03 00 00 00 36 49 49 49 36 00 00     ..q......6III6..
     11c:	00 06 49 49 29 1e 00 00 00 00 36 36 00 00 00 00     ..II).....66....
     12c:	00 00 ac 6c 00 00 00 00 00 08 14 22 41 00 00 00     ...l......."A...
     13c:	00 14 14 14 14 14 00 00 00 41 22 14 08 00 00 00     .........A".....
     14c:	00 02 01 51 09 06 00 00 00 32 49 79 41 3e 00 00     ...Q.....2IyA>..
     15c:	00 7e 09 09 09 7e 00 00 00 7f 49 49 49 36 00 00     .~...~....III6..
     16c:	00 3e 41 41 41 22 00 00 00 7f 41 41 22 1c 00 00     .>AAA"....AA"...
     17c:	00 7f 49 49 49 41 00 00 00 7f 09 09 09 01 00 00     ..IIIA..........
     18c:	00 3e 41 41 51 72 00 00 00 7f 08 08 08 7f 00 00     .>AAQr..........
     19c:	00 41 7f 41 00 00 00 00 00 20 40 41 3f 01 00 00     .A.A..... @A?...
     1ac:	00 7f 08 14 22 41 00 00 00 7f 40 40 40 40 00 00     ...."A....@@@@..
     1bc:	00 7f 02 0c 02 7f 00 00 00 7f 04 08 10 7f 00 00     ................
     1cc:	00 3e 41 41 41 3e 00 00 00 7f 09 09 09 06 00 00     .>AAA>..........
     1dc:	00 3e 41 51 21 5e 00 00 00 7f 09 19 29 46 00 00     .>AQ!^......)F..
     1ec:	00 26 49 49 49 32 00 00 00 01 01 7f 01 01 00 00     .&III2..........
     1fc:	00 3f 40 40 40 3f 00 00 00 1f 20 40 20 1f 00 00     .?@@@?.... @ ...
     20c:	00 3f 40 38 40 3f 00 00 00 63 14 08 14 63 00 00     .?@8@?...c...c..
     21c:	00 03 04 78 04 03 00 00 00 61 51 49 45 43 00 00     ...x.....aQIEC..
     22c:	00 7f 41 41 00 00 00 00 00 02 04 08 10 20 00 00     ..AA......... ..
     23c:	00 41 41 7f 00 00 00 00 00 04 02 01 02 04 00 00     .AA.............
     24c:	00 80 80 80 80 80 00 00 00 01 02 04 00 00 00 00     ................
     25c:	00 20 54 54 54 78 00 00 00 7f 48 44 44 38 00 00     . TTTx....HDD8..
     26c:	00 38 44 44 28 00 00 00 00 38 44 44 48 7f 00 00     .8DD(....8DDH...
     27c:	00 38 54 54 54 18 00 00 00 08 7e 09 02 00 00 00     .8TTT.....~.....
     28c:	00 18 a4 a4 a4 7c 00 00 00 7f 08 04 04 78 00 00     .....|.......x..
     29c:	00 00 7d 00 00 00 00 00 00 80 84 7d 00 00 00 00     ..}........}....
     2ac:	00 7f 10 28 44 00 00 00 00 41 7f 40 00 00 00 00     ...(D....A.@....
     2bc:	00 7c 04 18 04 78 00 00 00 7c 08 04 7c 00 00 00     .|...x...|..|...
     2cc:	00 38 44 44 38 00 00 00 00 fc 24 24 18 00 00 00     .8DD8.....$$....
     2dc:	00 18 24 24 fc 00 00 00 00 00 7c 08 04 00 00 00     ..$$......|.....
     2ec:	00 48 54 54 24 00 00 00 00 04 7f 44 00 00 00 00     .HTT$......D....
     2fc:	00 3c 40 40 7c 00 00 00 00 1c 20 40 20 1c 00 00     .<@@|..... @ ...
     30c:	00 3c 40 30 40 3c 00 00 00 44 28 10 28 44 00 00     .<@0@<...D(.(D..
     31c:	00 1c a0 a0 7c 00 00 00 00 44 64 54 4c 44 00 00     ....|....DdTLD..
     32c:	00 08 36 41 00 00 00 00 00 00 7f 00 00 00 00 00     ..6A............
     33c:	00 41 36 08 00 00 00 00 00 02 01 01 02 01 00 00     .A6.............
     34c:	00 02 05 05 02 00 00 00                             ........

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf e5       	ldi	r28, 0x5F	; 95
     35a:	d8 e0       	ldi	r29, 0x08	; 8
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	a0 e6       	ldi	r26, 0x60	; 96
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e4 e0       	ldi	r30, 0x04	; 4
     368:	f4 e4       	ldi	r31, 0x44	; 68
     36a:	02 c0       	rjmp	.+4      	; 0x370 <__do_copy_data+0x10>
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0
     370:	a6 3b       	cpi	r26, 0xB6	; 182
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <__do_copy_data+0xc>

00000376 <__do_clear_bss>:
     376:	10 e0       	ldi	r17, 0x00	; 0
     378:	a6 eb       	ldi	r26, 0xB6	; 182
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	af 3b       	cpi	r26, 0xBF	; 191
     382:	b1 07       	cpc	r27, r17
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 2d 11 	call	0x225a	; 0x225a <main>
     38a:	0c 94 00 22 	jmp	0x4400	; 0x4400 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <ADC_init>:
#include"DIO.h"
#include"std_macros.h"
#include<avr/io.h>

void ADC_init(void)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
	DIO_vsetPINDir('A',0,0);
     39a:	81 e4       	ldi	r24, 0x41	; 65
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
	SET_BIT(ADCSRA,ADEN);
     3a4:	86 e2       	ldi	r24, 0x26	; 38
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	26 e2       	ldi	r18, 0x26	; 38
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	f9 01       	movw	r30, r18
     3ae:	20 81       	ld	r18, Z
     3b0:	20 68       	ori	r18, 0x80	; 128
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
	
	SET_BIT(ADCSRA,ADPS1);
     3b6:	86 e2       	ldi	r24, 0x26	; 38
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	26 e2       	ldi	r18, 0x26	; 38
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	f9 01       	movw	r30, r18
     3c0:	20 81       	ld	r18, Z
     3c2:	22 60       	ori	r18, 0x02	; 2
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADPS2);
     3c8:	86 e2       	ldi	r24, 0x26	; 38
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	26 e2       	ldi	r18, 0x26	; 38
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	24 60       	ori	r18, 0x04	; 4
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
	
	SET_BIT(ADMUX,REFS0);
     3da:	87 e2       	ldi	r24, 0x27	; 39
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	27 e2       	ldi	r18, 0x27	; 39
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	f9 01       	movw	r30, r18
     3e4:	20 81       	ld	r18, Z
     3e6:	20 64       	ori	r18, 0x40	; 64
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
	SET_BIT(ADMUX,REFS1);
     3ec:	87 e2       	ldi	r24, 0x27	; 39
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	27 e2       	ldi	r18, 0x27	; 39
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	f9 01       	movw	r30, r18
     3f6:	20 81       	ld	r18, Z
     3f8:	20 68       	ori	r18, 0x80	; 128
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
	
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <ADC_read>:
unsigned short ADC_read(void)
{
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	00 d0       	rcall	.+0      	; 0x40a <ADC_read+0x6>
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
     40e:	86 e2       	ldi	r24, 0x26	; 38
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	26 e2       	ldi	r18, 0x26	; 38
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	20 64       	ori	r18, 0x40	; 64
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
	while(1 == READ_BIT(ADCSRA,ADIF));
     420:	00 00       	nop
     422:	86 e2       	ldi	r24, 0x26	; 38
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	80 71       	andi	r24, 0x10	; 16
     430:	90 70       	andi	r25, 0x00	; 0
     432:	95 95       	asr	r25
     434:	87 95       	ror	r24
     436:	95 95       	asr	r25
     438:	87 95       	ror	r24
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	95 95       	asr	r25
     440:	87 95       	ror	r24
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	91 05       	cpc	r25, r1
     446:	69 f3       	breq	.-38     	; 0x422 <ADC_read+0x1e>
	unsigned short return_value = ADCL;
     448:	84 e2       	ldi	r24, 0x24	; 36
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	fc 01       	movw	r30, r24
     44e:	80 81       	ld	r24, Z
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9a 83       	std	Y+2, r25	; 0x02
     456:	89 83       	std	Y+1, r24	; 0x01
	return_value |= ADCH<<8;
     458:	85 e2       	ldi	r24, 0x25	; 37
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	fc 01       	movw	r30, r24
     45e:	80 81       	ld	r24, Z
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	98 2f       	mov	r25, r24
     466:	88 27       	eor	r24, r24
     468:	29 81       	ldd	r18, Y+1	; 0x01
     46a:	3a 81       	ldd	r19, Y+2	; 0x02
     46c:	82 2b       	or	r24, r18
     46e:	93 2b       	or	r25, r19
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,ADIF);
     474:	86 e2       	ldi	r24, 0x26	; 38
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	26 e2       	ldi	r18, 0x26	; 38
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	20 61       	ori	r18, 0x10	; 16
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
	
	return return_value;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <button_init>:

#include"DIO.h"
#include"Button.h"

void button_init(unsigned char portname, unsigned char pinnumber)
{
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	00 d0       	rcall	.+0      	; 0x49a <button_init+0x6>
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,0);
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	6a 81       	ldd	r22, Y+2	; 0x02
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
}
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <button_read>:
unsigned char button_read(unsigned char portname, unsigned char pinnumber)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <button_read+0x6>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8read(portname,pinnumber);
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	6a 81       	ldd	r22, Y+2	; 0x02
     4c8:	0e 94 39 04 	call	0x872	; 0x872 <DIO_u8read>
}
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	00 d0       	rcall	.+0      	; 0x4dc <DIO_vsetPINDir+0x6>
     4dc:	0f 92       	push	r0
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	89 83       	std	Y+1, r24	; 0x01
     4e4:	6a 83       	std	Y+2, r22	; 0x02
     4e6:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	82 34       	cpi	r24, 0x42	; 66
     4f0:	91 05       	cpc	r25, r1
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <DIO_vsetPINDir+0x20>
     4f4:	40 c0       	rjmp	.+128    	; 0x576 <DIO_vsetPINDir+0xa0>
     4f6:	83 34       	cpi	r24, 0x43	; 67
     4f8:	91 05       	cpc	r25, r1
     4fa:	24 f4       	brge	.+8      	; 0x504 <DIO_vsetPINDir+0x2e>
     4fc:	81 34       	cpi	r24, 0x41	; 65
     4fe:	91 05       	cpc	r25, r1
     500:	51 f0       	breq	.+20     	; 0x516 <DIO_vsetPINDir+0x40>
     502:	c9 c0       	rjmp	.+402    	; 0x696 <DIO_vsetPINDir+0x1c0>
     504:	83 34       	cpi	r24, 0x43	; 67
     506:	91 05       	cpc	r25, r1
     508:	09 f4       	brne	.+2      	; 0x50c <DIO_vsetPINDir+0x36>
     50a:	65 c0       	rjmp	.+202    	; 0x5d6 <DIO_vsetPINDir+0x100>
     50c:	84 34       	cpi	r24, 0x44	; 68
     50e:	91 05       	cpc	r25, r1
     510:	09 f4       	brne	.+2      	; 0x514 <DIO_vsetPINDir+0x3e>
     512:	91 c0       	rjmp	.+290    	; 0x636 <DIO_vsetPINDir+0x160>
     514:	c0 c0       	rjmp	.+384    	; 0x696 <DIO_vsetPINDir+0x1c0>
	{
		
		
		case 'A':
		if(direction==1)
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	b1 f4       	brne	.+44     	; 0x548 <DIO_vsetPINDir+0x72>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     51c:	8a e3       	ldi	r24, 0x3A	; 58
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	2a e3       	ldi	r18, 0x3A	; 58
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	f9 01       	movw	r30, r18
     526:	20 81       	ld	r18, Z
     528:	62 2f       	mov	r22, r18
     52a:	2a 81       	ldd	r18, Y+2	; 0x02
     52c:	42 2f       	mov	r20, r18
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	21 e0       	ldi	r18, 0x01	; 1
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	04 2e       	mov	r0, r20
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_vsetPINDir+0x66>
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	0a 94       	dec	r0
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_vsetPINDir+0x62>
     540:	26 2b       	or	r18, r22
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
		}
		break;
     546:	a8 c0       	rjmp	.+336    	; 0x698 <DIO_vsetPINDir+0x1c2>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     548:	8a e3       	ldi	r24, 0x3A	; 58
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	2a e3       	ldi	r18, 0x3A	; 58
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	f9 01       	movw	r30, r18
     552:	20 81       	ld	r18, Z
     554:	62 2f       	mov	r22, r18
     556:	2a 81       	ldd	r18, Y+2	; 0x02
     558:	42 2f       	mov	r20, r18
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	04 2e       	mov	r0, r20
     562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_vsetPINDir+0x92>
     564:	22 0f       	add	r18, r18
     566:	33 1f       	adc	r19, r19
     568:	0a 94       	dec	r0
     56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_vsetPINDir+0x8e>
     56c:	20 95       	com	r18
     56e:	26 23       	and	r18, r22
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
		}
		break;
     574:	91 c0       	rjmp	.+290    	; 0x698 <DIO_vsetPINDir+0x1c2>
		case 'B':
		if(direction==1)
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	b1 f4       	brne	.+44     	; 0x5a8 <DIO_vsetPINDir+0xd2>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     57c:	87 e3       	ldi	r24, 0x37	; 55
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	27 e3       	ldi	r18, 0x37	; 55
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	62 2f       	mov	r22, r18
     58a:	2a 81       	ldd	r18, Y+2	; 0x02
     58c:	42 2f       	mov	r20, r18
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	04 2e       	mov	r0, r20
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_vsetPINDir+0xc6>
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_vsetPINDir+0xc2>
     5a0:	26 2b       	or	r18, r22
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
		}
		break;
     5a6:	78 c0       	rjmp	.+240    	; 0x698 <DIO_vsetPINDir+0x1c2>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     5a8:	87 e3       	ldi	r24, 0x37	; 55
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	27 e3       	ldi	r18, 0x37	; 55
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	62 2f       	mov	r22, r18
     5b6:	2a 81       	ldd	r18, Y+2	; 0x02
     5b8:	42 2f       	mov	r20, r18
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	04 2e       	mov	r0, r20
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_vsetPINDir+0xf2>
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	0a 94       	dec	r0
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_vsetPINDir+0xee>
     5cc:	20 95       	com	r18
     5ce:	26 23       	and	r18, r22
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
		}
		break;
     5d4:	61 c0       	rjmp	.+194    	; 0x698 <DIO_vsetPINDir+0x1c2>
		case 'C':
		if(direction==1)
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	b1 f4       	brne	.+44     	; 0x608 <DIO_vsetPINDir+0x132>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     5dc:	84 e3       	ldi	r24, 0x34	; 52
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	24 e3       	ldi	r18, 0x34	; 52
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	62 2f       	mov	r22, r18
     5ea:	2a 81       	ldd	r18, Y+2	; 0x02
     5ec:	42 2f       	mov	r20, r18
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	04 2e       	mov	r0, r20
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_vsetPINDir+0x126>
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	0a 94       	dec	r0
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_vsetPINDir+0x122>
     600:	26 2b       	or	r18, r22
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
		}
		break;
     606:	48 c0       	rjmp	.+144    	; 0x698 <DIO_vsetPINDir+0x1c2>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     608:	84 e3       	ldi	r24, 0x34	; 52
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	24 e3       	ldi	r18, 0x34	; 52
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	f9 01       	movw	r30, r18
     612:	20 81       	ld	r18, Z
     614:	62 2f       	mov	r22, r18
     616:	2a 81       	ldd	r18, Y+2	; 0x02
     618:	42 2f       	mov	r20, r18
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	04 2e       	mov	r0, r20
     622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_vsetPINDir+0x152>
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	0a 94       	dec	r0
     62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_vsetPINDir+0x14e>
     62c:	20 95       	com	r18
     62e:	26 23       	and	r18, r22
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
		}
		break;
     634:	31 c0       	rjmp	.+98     	; 0x698 <DIO_vsetPINDir+0x1c2>
		case 'D':
		if(direction==1)
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	b1 f4       	brne	.+44     	; 0x668 <DIO_vsetPINDir+0x192>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     63c:	81 e3       	ldi	r24, 0x31	; 49
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	21 e3       	ldi	r18, 0x31	; 49
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	f9 01       	movw	r30, r18
     646:	20 81       	ld	r18, Z
     648:	62 2f       	mov	r22, r18
     64a:	2a 81       	ldd	r18, Y+2	; 0x02
     64c:	42 2f       	mov	r20, r18
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	21 e0       	ldi	r18, 0x01	; 1
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	04 2e       	mov	r0, r20
     656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_vsetPINDir+0x186>
     658:	22 0f       	add	r18, r18
     65a:	33 1f       	adc	r19, r19
     65c:	0a 94       	dec	r0
     65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_vsetPINDir+0x182>
     660:	26 2b       	or	r18, r22
     662:	fc 01       	movw	r30, r24
     664:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
		}
		break;
     666:	18 c0       	rjmp	.+48     	; 0x698 <DIO_vsetPINDir+0x1c2>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     668:	81 e3       	ldi	r24, 0x31	; 49
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	21 e3       	ldi	r18, 0x31	; 49
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	62 2f       	mov	r22, r18
     676:	2a 81       	ldd	r18, Y+2	; 0x02
     678:	42 2f       	mov	r20, r18
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	04 2e       	mov	r0, r20
     682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_vsetPINDir+0x1b2>
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_vsetPINDir+0x1ae>
     68c:	20 95       	com	r18
     68e:	26 23       	and	r18, r22
     690:	fc 01       	movw	r30, r24
     692:	20 83       	st	Z, r18
		}
		break;
     694:	01 c0       	rjmp	.+2      	; 0x698 <DIO_vsetPINDir+0x1c2>
		default: 
		break;
     696:	00 00       	nop
	}
}
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <DIO_write+0x6>
     6aa:	0f 92       	push	r0
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	6a 83       	std	Y+2, r22	; 0x02
     6b4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	82 34       	cpi	r24, 0x42	; 66
     6be:	91 05       	cpc	r25, r1
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <DIO_write+0x20>
     6c2:	40 c0       	rjmp	.+128    	; 0x744 <DIO_write+0xa0>
     6c4:	83 34       	cpi	r24, 0x43	; 67
     6c6:	91 05       	cpc	r25, r1
     6c8:	24 f4       	brge	.+8      	; 0x6d2 <DIO_write+0x2e>
     6ca:	81 34       	cpi	r24, 0x41	; 65
     6cc:	91 05       	cpc	r25, r1
     6ce:	51 f0       	breq	.+20     	; 0x6e4 <DIO_write+0x40>
     6d0:	c9 c0       	rjmp	.+402    	; 0x864 <__stack+0x5>
     6d2:	83 34       	cpi	r24, 0x43	; 67
     6d4:	91 05       	cpc	r25, r1
     6d6:	09 f4       	brne	.+2      	; 0x6da <DIO_write+0x36>
     6d8:	65 c0       	rjmp	.+202    	; 0x7a4 <DIO_write+0x100>
     6da:	84 34       	cpi	r24, 0x44	; 68
     6dc:	91 05       	cpc	r25, r1
     6de:	09 f4       	brne	.+2      	; 0x6e2 <DIO_write+0x3e>
     6e0:	91 c0       	rjmp	.+290    	; 0x804 <DIO_write+0x160>
     6e2:	c0 c0       	rjmp	.+384    	; 0x864 <__stack+0x5>
	{
		case 'A' :
		
		if(outputvalue==1)
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	b1 f4       	brne	.+44     	; 0x716 <DIO_write+0x72>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     6ea:	8b e3       	ldi	r24, 0x3B	; 59
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	2b e3       	ldi	r18, 0x3B	; 59
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	62 2f       	mov	r22, r18
     6f8:	2a 81       	ldd	r18, Y+2	; 0x02
     6fa:	42 2f       	mov	r20, r18
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	04 2e       	mov	r0, r20
     704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_write+0x66>
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_write+0x62>
     70e:	26 2b       	or	r18, r22
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
		}
		break ;
     714:	a8 c0       	rjmp	.+336    	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     716:	8b e3       	ldi	r24, 0x3B	; 59
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	2b e3       	ldi	r18, 0x3B	; 59
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	62 2f       	mov	r22, r18
     724:	2a 81       	ldd	r18, Y+2	; 0x02
     726:	42 2f       	mov	r20, r18
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	04 2e       	mov	r0, r20
     730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_write+0x92>
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	0a 94       	dec	r0
     738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_write+0x8e>
     73a:	20 95       	com	r18
     73c:	26 23       	and	r18, r22
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
		}
		break ;
     742:	91 c0       	rjmp	.+290    	; 0x866 <__stack+0x7>
		case 'B':
		
		if(outputvalue==1)
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	b1 f4       	brne	.+44     	; 0x776 <DIO_write+0xd2>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     74a:	88 e3       	ldi	r24, 0x38	; 56
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	28 e3       	ldi	r18, 0x38	; 56
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	f9 01       	movw	r30, r18
     754:	20 81       	ld	r18, Z
     756:	62 2f       	mov	r22, r18
     758:	2a 81       	ldd	r18, Y+2	; 0x02
     75a:	42 2f       	mov	r20, r18
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	04 2e       	mov	r0, r20
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_write+0xc6>
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	0a 94       	dec	r0
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_write+0xc2>
     76e:	26 2b       	or	r18, r22
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
		}
		break ;
     774:	78 c0       	rjmp	.+240    	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     776:	88 e3       	ldi	r24, 0x38	; 56
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	28 e3       	ldi	r18, 0x38	; 56
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	f9 01       	movw	r30, r18
     780:	20 81       	ld	r18, Z
     782:	62 2f       	mov	r22, r18
     784:	2a 81       	ldd	r18, Y+2	; 0x02
     786:	42 2f       	mov	r20, r18
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	04 2e       	mov	r0, r20
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_write+0xf2>
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	0a 94       	dec	r0
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_write+0xee>
     79a:	20 95       	com	r18
     79c:	26 23       	and	r18, r22
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
		}
		break ;
     7a2:	61 c0       	rjmp	.+194    	; 0x866 <__stack+0x7>
		case 'C' :
		
		if(outputvalue==1)
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	b1 f4       	brne	.+44     	; 0x7d6 <DIO_write+0x132>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     7aa:	85 e3       	ldi	r24, 0x35	; 53
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	25 e3       	ldi	r18, 0x35	; 53
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	f9 01       	movw	r30, r18
     7b4:	20 81       	ld	r18, Z
     7b6:	62 2f       	mov	r22, r18
     7b8:	2a 81       	ldd	r18, Y+2	; 0x02
     7ba:	42 2f       	mov	r20, r18
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	04 2e       	mov	r0, r20
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_write+0x126>
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_write+0x122>
     7ce:	26 2b       	or	r18, r22
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
		}
		break ;
     7d4:	48 c0       	rjmp	.+144    	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     7d6:	85 e3       	ldi	r24, 0x35	; 53
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	25 e3       	ldi	r18, 0x35	; 53
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	f9 01       	movw	r30, r18
     7e0:	20 81       	ld	r18, Z
     7e2:	62 2f       	mov	r22, r18
     7e4:	2a 81       	ldd	r18, Y+2	; 0x02
     7e6:	42 2f       	mov	r20, r18
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	04 2e       	mov	r0, r20
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_write+0x152>
     7f2:	22 0f       	add	r18, r18
     7f4:	33 1f       	adc	r19, r19
     7f6:	0a 94       	dec	r0
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_write+0x14e>
     7fa:	20 95       	com	r18
     7fc:	26 23       	and	r18, r22
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
		}
		break ;
     802:	31 c0       	rjmp	.+98     	; 0x866 <__stack+0x7>
		case 'D':
		
		if(outputvalue==1)
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	b1 f4       	brne	.+44     	; 0x836 <DIO_write+0x192>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     80a:	82 e3       	ldi	r24, 0x32	; 50
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	22 e3       	ldi	r18, 0x32	; 50
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	20 81       	ld	r18, Z
     816:	62 2f       	mov	r22, r18
     818:	2a 81       	ldd	r18, Y+2	; 0x02
     81a:	42 2f       	mov	r20, r18
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	21 e0       	ldi	r18, 0x01	; 1
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	04 2e       	mov	r0, r20
     824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_write+0x186>
     826:	22 0f       	add	r18, r18
     828:	33 1f       	adc	r19, r19
     82a:	0a 94       	dec	r0
     82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_write+0x182>
     82e:	26 2b       	or	r18, r22
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
		}
		break ;
     834:	18 c0       	rjmp	.+48     	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     836:	82 e3       	ldi	r24, 0x32	; 50
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	22 e3       	ldi	r18, 0x32	; 50
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	62 2f       	mov	r22, r18
     844:	2a 81       	ldd	r18, Y+2	; 0x02
     846:	42 2f       	mov	r20, r18
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	04 2e       	mov	r0, r20
     850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_write+0x1b2>
     852:	22 0f       	add	r18, r18
     854:	33 1f       	adc	r19, r19
     856:	0a 94       	dec	r0
     858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_write+0x1ae>
     85a:	20 95       	com	r18
     85c:	26 23       	and	r18, r22
     85e:	fc 01       	movw	r30, r24
     860:	20 83       	st	Z, r18
		}
		break ;
     862:	01 c0       	rjmp	.+2      	; 0x866 <__stack+0x7>
		default: break ;
     864:	00 00       	nop
	}
}
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	00 d0       	rcall	.+0      	; 0x878 <DIO_u8read+0x6>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	8a 83       	std	Y+2, r24	; 0x02
     880:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
     882:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	82 34       	cpi	r24, 0x42	; 66
     88c:	91 05       	cpc	r25, r1
     88e:	71 f1       	breq	.+92     	; 0x8ec <DIO_u8read+0x7a>
     890:	83 34       	cpi	r24, 0x43	; 67
     892:	91 05       	cpc	r25, r1
     894:	24 f4       	brge	.+8      	; 0x89e <DIO_u8read+0x2c>
     896:	81 34       	cpi	r24, 0x41	; 65
     898:	91 05       	cpc	r25, r1
     89a:	51 f0       	breq	.+20     	; 0x8b0 <DIO_u8read+0x3e>
     89c:	81 c0       	rjmp	.+258    	; 0x9a0 <DIO_u8read+0x12e>
     89e:	83 34       	cpi	r24, 0x43	; 67
     8a0:	91 05       	cpc	r25, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <DIO_u8read+0x34>
     8a4:	41 c0       	rjmp	.+130    	; 0x928 <DIO_u8read+0xb6>
     8a6:	84 34       	cpi	r24, 0x44	; 68
     8a8:	91 05       	cpc	r25, r1
     8aa:	09 f4       	brne	.+2      	; 0x8ae <DIO_u8read+0x3c>
     8ac:	5b c0       	rjmp	.+182    	; 0x964 <DIO_u8read+0xf2>
     8ae:	78 c0       	rjmp	.+240    	; 0x9a0 <DIO_u8read+0x12e>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     8b0:	89 e3       	ldi	r24, 0x39	; 57
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	28 2f       	mov	r18, r24
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	8b 81       	ldd	r24, Y+3	; 0x03
     8be:	48 2f       	mov	r20, r24
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	04 2e       	mov	r0, r20
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <DIO_u8read+0x5c>
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <DIO_u8read+0x58>
     8d2:	82 23       	and	r24, r18
     8d4:	93 23       	and	r25, r19
     8d6:	2b 81       	ldd	r18, Y+3	; 0x03
     8d8:	22 2f       	mov	r18, r18
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	02 2e       	mov	r0, r18
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <DIO_u8read+0x72>
     8e0:	95 95       	asr	r25
     8e2:	87 95       	ror	r24
     8e4:	0a 94       	dec	r0
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <DIO_u8read+0x6e>
     8e8:	89 83       	std	Y+1, r24	; 0x01
		break;
     8ea:	5b c0       	rjmp	.+182    	; 0x9a2 <DIO_u8read+0x130>
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     8ec:	86 e3       	ldi	r24, 0x36	; 54
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	80 81       	ld	r24, Z
     8f4:	28 2f       	mov	r18, r24
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	48 2f       	mov	r20, r24
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	04 2e       	mov	r0, r20
     904:	02 c0       	rjmp	.+4      	; 0x90a <DIO_u8read+0x98>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	0a 94       	dec	r0
     90c:	e2 f7       	brpl	.-8      	; 0x906 <DIO_u8read+0x94>
     90e:	82 23       	and	r24, r18
     910:	93 23       	and	r25, r19
     912:	2b 81       	ldd	r18, Y+3	; 0x03
     914:	22 2f       	mov	r18, r18
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	02 2e       	mov	r0, r18
     91a:	02 c0       	rjmp	.+4      	; 0x920 <DIO_u8read+0xae>
     91c:	95 95       	asr	r25
     91e:	87 95       	ror	r24
     920:	0a 94       	dec	r0
     922:	e2 f7       	brpl	.-8      	; 0x91c <DIO_u8read+0xaa>
     924:	89 83       	std	Y+1, r24	; 0x01
		break;
     926:	3d c0       	rjmp	.+122    	; 0x9a2 <DIO_u8read+0x130>
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     928:	83 e3       	ldi	r24, 0x33	; 51
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	fc 01       	movw	r30, r24
     92e:	80 81       	ld	r24, Z
     930:	28 2f       	mov	r18, r24
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	48 2f       	mov	r20, r24
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	04 2e       	mov	r0, r20
     940:	02 c0       	rjmp	.+4      	; 0x946 <DIO_u8read+0xd4>
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	0a 94       	dec	r0
     948:	e2 f7       	brpl	.-8      	; 0x942 <DIO_u8read+0xd0>
     94a:	82 23       	and	r24, r18
     94c:	93 23       	and	r25, r19
     94e:	2b 81       	ldd	r18, Y+3	; 0x03
     950:	22 2f       	mov	r18, r18
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	02 2e       	mov	r0, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_u8read+0xea>
     958:	95 95       	asr	r25
     95a:	87 95       	ror	r24
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_u8read+0xe6>
     960:	89 83       	std	Y+1, r24	; 0x01
		break;
     962:	1f c0       	rjmp	.+62     	; 0x9a2 <DIO_u8read+0x130>
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     964:	80 e3       	ldi	r24, 0x30	; 48
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	28 2f       	mov	r18, r24
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	48 2f       	mov	r20, r24
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	04 2e       	mov	r0, r20
     97c:	02 c0       	rjmp	.+4      	; 0x982 <DIO_u8read+0x110>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	0a 94       	dec	r0
     984:	e2 f7       	brpl	.-8      	; 0x97e <DIO_u8read+0x10c>
     986:	82 23       	and	r24, r18
     988:	93 23       	and	r25, r19
     98a:	2b 81       	ldd	r18, Y+3	; 0x03
     98c:	22 2f       	mov	r18, r18
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	02 2e       	mov	r0, r18
     992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_u8read+0x126>
     994:	95 95       	asr	r25
     996:	87 95       	ror	r24
     998:	0a 94       	dec	r0
     99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_u8read+0x122>
     99c:	89 83       	std	Y+1, r24	; 0x01
		break;
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <DIO_u8read+0x130>
		default: 
		break;
     9a0:	00 00       	nop
	}
	return return_value ;
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <DIO_toggle+0x6>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	82 34       	cpi	r24, 0x42	; 66
     9c6:	91 05       	cpc	r25, r1
     9c8:	29 f1       	breq	.+74     	; 0xa14 <DIO_toggle+0x64>
     9ca:	83 34       	cpi	r24, 0x43	; 67
     9cc:	91 05       	cpc	r25, r1
     9ce:	24 f4       	brge	.+8      	; 0x9d8 <DIO_toggle+0x28>
     9d0:	81 34       	cpi	r24, 0x41	; 65
     9d2:	91 05       	cpc	r25, r1
     9d4:	49 f0       	breq	.+18     	; 0x9e8 <DIO_toggle+0x38>
     9d6:	60 c0       	rjmp	.+192    	; 0xa98 <DIO_toggle+0xe8>
     9d8:	83 34       	cpi	r24, 0x43	; 67
     9da:	91 05       	cpc	r25, r1
     9dc:	89 f1       	breq	.+98     	; 0xa40 <DIO_toggle+0x90>
     9de:	84 34       	cpi	r24, 0x44	; 68
     9e0:	91 05       	cpc	r25, r1
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <DIO_toggle+0x36>
     9e4:	43 c0       	rjmp	.+134    	; 0xa6c <DIO_toggle+0xbc>
     9e6:	58 c0       	rjmp	.+176    	; 0xa98 <DIO_toggle+0xe8>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
     9e8:	8b e3       	ldi	r24, 0x3B	; 59
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	2b e3       	ldi	r18, 0x3B	; 59
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	20 81       	ld	r18, Z
     9f4:	62 2f       	mov	r22, r18
     9f6:	2a 81       	ldd	r18, Y+2	; 0x02
     9f8:	42 2f       	mov	r20, r18
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	04 2e       	mov	r0, r20
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_toggle+0x58>
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	0a 94       	dec	r0
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_toggle+0x54>
     a0c:	26 27       	eor	r18, r22
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
		break;
     a12:	43 c0       	rjmp	.+134    	; 0xa9a <DIO_toggle+0xea>
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
     a14:	88 e3       	ldi	r24, 0x38	; 56
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	28 e3       	ldi	r18, 0x38	; 56
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	f9 01       	movw	r30, r18
     a1e:	20 81       	ld	r18, Z
     a20:	62 2f       	mov	r22, r18
     a22:	2a 81       	ldd	r18, Y+2	; 0x02
     a24:	42 2f       	mov	r20, r18
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	04 2e       	mov	r0, r20
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_toggle+0x84>
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	0a 94       	dec	r0
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_toggle+0x80>
     a38:	26 27       	eor	r18, r22
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
		break;
     a3e:	2d c0       	rjmp	.+90     	; 0xa9a <DIO_toggle+0xea>
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
     a40:	85 e3       	ldi	r24, 0x35	; 53
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	25 e3       	ldi	r18, 0x35	; 53
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	f9 01       	movw	r30, r18
     a4a:	20 81       	ld	r18, Z
     a4c:	62 2f       	mov	r22, r18
     a4e:	2a 81       	ldd	r18, Y+2	; 0x02
     a50:	42 2f       	mov	r20, r18
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	04 2e       	mov	r0, r20
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_toggle+0xb0>
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	0a 94       	dec	r0
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_toggle+0xac>
     a64:	26 27       	eor	r18, r22
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
		break;
     a6a:	17 c0       	rjmp	.+46     	; 0xa9a <DIO_toggle+0xea>
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
     a6c:	82 e3       	ldi	r24, 0x32	; 50
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	22 e3       	ldi	r18, 0x32	; 50
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	62 2f       	mov	r22, r18
     a7a:	2a 81       	ldd	r18, Y+2	; 0x02
     a7c:	42 2f       	mov	r20, r18
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	21 e0       	ldi	r18, 0x01	; 1
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	04 2e       	mov	r0, r20
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_toggle+0xdc>
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	0a 94       	dec	r0
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <DIO_toggle+0xd8>
     a90:	26 27       	eor	r18, r22
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
		break;
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <DIO_toggle+0xea>
		default: break;
     a98:	00 00       	nop
	}
}
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <DIO_set_port_direction+0x6>
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	82 34       	cpi	r24, 0x42	; 66
     aba:	91 05       	cpc	r25, r1
     abc:	a1 f0       	breq	.+40     	; 0xae6 <DIO_set_port_direction+0x42>
     abe:	83 34       	cpi	r24, 0x43	; 67
     ac0:	91 05       	cpc	r25, r1
     ac2:	24 f4       	brge	.+8      	; 0xacc <DIO_set_port_direction+0x28>
     ac4:	81 34       	cpi	r24, 0x41	; 65
     ac6:	91 05       	cpc	r25, r1
     ac8:	41 f0       	breq	.+16     	; 0xada <DIO_set_port_direction+0x36>
     aca:	1f c0       	rjmp	.+62     	; 0xb0a <DIO_set_port_direction+0x66>
     acc:	83 34       	cpi	r24, 0x43	; 67
     ace:	91 05       	cpc	r25, r1
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <DIO_set_port_direction+0x4e>
     ad2:	84 34       	cpi	r24, 0x44	; 68
     ad4:	91 05       	cpc	r25, r1
     ad6:	99 f0       	breq	.+38     	; 0xafe <DIO_set_port_direction+0x5a>
     ad8:	18 c0       	rjmp	.+48     	; 0xb0a <DIO_set_port_direction+0x66>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
     ada:	8a e3       	ldi	r24, 0x3A	; 58
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	2a 81       	ldd	r18, Y+2	; 0x02
     ae0:	fc 01       	movw	r30, r24
     ae2:	20 83       	st	Z, r18
		break ;
     ae4:	13 c0       	rjmp	.+38     	; 0xb0c <DIO_set_port_direction+0x68>
		case 'B':
		DDRB=direction; //set the direction of port B
     ae6:	87 e3       	ldi	r24, 0x37	; 55
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	2a 81       	ldd	r18, Y+2	; 0x02
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
		break ;
     af0:	0d c0       	rjmp	.+26     	; 0xb0c <DIO_set_port_direction+0x68>
		case 'C' :
		DDRC=direction; //set the direction of port C
     af2:	84 e3       	ldi	r24, 0x34	; 52
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	2a 81       	ldd	r18, Y+2	; 0x02
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
		break ;
     afc:	07 c0       	rjmp	.+14     	; 0xb0c <DIO_set_port_direction+0x68>
		case 'D':
		DDRD=direction; //set the direction of port D
     afe:	81 e3       	ldi	r24, 0x31	; 49
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	2a 81       	ldd	r18, Y+2	; 0x02
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
		break ;
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <DIO_set_port_direction+0x68>
		default:
		break ;
     b0a:	00 00       	nop
	}
	
}
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <DIO_write_port+0x6>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	88 2f       	mov	r24, r24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	82 34       	cpi	r24, 0x42	; 66
     b2c:	91 05       	cpc	r25, r1
     b2e:	a1 f0       	breq	.+40     	; 0xb58 <DIO_write_port+0x42>
     b30:	83 34       	cpi	r24, 0x43	; 67
     b32:	91 05       	cpc	r25, r1
     b34:	24 f4       	brge	.+8      	; 0xb3e <DIO_write_port+0x28>
     b36:	81 34       	cpi	r24, 0x41	; 65
     b38:	91 05       	cpc	r25, r1
     b3a:	41 f0       	breq	.+16     	; 0xb4c <DIO_write_port+0x36>
     b3c:	1f c0       	rjmp	.+62     	; 0xb7c <DIO_write_port+0x66>
     b3e:	83 34       	cpi	r24, 0x43	; 67
     b40:	91 05       	cpc	r25, r1
     b42:	81 f0       	breq	.+32     	; 0xb64 <DIO_write_port+0x4e>
     b44:	84 34       	cpi	r24, 0x44	; 68
     b46:	91 05       	cpc	r25, r1
     b48:	99 f0       	breq	.+38     	; 0xb70 <DIO_write_port+0x5a>
     b4a:	18 c0       	rjmp	.+48     	; 0xb7c <DIO_write_port+0x66>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     b4c:	8b e3       	ldi	r24, 0x3B	; 59
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	2a 81       	ldd	r18, Y+2	; 0x02
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
		break ;
     b56:	13 c0       	rjmp	.+38     	; 0xb7e <DIO_write_port+0x68>
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     b58:	88 e3       	ldi	r24, 0x38	; 56
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	2a 81       	ldd	r18, Y+2	; 0x02
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
		break ;
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <DIO_write_port+0x68>
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     b64:	85 e3       	ldi	r24, 0x35	; 53
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	2a 81       	ldd	r18, Y+2	; 0x02
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
		break ;
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <DIO_write_port+0x68>
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     b70:	82 e3       	ldi	r24, 0x32	; 50
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	2a 81       	ldd	r18, Y+2	; 0x02
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
		break ;
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <DIO_write_port+0x68>
		default:
		 break ;
     b7c:	00 00       	nop
	}
}
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <DIO_read_port+0x6>
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
     b94:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	82 34       	cpi	r24, 0x42	; 66
     b9e:	91 05       	cpc	r25, r1
     ba0:	a1 f0       	breq	.+40     	; 0xbca <DIO_read_port+0x42>
     ba2:	83 34       	cpi	r24, 0x43	; 67
     ba4:	91 05       	cpc	r25, r1
     ba6:	24 f4       	brge	.+8      	; 0xbb0 <DIO_read_port+0x28>
     ba8:	81 34       	cpi	r24, 0x41	; 65
     baa:	91 05       	cpc	r25, r1
     bac:	41 f0       	breq	.+16     	; 0xbbe <DIO_read_port+0x36>
     bae:	1f c0       	rjmp	.+62     	; 0xbee <DIO_read_port+0x66>
     bb0:	83 34       	cpi	r24, 0x43	; 67
     bb2:	91 05       	cpc	r25, r1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <DIO_read_port+0x4e>
     bb6:	84 34       	cpi	r24, 0x44	; 68
     bb8:	91 05       	cpc	r25, r1
     bba:	99 f0       	breq	.+38     	; 0xbe2 <DIO_read_port+0x5a>
     bbc:	18 c0       	rjmp	.+48     	; 0xbee <DIO_read_port+0x66>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
     bbe:	89 e3       	ldi	r24, 0x39	; 57
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	fc 01       	movw	r30, r24
     bc4:	80 81       	ld	r24, Z
     bc6:	89 83       	std	Y+1, r24	; 0x01
		break ;
     bc8:	13 c0       	rjmp	.+38     	; 0xbf0 <DIO_read_port+0x68>
		case 'B':
		return_val=PINB; // read the value of port B 
     bca:	86 e3       	ldi	r24, 0x36	; 54
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	89 83       	std	Y+1, r24	; 0x01
		break ;
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <DIO_read_port+0x68>
		case 'C' :
		return_val=PINC; // read the value of port C 
     bd6:	83 e3       	ldi	r24, 0x33	; 51
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	fc 01       	movw	r30, r24
     bdc:	80 81       	ld	r24, Z
     bde:	89 83       	std	Y+1, r24	; 0x01
		break ;
     be0:	07 c0       	rjmp	.+14     	; 0xbf0 <DIO_read_port+0x68>
		case 'D':
		return_val=PIND; // read the value of port D 
     be2:	80 e3       	ldi	r24, 0x30	; 48
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	89 83       	std	Y+1, r24	; 0x01
		break ;
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <DIO_read_port+0x68>
		default:
		break ;
     bee:	00 00       	nop
	}
	return return_val;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	00 d0       	rcall	.+0      	; 0xc02 <DIO_vconnectpullup+0x6>
     c02:	0f 92       	push	r0
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	6a 83       	std	Y+2, r22	; 0x02
     c0c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	82 34       	cpi	r24, 0x42	; 66
     c16:	91 05       	cpc	r25, r1
     c18:	09 f4       	brne	.+2      	; 0xc1c <DIO_vconnectpullup+0x20>
     c1a:	40 c0       	rjmp	.+128    	; 0xc9c <DIO_vconnectpullup+0xa0>
     c1c:	83 34       	cpi	r24, 0x43	; 67
     c1e:	91 05       	cpc	r25, r1
     c20:	24 f4       	brge	.+8      	; 0xc2a <DIO_vconnectpullup+0x2e>
     c22:	81 34       	cpi	r24, 0x41	; 65
     c24:	91 05       	cpc	r25, r1
     c26:	51 f0       	breq	.+20     	; 0xc3c <DIO_vconnectpullup+0x40>
     c28:	c9 c0       	rjmp	.+402    	; 0xdbc <DIO_vconnectpullup+0x1c0>
     c2a:	83 34       	cpi	r24, 0x43	; 67
     c2c:	91 05       	cpc	r25, r1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <DIO_vconnectpullup+0x36>
     c30:	65 c0       	rjmp	.+202    	; 0xcfc <DIO_vconnectpullup+0x100>
     c32:	84 34       	cpi	r24, 0x44	; 68
     c34:	91 05       	cpc	r25, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <DIO_vconnectpullup+0x3e>
     c38:	91 c0       	rjmp	.+290    	; 0xd5c <DIO_vconnectpullup+0x160>
     c3a:	c0 c0       	rjmp	.+384    	; 0xdbc <DIO_vconnectpullup+0x1c0>
	{
		case 'A':
		if(connect_pullup==1)
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	b1 f4       	brne	.+44     	; 0xc6e <DIO_vconnectpullup+0x72>
		{
			SET_BIT(PORTA,pinnumber);
     c42:	8b e3       	ldi	r24, 0x3B	; 59
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	2b e3       	ldi	r18, 0x3B	; 59
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	f9 01       	movw	r30, r18
     c4c:	20 81       	ld	r18, Z
     c4e:	62 2f       	mov	r22, r18
     c50:	2a 81       	ldd	r18, Y+2	; 0x02
     c52:	42 2f       	mov	r20, r18
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	21 e0       	ldi	r18, 0x01	; 1
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	04 2e       	mov	r0, r20
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_vconnectpullup+0x66>
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_vconnectpullup+0x62>
     c66:	26 2b       	or	r18, r22
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
		}
		break;
     c6c:	a7 c0       	rjmp	.+334    	; 0xdbc <DIO_vconnectpullup+0x1c0>
		{
			SET_BIT(PORTA,pinnumber);
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     c6e:	8b e3       	ldi	r24, 0x3B	; 59
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	2b e3       	ldi	r18, 0x3B	; 59
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	f9 01       	movw	r30, r18
     c78:	20 81       	ld	r18, Z
     c7a:	62 2f       	mov	r22, r18
     c7c:	2a 81       	ldd	r18, Y+2	; 0x02
     c7e:	42 2f       	mov	r20, r18
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	04 2e       	mov	r0, r20
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_vconnectpullup+0x92>
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_vconnectpullup+0x8e>
     c92:	20 95       	com	r18
     c94:	26 23       	and	r18, r22
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18
		}
		break;
     c9a:	90 c0       	rjmp	.+288    	; 0xdbc <DIO_vconnectpullup+0x1c0>
		case 'B':
		if(connect_pullup==1)
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	b1 f4       	brne	.+44     	; 0xcce <DIO_vconnectpullup+0xd2>
		{
			SET_BIT(PORTB,pinnumber);
     ca2:	88 e3       	ldi	r24, 0x38	; 56
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	28 e3       	ldi	r18, 0x38	; 56
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	f9 01       	movw	r30, r18
     cac:	20 81       	ld	r18, Z
     cae:	62 2f       	mov	r22, r18
     cb0:	2a 81       	ldd	r18, Y+2	; 0x02
     cb2:	42 2f       	mov	r20, r18
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	04 2e       	mov	r0, r20
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_vconnectpullup+0xc6>
     cbe:	22 0f       	add	r18, r18
     cc0:	33 1f       	adc	r19, r19
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_vconnectpullup+0xc2>
     cc6:	26 2b       	or	r18, r22
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
		}
		break;
     ccc:	77 c0       	rjmp	.+238    	; 0xdbc <DIO_vconnectpullup+0x1c0>
		{
			SET_BIT(PORTB,pinnumber);
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     cce:	88 e3       	ldi	r24, 0x38	; 56
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	28 e3       	ldi	r18, 0x38	; 56
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	f9 01       	movw	r30, r18
     cd8:	20 81       	ld	r18, Z
     cda:	62 2f       	mov	r22, r18
     cdc:	2a 81       	ldd	r18, Y+2	; 0x02
     cde:	42 2f       	mov	r20, r18
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	21 e0       	ldi	r18, 0x01	; 1
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	04 2e       	mov	r0, r20
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_vconnectpullup+0xf2>
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_vconnectpullup+0xee>
     cf2:	20 95       	com	r18
     cf4:	26 23       	and	r18, r22
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18
		}
		break;
     cfa:	60 c0       	rjmp	.+192    	; 0xdbc <DIO_vconnectpullup+0x1c0>
		case 'C':
		if(connect_pullup==1)
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	b1 f4       	brne	.+44     	; 0xd2e <DIO_vconnectpullup+0x132>
		{
			SET_BIT(PORTC,pinnumber);
     d02:	85 e3       	ldi	r24, 0x35	; 53
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	25 e3       	ldi	r18, 0x35	; 53
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	62 2f       	mov	r22, r18
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	42 2f       	mov	r20, r18
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	04 2e       	mov	r0, r20
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_vconnectpullup+0x126>
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_vconnectpullup+0x122>
     d26:	26 2b       	or	r18, r22
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
		}
		break;
     d2c:	47 c0       	rjmp	.+142    	; 0xdbc <DIO_vconnectpullup+0x1c0>
			SET_BIT(PORTC,pinnumber);
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     d2e:	85 e3       	ldi	r24, 0x35	; 53
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	25 e3       	ldi	r18, 0x35	; 53
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	62 2f       	mov	r22, r18
     d3c:	2a 81       	ldd	r18, Y+2	; 0x02
     d3e:	42 2f       	mov	r20, r18
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	04 2e       	mov	r0, r20
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_vconnectpullup+0x152>
     d4a:	22 0f       	add	r18, r18
     d4c:	33 1f       	adc	r19, r19
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_vconnectpullup+0x14e>
     d52:	20 95       	com	r18
     d54:	26 23       	and	r18, r22
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
		}
		break;
     d5a:	30 c0       	rjmp	.+96     	; 0xdbc <DIO_vconnectpullup+0x1c0>
		case 'D':
		if(connect_pullup==1)
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	b1 f4       	brne	.+44     	; 0xd8e <DIO_vconnectpullup+0x192>
		{
			SET_BIT(PORTD,pinnumber);
     d62:	82 e3       	ldi	r24, 0x32	; 50
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	22 e3       	ldi	r18, 0x32	; 50
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	f9 01       	movw	r30, r18
     d6c:	20 81       	ld	r18, Z
     d6e:	62 2f       	mov	r22, r18
     d70:	2a 81       	ldd	r18, Y+2	; 0x02
     d72:	42 2f       	mov	r20, r18
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	21 e0       	ldi	r18, 0x01	; 1
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	04 2e       	mov	r0, r20
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_vconnectpullup+0x186>
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_vconnectpullup+0x182>
     d86:	26 2b       	or	r18, r22
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
		}
		break;
     d8c:	16 c0       	rjmp	.+44     	; 0xdba <DIO_vconnectpullup+0x1be>
			SET_BIT(PORTD,pinnumber);
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     d8e:	82 e3       	ldi	r24, 0x32	; 50
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	22 e3       	ldi	r18, 0x32	; 50
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	f9 01       	movw	r30, r18
     d98:	20 81       	ld	r18, Z
     d9a:	62 2f       	mov	r22, r18
     d9c:	2a 81       	ldd	r18, Y+2	; 0x02
     d9e:	42 2f       	mov	r20, r18
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	21 e0       	ldi	r18, 0x01	; 1
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	04 2e       	mov	r0, r20
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_vconnectpullup+0x1b2>
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_vconnectpullup+0x1ae>
     db2:	20 95       	com	r18
     db4:	26 23       	and	r18, r22
     db6:	fc 01       	movw	r30, r24
     db8:	20 83       	st	Z, r18
		}
		break;
     dba:	00 00       	nop
		
	}
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 d0       	rcall	.+0      	; 0xdce <write_low_nibble+0x6>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	8f 70       	andi	r24, 0x0F	; 15
     dda:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	82 34       	cpi	r24, 0x42	; 66
     de4:	91 05       	cpc	r25, r1
     de6:	09 f1       	breq	.+66     	; 0xe2a <write_low_nibble+0x62>
     de8:	83 34       	cpi	r24, 0x43	; 67
     dea:	91 05       	cpc	r25, r1
     dec:	24 f4       	brge	.+8      	; 0xdf6 <write_low_nibble+0x2e>
     dee:	81 34       	cpi	r24, 0x41	; 65
     df0:	91 05       	cpc	r25, r1
     df2:	41 f0       	breq	.+16     	; 0xe04 <write_low_nibble+0x3c>
     df4:	53 c0       	rjmp	.+166    	; 0xe9c <write_low_nibble+0xd4>
     df6:	83 34       	cpi	r24, 0x43	; 67
     df8:	91 05       	cpc	r25, r1
     dfa:	51 f1       	breq	.+84     	; 0xe50 <write_low_nibble+0x88>
     dfc:	84 34       	cpi	r24, 0x44	; 68
     dfe:	91 05       	cpc	r25, r1
     e00:	d1 f1       	breq	.+116    	; 0xe76 <write_low_nibble+0xae>
     e02:	4c c0       	rjmp	.+152    	; 0xe9c <write_low_nibble+0xd4>
	{
		case 'A':
		PORTA&=0xf0;
     e04:	8b e3       	ldi	r24, 0x3B	; 59
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	2b e3       	ldi	r18, 0x3B	; 59
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	f9 01       	movw	r30, r18
     e0e:	20 81       	ld	r18, Z
     e10:	20 7f       	andi	r18, 0xF0	; 240
     e12:	fc 01       	movw	r30, r24
     e14:	20 83       	st	Z, r18
		PORTA|=value;
     e16:	8b e3       	ldi	r24, 0x3B	; 59
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	2b e3       	ldi	r18, 0x3B	; 59
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	f9 01       	movw	r30, r18
     e20:	30 81       	ld	r19, Z
     e22:	2a 81       	ldd	r18, Y+2	; 0x02
     e24:	23 2b       	or	r18, r19
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
		case 'B':
		PORTB&=0xf0;
     e2a:	88 e3       	ldi	r24, 0x38	; 56
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	28 e3       	ldi	r18, 0x38	; 56
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	f9 01       	movw	r30, r18
     e34:	20 81       	ld	r18, Z
     e36:	20 7f       	andi	r18, 0xF0	; 240
     e38:	fc 01       	movw	r30, r24
     e3a:	20 83       	st	Z, r18
		PORTB|=value;
     e3c:	88 e3       	ldi	r24, 0x38	; 56
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	28 e3       	ldi	r18, 0x38	; 56
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	f9 01       	movw	r30, r18
     e46:	30 81       	ld	r19, Z
     e48:	2a 81       	ldd	r18, Y+2	; 0x02
     e4a:	23 2b       	or	r18, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18
		case 'C':
		PORTC&=0xf0;
     e50:	85 e3       	ldi	r24, 0x35	; 53
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	25 e3       	ldi	r18, 0x35	; 53
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	f9 01       	movw	r30, r18
     e5a:	20 81       	ld	r18, Z
     e5c:	20 7f       	andi	r18, 0xF0	; 240
     e5e:	fc 01       	movw	r30, r24
     e60:	20 83       	st	Z, r18
		PORTC|=value;
     e62:	85 e3       	ldi	r24, 0x35	; 53
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	25 e3       	ldi	r18, 0x35	; 53
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	f9 01       	movw	r30, r18
     e6c:	30 81       	ld	r19, Z
     e6e:	2a 81       	ldd	r18, Y+2	; 0x02
     e70:	23 2b       	or	r18, r19
     e72:	fc 01       	movw	r30, r24
     e74:	20 83       	st	Z, r18
		case 'D':
		PORTD&=0xf0;
     e76:	82 e3       	ldi	r24, 0x32	; 50
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	22 e3       	ldi	r18, 0x32	; 50
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	f9 01       	movw	r30, r18
     e80:	20 81       	ld	r18, Z
     e82:	20 7f       	andi	r18, 0xF0	; 240
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
		PORTD|=value;
     e88:	82 e3       	ldi	r24, 0x32	; 50
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	22 e3       	ldi	r18, 0x32	; 50
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	30 81       	ld	r19, Z
     e94:	2a 81       	ldd	r18, Y+2	; 0x02
     e96:	23 2b       	or	r18, r19
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
	}
}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	00 d0       	rcall	.+0      	; 0xeac <write_high_nibble+0x6>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	82 95       	swap	r24
     eb8:	80 7f       	andi	r24, 0xF0	; 240
     eba:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	82 34       	cpi	r24, 0x42	; 66
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f1       	breq	.+66     	; 0xf0a <write_high_nibble+0x64>
     ec8:	83 34       	cpi	r24, 0x43	; 67
     eca:	91 05       	cpc	r25, r1
     ecc:	24 f4       	brge	.+8      	; 0xed6 <write_high_nibble+0x30>
     ece:	81 34       	cpi	r24, 0x41	; 65
     ed0:	91 05       	cpc	r25, r1
     ed2:	41 f0       	breq	.+16     	; 0xee4 <write_high_nibble+0x3e>
     ed4:	53 c0       	rjmp	.+166    	; 0xf7c <write_high_nibble+0xd6>
     ed6:	83 34       	cpi	r24, 0x43	; 67
     ed8:	91 05       	cpc	r25, r1
     eda:	51 f1       	breq	.+84     	; 0xf30 <write_high_nibble+0x8a>
     edc:	84 34       	cpi	r24, 0x44	; 68
     ede:	91 05       	cpc	r25, r1
     ee0:	d1 f1       	breq	.+116    	; 0xf56 <write_high_nibble+0xb0>
     ee2:	4c c0       	rjmp	.+152    	; 0xf7c <write_high_nibble+0xd6>
	{
		case 'A':
		PORTA&=0x0f;
     ee4:	8b e3       	ldi	r24, 0x3B	; 59
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	2b e3       	ldi	r18, 0x3B	; 59
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	f9 01       	movw	r30, r18
     eee:	20 81       	ld	r18, Z
     ef0:	2f 70       	andi	r18, 0x0F	; 15
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
		PORTA|=value;
     ef6:	8b e3       	ldi	r24, 0x3B	; 59
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	2b e3       	ldi	r18, 0x3B	; 59
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	f9 01       	movw	r30, r18
     f00:	30 81       	ld	r19, Z
     f02:	2a 81       	ldd	r18, Y+2	; 0x02
     f04:	23 2b       	or	r18, r19
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
		case 'B':
		PORTB&=0x0f;
     f0a:	88 e3       	ldi	r24, 0x38	; 56
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	28 e3       	ldi	r18, 0x38	; 56
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	2f 70       	andi	r18, 0x0F	; 15
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
		PORTB|=value;
     f1c:	88 e3       	ldi	r24, 0x38	; 56
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	28 e3       	ldi	r18, 0x38	; 56
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	f9 01       	movw	r30, r18
     f26:	30 81       	ld	r19, Z
     f28:	2a 81       	ldd	r18, Y+2	; 0x02
     f2a:	23 2b       	or	r18, r19
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 83       	st	Z, r18
		case 'C':
		PORTC&=0x0f;
     f30:	85 e3       	ldi	r24, 0x35	; 53
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	25 e3       	ldi	r18, 0x35	; 53
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	f9 01       	movw	r30, r18
     f3a:	20 81       	ld	r18, Z
     f3c:	2f 70       	andi	r18, 0x0F	; 15
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
		PORTC|=value;
     f42:	85 e3       	ldi	r24, 0x35	; 53
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	25 e3       	ldi	r18, 0x35	; 53
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	f9 01       	movw	r30, r18
     f4c:	30 81       	ld	r19, Z
     f4e:	2a 81       	ldd	r18, Y+2	; 0x02
     f50:	23 2b       	or	r18, r19
     f52:	fc 01       	movw	r30, r24
     f54:	20 83       	st	Z, r18
		case 'D':
		PORTD&=0x0f;
     f56:	82 e3       	ldi	r24, 0x32	; 50
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	22 e3       	ldi	r18, 0x32	; 50
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	2f 70       	andi	r18, 0x0F	; 15
     f64:	fc 01       	movw	r30, r24
     f66:	20 83       	st	Z, r18
		PORTD|=value;
     f68:	82 e3       	ldi	r24, 0x32	; 50
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	22 e3       	ldi	r18, 0x32	; 50
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	f9 01       	movw	r30, r18
     f72:	30 81       	ld	r19, Z
     f74:	2a 81       	ldd	r18, Y+2	; 0x02
     f76:	23 2b       	or	r18, r19
     f78:	fc 01       	movw	r30, r24
     f7a:	20 83       	st	Z, r18
	}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <I2C_Master_init>:
	#include <avr/io.h>
	#include "std_macros.h"
	#define F_CPU 8000000UL
	#define prescalar 1
	void I2C_Master_init(unsigned long SCL_Clock)
	{
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <I2C_Master_init+0xa>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <I2C_Master_init+0xc>
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	69 83       	std	Y+1, r22	; 0x01
     f98:	7a 83       	std	Y+2, r23	; 0x02
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	9c 83       	std	Y+4, r25	; 0x04
		TWBR= (unsigned char) (((F_CPU/SCL_Clock)-16) / (2*prescalar));
     f9e:	00 e2       	ldi	r16, 0x20	; 32
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	92 e1       	ldi	r25, 0x12	; 18
     fa6:	aa e7       	ldi	r26, 0x7A	; 122
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	29 81       	ldd	r18, Y+1	; 0x01
     fac:	3a 81       	ldd	r19, Y+2	; 0x02
     fae:	4b 81       	ldd	r20, Y+3	; 0x03
     fb0:	5c 81       	ldd	r21, Y+4	; 0x04
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 de 21 	call	0x43bc	; 0x43bc <__udivmodsi4>
     fba:	da 01       	movw	r26, r20
     fbc:	c9 01       	movw	r24, r18
     fbe:	40 97       	sbiw	r24, 0x10	; 16
     fc0:	a1 09       	sbc	r26, r1
     fc2:	b1 09       	sbc	r27, r1
     fc4:	b6 95       	lsr	r27
     fc6:	a7 95       	ror	r26
     fc8:	97 95       	ror	r25
     fca:	87 95       	ror	r24
     fcc:	f8 01       	movw	r30, r16
     fce:	80 83       	st	Z, r24
		if (prescalar==1)
		{
			TWSR=0;
     fd0:	81 e2       	ldi	r24, 0x21	; 33
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	10 82       	st	Z, r1
		}
		else if (prescalar==64)
		{
			TWSR=3;
		}
		SET_BIT(TWCR,TWEN);
     fd8:	86 e5       	ldi	r24, 0x56	; 86
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	26 e5       	ldi	r18, 0x56	; 86
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	f9 01       	movw	r30, r18
     fe2:	20 81       	ld	r18, Z
     fe4:	24 60       	ori	r18, 0x04	; 4
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
	}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <I2C_start>:
	
	void I2C_start(void)
	{
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TWCR,TWSTA);
    1004:	86 e5       	ldi	r24, 0x56	; 86
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	26 e5       	ldi	r18, 0x56	; 86
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	f9 01       	movw	r30, r18
    100e:	20 81       	ld	r18, Z
    1010:	20 62       	ori	r18, 0x20	; 32
    1012:	fc 01       	movw	r30, r24
    1014:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
    1016:	00 00       	nop
    1018:	86 e5       	ldi	r24, 0x56	; 86
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	88 1f       	adc	r24, r24
    1022:	88 27       	eor	r24, r24
    1024:	88 1f       	adc	r24, r24
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	a1 f3       	breq	.-24     	; 0x1018 <I2C_start+0x1c>
		if((TWSR & 0xf8) == 0x08) // start condition has been transmitted
    1030:	81 e2       	ldi	r24, 0x21	; 33
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	fc 01       	movw	r30, r24
    1036:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
	}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <I2C_repeated_start>:
	
	void I2C_repeated_start(void)
	{
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TWCR,TWSTA);
    1046:	86 e5       	ldi	r24, 0x56	; 86
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	26 e5       	ldi	r18, 0x56	; 86
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	20 62       	ori	r18, 0x20	; 32
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    1058:	00 00       	nop
    105a:	86 e5       	ldi	r24, 0x56	; 86
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	fc 01       	movw	r30, r24
    1060:	80 81       	ld	r24, Z
    1062:	88 1f       	adc	r24, r24
    1064:	88 27       	eor	r24, r24
    1066:	88 1f       	adc	r24, r24
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	90 70       	andi	r25, 0x00	; 0
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	a1 f3       	breq	.-24     	; 0x105a <I2C_repeated_start+0x1c>
		if ((TWSR & 0XF8) == 0x10) // repeated start condition has been transmitted
    1072:	81 e2       	ldi	r24, 0x21	; 33
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	fc 01       	movw	r30, r24
    1078:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
	}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <I2C_write_address>:
	
	void I2C_write_address(unsigned char address)
	{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	89 83       	std	Y+1, r24	; 0x01
		TWDR=address;
    108c:	83 e2       	ldi	r24, 0x23	; 35
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	29 81       	ldd	r18, Y+1	; 0x01
    1092:	fc 01       	movw	r30, r24
    1094:	20 83       	st	Z, r18
		SET_BIT(TWCR,TWINT);
    1096:	86 e5       	ldi	r24, 0x56	; 86
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	26 e5       	ldi	r18, 0x56	; 86
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	20 68       	ori	r18, 0x80	; 128
    10a4:	fc 01       	movw	r30, r24
    10a6:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
    10a8:	00 00       	nop
    10aa:	86 e5       	ldi	r24, 0x56	; 86
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	88 1f       	adc	r24, r24
    10b4:	88 27       	eor	r24, r24
    10b6:	88 1f       	adc	r24, r24
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	90 70       	andi	r25, 0x00	; 0
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	a1 f3       	breq	.-24     	; 0x10aa <I2C_write_address+0x2a>
		if ((TWSR & 0XF8) == 0x18) // SLA+write has been transmitted and ACK has been received 
    10c2:	81 e2       	ldi	r24, 0x21	; 33
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
	}
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <I2C_write_data>:
	
	void I2C_write_data(unsigned char data)
	{
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
		TWDR=data;
    10de:	83 e2       	ldi	r24, 0x23	; 35
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	29 81       	ldd	r18, Y+1	; 0x01
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18
		SET_BIT(TWCR,TWINT);
    10e8:	86 e5       	ldi	r24, 0x56	; 86
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	26 e5       	ldi	r18, 0x56	; 86
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	20 68       	ori	r18, 0x80	; 128
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    10fa:	00 00       	nop
    10fc:	86 e5       	ldi	r24, 0x56	; 86
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	88 1f       	adc	r24, r24
    1106:	88 27       	eor	r24, r24
    1108:	88 1f       	adc	r24, r24
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 70       	andi	r25, 0x00	; 0
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	a1 f3       	breq	.-24     	; 0x10fc <I2C_write_data+0x2a>
		if((TWSR & 0XF8) == 0x28) // data has been transmitted and ACK has been received
    1114:	81 e2       	ldi	r24, 0x21	; 33
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
	}
    111c:	0f 90       	pop	r0
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <I2C_stop>:
	
	void I2C_stop(void)
	{
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
    112c:	86 e5       	ldi	r24, 0x56	; 86
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	24 e9       	ldi	r18, 0x94	; 148
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
	}
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <I2C_set_address>:
	
	void I2C_set_address(unsigned char address)
	{
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
		TWAR=address;
    1148:	82 e2       	ldi	r24, 0x22	; 34
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	29 81       	ldd	r18, Y+1	; 0x01
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
	}
    1152:	0f 90       	pop	r0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <I2C_slave_read>:
	
	unsigned char I2C_slave_read(void)
	{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
		TWCR|=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1162:	86 e5       	ldi	r24, 0x56	; 86
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	26 e5       	ldi	r18, 0x56	; 86
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	24 6c       	ori	r18, 0xC4	; 196
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0);
    1174:	00 00       	nop
    1176:	86 e5       	ldi	r24, 0x56	; 86
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	fc 01       	movw	r30, r24
    117c:	80 81       	ld	r24, Z
    117e:	88 1f       	adc	r24, r24
    1180:	88 27       	eor	r24, r24
    1182:	88 1f       	adc	r24, r24
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	90 70       	andi	r25, 0x00	; 0
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	a1 f3       	breq	.-24     	; 0x1176 <I2C_slave_read+0x1c>
		if ((TWSR & 0XF8) == 0x60) // own SLA+W has been received and ACK has been returned
    118e:	81 e2       	ldi	r24, 0x21	; 33
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
		SET_BIT(TWCR,TWINT);
    1196:	86 e5       	ldi	r24, 0x56	; 86
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	26 e5       	ldi	r18, 0x56	; 86
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	f9 01       	movw	r30, r18
    11a0:	20 81       	ld	r18, Z
    11a2:	20 68       	ori	r18, 0x80	; 128
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0);
    11a8:	00 00       	nop
    11aa:	86 e5       	ldi	r24, 0x56	; 86
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 81       	ld	r24, Z
    11b2:	88 1f       	adc	r24, r24
    11b4:	88 27       	eor	r24, r24
    11b6:	88 1f       	adc	r24, r24
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	a1 f3       	breq	.-24     	; 0x11aa <I2C_slave_read+0x50>
		if ((TWSR & 0XF8) == 0x80) // previously addressed with own SLA+W : data has been received : ACK has been returned
    11c2:	81 e2       	ldi	r24, 0x21	; 33
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	fc 01       	movw	r30, r24
    11c8:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
		return TWDR ;
    11ca:	83 e2       	ldi	r24, 0x23	; 35
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	fc 01       	movw	r30, r24
    11d0:	80 81       	ld	r24, Z
	}
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <I2C_write_address_and_read>:
	
void I2C_write_address_and_read(unsigned char address)
{
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
	TWDR=address;
    11e4:	83 e2       	ldi	r24, 0x23	; 35
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	29 81       	ldd	r18, Y+1	; 0x01
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18
	TWCR=(1<<TWINT)|(1<<TWEN);
    11ee:	86 e5       	ldi	r24, 0x56	; 86
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	24 e8       	ldi	r18, 0x84	; 132
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
	while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    11f8:	00 00       	nop
    11fa:	86 e5       	ldi	r24, 0x56	; 86
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	fc 01       	movw	r30, r24
    1200:	80 81       	ld	r24, Z
    1202:	88 1f       	adc	r24, r24
    1204:	88 27       	eor	r24, r24
    1206:	88 1f       	adc	r24, r24
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	90 70       	andi	r25, 0x00	; 0
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	a1 f3       	breq	.-24     	; 0x11fa <I2C_write_address_and_read+0x22>
	if ((TWSR & 0XF8) == 0x40) // SLA+read has been transmitted and ACK has been received
    1212:	81 e2       	ldi	r24, 0x21	; 33
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	fc 01       	movw	r30, r24
    1218:	80 81       	ld	r24, Z
	}
	else
	{
		
	}
}	
    121a:	0f 90       	pop	r0
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <I2C_read_with_NACK>:

unsigned char I2C_read_with_NACK(void)
{
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
    122a:	86 e5       	ldi	r24, 0x56	; 86
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	24 e8       	ldi	r18, 0x84	; 132
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
	while(READ_BIT(TWCR,TWINT)==0);
    1234:	00 00       	nop
    1236:	86 e5       	ldi	r24, 0x56	; 86
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	fc 01       	movw	r30, r24
    123c:	80 81       	ld	r24, Z
    123e:	88 1f       	adc	r24, r24
    1240:	88 27       	eor	r24, r24
    1242:	88 1f       	adc	r24, r24
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	90 70       	andi	r25, 0x00	; 0
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	a1 f3       	breq	.-24     	; 0x1236 <I2C_read_with_NACK+0x14>
	if ((TWSR & 0XF8) == 0x58) // data byte has been received and Not ACK has been returned
    124e:	81 e2       	ldi	r24, 0x21	; 33
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	fc 01       	movw	r30, r24
    1254:	80 81       	ld	r24, Z
	}
	else
	{
		
	}
	return TWDR ;
    1256:	83 e2       	ldi	r24, 0x23	; 35
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	fc 01       	movw	r30, r24
    125c:	80 81       	ld	r24, Z
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <I2C_read_with_ACK>:

unsigned char I2C_read_with_ACK(void)
{
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
    126c:	86 e5       	ldi	r24, 0x56	; 86
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	24 e8       	ldi	r18, 0x84	; 132
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
	while(READ_BIT(TWCR,TWINT)==0);
    1276:	00 00       	nop
    1278:	86 e5       	ldi	r24, 0x56	; 86
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	fc 01       	movw	r30, r24
    127e:	80 81       	ld	r24, Z
    1280:	88 1f       	adc	r24, r24
    1282:	88 27       	eor	r24, r24
    1284:	88 1f       	adc	r24, r24
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	90 70       	andi	r25, 0x00	; 0
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	a1 f3       	breq	.-24     	; 0x1278 <I2C_read_with_ACK+0x14>
	if ((TWSR & 0XF8) == 0x58) // data byte has been received and Not ACK has been returned// need to edit hex number
    1290:	81 e2       	ldi	r24, 0x21	; 33
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	fc 01       	movw	r30, r24
    1296:	80 81       	ld	r24, Z
	}
	else
	{
		
	}
	return TWDR ;
    1298:	83 e2       	ldi	r24, 0x23	; 35
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	80 81       	ld	r24, Z
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	c4 55       	subi	r28, 0x54	; 84
    12b4:	d0 40       	sbci	r29, 0x00	; 0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a6 e9       	ldi	r26, 0x96	; 150
    12c6:	b3 e4       	ldi	r27, 0x43	; 67
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	ab 83       	std	Y+3, r26	; 0x03
    12ce:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	69 81       	ldd	r22, Y+1	; 0x01
    12d2:	7a 81       	ldd	r23, Y+2	; 0x02
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4a ef       	ldi	r20, 0xFA	; 250
    12de:	54 e4       	ldi	r21, 0x44	; 68
    12e0:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	af 83       	std	Y+7, r26	; 0x07
    12ee:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    12f0:	11 e0       	ldi	r17, 0x01	; 1
    12f2:	6d 81       	ldd	r22, Y+5	; 0x05
    12f4:	7e 81       	ldd	r23, Y+6	; 0x06
    12f6:	8f 81       	ldd	r24, Y+7	; 0x07
    12f8:	98 85       	ldd	r25, Y+8	; 0x08
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f e3       	ldi	r21, 0x3F	; 63
    1302:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    1306:	88 23       	and	r24, r24
    1308:	0c f0       	brlt	.+2      	; 0x130c <LCD_vInit+0x66>
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	11 23       	and	r17, r17
    130e:	29 f0       	breq	.+10     	; 0x131a <LCD_vInit+0x74>
		__ticks = 1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9a 87       	std	Y+10, r25	; 0x0a
    1316:	89 87       	std	Y+9, r24	; 0x09
    1318:	46 c0       	rjmp	.+140    	; 0x13a6 <LCD_vInit+0x100>
	else if (__tmp > 65535)
    131a:	11 e0       	ldi	r17, 0x01	; 1
    131c:	6d 81       	ldd	r22, Y+5	; 0x05
    131e:	7e 81       	ldd	r23, Y+6	; 0x06
    1320:	8f 81       	ldd	r24, Y+7	; 0x07
    1322:	98 85       	ldd	r25, Y+8	; 0x08
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	3f ef       	ldi	r19, 0xFF	; 255
    1328:	4f e7       	ldi	r20, 0x7F	; 127
    132a:	57 e4       	ldi	r21, 0x47	; 71
    132c:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    1330:	18 16       	cp	r1, r24
    1332:	0c f0       	brlt	.+2      	; 0x1336 <LCD_vInit+0x90>
    1334:	10 e0       	ldi	r17, 0x00	; 0
    1336:	11 23       	and	r17, r17
    1338:	61 f1       	breq	.+88     	; 0x1392 <LCD_vInit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	69 81       	ldd	r22, Y+1	; 0x01
    133c:	7a 81       	ldd	r23, Y+2	; 0x02
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9a 87       	std	Y+10, r25	; 0x0a
    1360:	89 87       	std	Y+9, r24	; 0x09
    1362:	12 c0       	rjmp	.+36     	; 0x1388 <LCD_vInit+0xe2>
    1364:	88 ec       	ldi	r24, 0xC8	; 200
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9c 87       	std	Y+12, r25	; 0x0c
    136a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    136c:	8b 85       	ldd	r24, Y+11	; 0x0b
    136e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1370:	8c 01       	movw	r16, r24
    1372:	c8 01       	movw	r24, r16
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCD_vInit+0xce>
    1378:	8c 01       	movw	r16, r24
    137a:	1c 87       	std	Y+12, r17	; 0x0c
    137c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9a 87       	std	Y+10, r25	; 0x0a
    1386:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	51 f7       	brne	.-44     	; 0x1364 <LCD_vInit+0xbe>
    1390:	17 c0       	rjmp	.+46     	; 0x13c0 <LCD_vInit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1392:	6d 81       	ldd	r22, Y+5	; 0x05
    1394:	7e 81       	ldd	r23, Y+6	; 0x06
    1396:	8f 81       	ldd	r24, Y+7	; 0x07
    1398:	98 85       	ldd	r25, Y+8	; 0x08
    139a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9a 87       	std	Y+10, r25	; 0x0a
    13a4:	89 87       	std	Y+9, r24	; 0x09
    13a6:	89 85       	ldd	r24, Y+9	; 0x09
    13a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13aa:	9e 87       	std	Y+14, r25	; 0x0e
    13ac:	8d 87       	std	Y+13, r24	; 0x0d
    13ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b2:	8c 01       	movw	r16, r24
    13b4:	f8 01       	movw	r30, r16
    13b6:	31 97       	sbiw	r30, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <LCD_vInit+0x110>
    13ba:	8f 01       	movw	r16, r30
    13bc:	1e 87       	std	Y+14, r17	; 0x0e
    13be:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
    13c0:	81 e4       	ldi	r24, 0x41	; 65
    13c2:	64 e0       	ldi	r22, 0x04	; 4
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
    13ca:	81 e4       	ldi	r24, 0x41	; 65
    13cc:	65 e0       	ldi	r22, 0x05	; 5
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
    13d4:	81 e4       	ldi	r24, 0x41	; 65
    13d6:	66 e0       	ldi	r22, 0x06	; 6
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
    13de:	81 e4       	ldi	r24, 0x41	; 65
    13e0:	67 e0       	ldi	r22, 0x07	; 7
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',EN,1);
    13e8:	81 e4       	ldi	r24, 0x41	; 65
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RW,1);
    13f2:	81 e4       	ldi	r24, 0x41	; 65
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RS,1);
    13fc:	81 e4       	ldi	r24, 0x41	; 65
    13fe:	62 e0       	ldi	r22, 0x02	; 2
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
   	DIO_write('A',RW,0);
    1406:	81 e4       	ldi	r24, 0x41	; 65
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_vSend_cmd>
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a0 e2       	ldi	r26, 0x20	; 32
    141c:	b1 e4       	ldi	r27, 0x41	; 65
    141e:	8f 87       	std	Y+15, r24	; 0x0f
    1420:	98 8b       	std	Y+16, r25	; 0x10
    1422:	a9 8b       	std	Y+17, r26	; 0x11
    1424:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1426:	6f 85       	ldd	r22, Y+15	; 0x0f
    1428:	78 89       	ldd	r23, Y+16	; 0x10
    142a:	89 89       	ldd	r24, Y+17	; 0x11
    142c:	9a 89       	ldd	r25, Y+18	; 0x12
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	4a ef       	ldi	r20, 0xFA	; 250
    1434:	54 e4       	ldi	r21, 0x44	; 68
    1436:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	8b 8b       	std	Y+19, r24	; 0x13
    1440:	9c 8b       	std	Y+20, r25	; 0x14
    1442:	ad 8b       	std	Y+21, r26	; 0x15
    1444:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1446:	11 e0       	ldi	r17, 0x01	; 1
    1448:	6b 89       	ldd	r22, Y+19	; 0x13
    144a:	7c 89       	ldd	r23, Y+20	; 0x14
    144c:	8d 89       	ldd	r24, Y+21	; 0x15
    144e:	9e 89       	ldd	r25, Y+22	; 0x16
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    145c:	88 23       	and	r24, r24
    145e:	0c f0       	brlt	.+2      	; 0x1462 <LCD_vInit+0x1bc>
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	11 23       	and	r17, r17
    1464:	29 f0       	breq	.+10     	; 0x1470 <LCD_vInit+0x1ca>
		__ticks = 1;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	98 8f       	std	Y+24, r25	; 0x18
    146c:	8f 8b       	std	Y+23, r24	; 0x17
    146e:	46 c0       	rjmp	.+140    	; 0x14fc <LCD_vInit+0x256>
	else if (__tmp > 65535)
    1470:	11 e0       	ldi	r17, 0x01	; 1
    1472:	6b 89       	ldd	r22, Y+19	; 0x13
    1474:	7c 89       	ldd	r23, Y+20	; 0x14
    1476:	8d 89       	ldd	r24, Y+21	; 0x15
    1478:	9e 89       	ldd	r25, Y+22	; 0x16
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	3f ef       	ldi	r19, 0xFF	; 255
    147e:	4f e7       	ldi	r20, 0x7F	; 127
    1480:	57 e4       	ldi	r21, 0x47	; 71
    1482:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    1486:	18 16       	cp	r1, r24
    1488:	0c f0       	brlt	.+2      	; 0x148c <LCD_vInit+0x1e6>
    148a:	10 e0       	ldi	r17, 0x00	; 0
    148c:	11 23       	and	r17, r17
    148e:	61 f1       	breq	.+88     	; 0x14e8 <LCD_vInit+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1490:	6f 85       	ldd	r22, Y+15	; 0x0f
    1492:	78 89       	ldd	r23, Y+16	; 0x10
    1494:	89 89       	ldd	r24, Y+17	; 0x11
    1496:	9a 89       	ldd	r25, Y+18	; 0x12
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e2       	ldi	r20, 0x20	; 32
    149e:	51 e4       	ldi	r21, 0x41	; 65
    14a0:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	98 8f       	std	Y+24, r25	; 0x18
    14b6:	8f 8b       	std	Y+23, r24	; 0x17
    14b8:	12 c0       	rjmp	.+36     	; 0x14de <LCD_vInit+0x238>
    14ba:	88 ec       	ldi	r24, 0xC8	; 200
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9a 8f       	std	Y+26, r25	; 0x1a
    14c0:	89 8f       	std	Y+25, r24	; 0x19
    14c2:	89 8d       	ldd	r24, Y+25	; 0x19
    14c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14c6:	8c 01       	movw	r16, r24
    14c8:	c8 01       	movw	r24, r16
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <LCD_vInit+0x224>
    14ce:	8c 01       	movw	r16, r24
    14d0:	1a 8f       	std	Y+26, r17	; 0x1a
    14d2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d4:	8f 89       	ldd	r24, Y+23	; 0x17
    14d6:	98 8d       	ldd	r25, Y+24	; 0x18
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	98 8f       	std	Y+24, r25	; 0x18
    14dc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14de:	8f 89       	ldd	r24, Y+23	; 0x17
    14e0:	98 8d       	ldd	r25, Y+24	; 0x18
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	51 f7       	brne	.-44     	; 0x14ba <LCD_vInit+0x214>
    14e6:	17 c0       	rjmp	.+46     	; 0x1516 <LCD_vInit+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e8:	6b 89       	ldd	r22, Y+19	; 0x13
    14ea:	7c 89       	ldd	r23, Y+20	; 0x14
    14ec:	8d 89       	ldd	r24, Y+21	; 0x15
    14ee:	9e 89       	ldd	r25, Y+22	; 0x16
    14f0:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	98 8f       	std	Y+24, r25	; 0x18
    14fa:	8f 8b       	std	Y+23, r24	; 0x17
    14fc:	8f 89       	ldd	r24, Y+23	; 0x17
    14fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1500:	9c 8f       	std	Y+28, r25	; 0x1c
    1502:	8b 8f       	std	Y+27, r24	; 0x1b
    1504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1508:	8c 01       	movw	r16, r24
    150a:	f8 01       	movw	r30, r16
    150c:	31 97       	sbiw	r30, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <LCD_vInit+0x266>
    1510:	8f 01       	movw	r16, r30
    1512:	1c 8f       	std	Y+28, r17	; 0x1c
    1514:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    1516:	88 e2       	ldi	r24, 0x28	; 40
    1518:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_vSend_cmd>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 e8       	ldi	r26, 0x80	; 128
    1522:	bf e3       	ldi	r27, 0x3F	; 63
    1524:	8d 8f       	std	Y+29, r24	; 0x1d
    1526:	9e 8f       	std	Y+30, r25	; 0x1e
    1528:	af 8f       	std	Y+31, r26	; 0x1f
    152a:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    152c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    152e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1530:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1532:	98 a1       	lds	r25, 0x48
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	4a ef       	ldi	r20, 0xFA	; 250
    153a:	54 e4       	ldi	r21, 0x44	; 68
    153c:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	89 a3       	lds	r24, 0x59
    1546:	9a a3       	lds	r25, 0x5a
    1548:	ab a3       	lds	r26, 0x5b
    154a:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    154c:	11 e0       	ldi	r17, 0x01	; 1
    154e:	69 a1       	lds	r22, 0x49
    1550:	7a a1       	lds	r23, 0x4a
    1552:	8b a1       	lds	r24, 0x4b
    1554:	9c a1       	lds	r25, 0x4c
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e8       	ldi	r20, 0x80	; 128
    155c:	5f e3       	ldi	r21, 0x3F	; 63
    155e:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    1562:	88 23       	and	r24, r24
    1564:	0c f0       	brlt	.+2      	; 0x1568 <LCD_vInit+0x2c2>
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	11 23       	and	r17, r17
    156a:	29 f0       	breq	.+10     	; 0x1576 <LCD_vInit+0x2d0>
		__ticks = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9e a3       	lds	r25, 0x5e
    1572:	8d a3       	lds	r24, 0x5d
    1574:	46 c0       	rjmp	.+140    	; 0x1602 <LCD_vInit+0x35c>
	else if (__tmp > 65535)
    1576:	11 e0       	ldi	r17, 0x01	; 1
    1578:	69 a1       	lds	r22, 0x49
    157a:	7a a1       	lds	r23, 0x4a
    157c:	8b a1       	lds	r24, 0x4b
    157e:	9c a1       	lds	r25, 0x4c
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    158c:	18 16       	cp	r1, r24
    158e:	0c f0       	brlt	.+2      	; 0x1592 <LCD_vInit+0x2ec>
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	11 23       	and	r17, r17
    1594:	61 f1       	breq	.+88     	; 0x15ee <LCD_vInit+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1596:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1598:	7e 8d       	ldd	r23, Y+30	; 0x1e
    159a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    159c:	98 a1       	lds	r25, 0x48
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e2       	ldi	r20, 0x20	; 32
    15a4:	51 e4       	ldi	r21, 0x41	; 65
    15a6:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	9e a3       	lds	r25, 0x5e
    15bc:	8d a3       	lds	r24, 0x5d
    15be:	12 c0       	rjmp	.+36     	; 0x15e4 <LCD_vInit+0x33e>
    15c0:	88 ec       	ldi	r24, 0xC8	; 200
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	98 a7       	lds	r25, 0x78
    15c6:	8f a3       	lds	r24, 0x5f
    15c8:	8f a1       	lds	r24, 0x4f
    15ca:	98 a5       	lds	r25, 0x68
    15cc:	8c 01       	movw	r16, r24
    15ce:	c8 01       	movw	r24, r16
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_vInit+0x32a>
    15d4:	8c 01       	movw	r16, r24
    15d6:	18 a7       	lds	r17, 0x78
    15d8:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15da:	8d a1       	lds	r24, 0x4d
    15dc:	9e a1       	lds	r25, 0x4e
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	9e a3       	lds	r25, 0x5e
    15e2:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e4:	8d a1       	lds	r24, 0x4d
    15e6:	9e a1       	lds	r25, 0x4e
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	51 f7       	brne	.-44     	; 0x15c0 <LCD_vInit+0x31a>
    15ec:	17 c0       	rjmp	.+46     	; 0x161c <LCD_vInit+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ee:	69 a1       	lds	r22, 0x49
    15f0:	7a a1       	lds	r23, 0x4a
    15f2:	8b a1       	lds	r24, 0x4b
    15f4:	9c a1       	lds	r25, 0x4c
    15f6:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	9e a3       	lds	r25, 0x5e
    1600:	8d a3       	lds	r24, 0x5d
    1602:	8d a1       	lds	r24, 0x4d
    1604:	9e a1       	lds	r25, 0x4e
    1606:	9a a7       	lds	r25, 0x7a
    1608:	89 a7       	lds	r24, 0x79
    160a:	89 a5       	lds	r24, 0x69
    160c:	9a a5       	lds	r25, 0x6a
    160e:	8c 01       	movw	r16, r24
    1610:	f8 01       	movw	r30, r16
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_vInit+0x36c>
    1616:	8f 01       	movw	r16, r30
    1618:	1a a7       	lds	r17, 0x7a
    161a:	09 a7       	lds	r16, 0x79
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    161c:	8e e0       	ldi	r24, 0x0E	; 14
    161e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_vSend_cmd>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 e8       	ldi	r26, 0x80	; 128
    1628:	bf e3       	ldi	r27, 0x3F	; 63
    162a:	8b a7       	lds	r24, 0x7b
    162c:	9c a7       	lds	r25, 0x7c
    162e:	ad a7       	lds	r26, 0x7d
    1630:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1632:	6b a5       	lds	r22, 0x6b
    1634:	7c a5       	lds	r23, 0x6c
    1636:	8d a5       	lds	r24, 0x6d
    1638:	9e a5       	lds	r25, 0x6e
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4a ef       	ldi	r20, 0xFA	; 250
    1640:	54 e4       	ldi	r21, 0x44	; 68
    1642:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8f a7       	lds	r24, 0x7f
    164c:	98 ab       	sts	0x58, r25
    164e:	a9 ab       	sts	0x59, r26
    1650:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    1652:	11 e0       	ldi	r17, 0x01	; 1
    1654:	6f a5       	lds	r22, 0x6f
    1656:	78 a9       	sts	0x48, r23
    1658:	89 a9       	sts	0x49, r24
    165a:	9a a9       	sts	0x4a, r25
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    1668:	88 23       	and	r24, r24
    166a:	0c f0       	brlt	.+2      	; 0x166e <LCD_vInit+0x3c8>
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	11 23       	and	r17, r17
    1670:	29 f0       	breq	.+10     	; 0x167c <LCD_vInit+0x3d6>
		__ticks = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	9c ab       	sts	0x5c, r25
    1678:	8b ab       	sts	0x5b, r24
    167a:	46 c0       	rjmp	.+140    	; 0x1708 <LCD_vInit+0x462>
	else if (__tmp > 65535)
    167c:	11 e0       	ldi	r17, 0x01	; 1
    167e:	6f a5       	lds	r22, 0x6f
    1680:	78 a9       	sts	0x48, r23
    1682:	89 a9       	sts	0x49, r24
    1684:	9a a9       	sts	0x4a, r25
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    1692:	18 16       	cp	r1, r24
    1694:	0c f0       	brlt	.+2      	; 0x1698 <LCD_vInit+0x3f2>
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	11 23       	and	r17, r17
    169a:	61 f1       	breq	.+88     	; 0x16f4 <LCD_vInit+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6b a5       	lds	r22, 0x6b
    169e:	7c a5       	lds	r23, 0x6c
    16a0:	8d a5       	lds	r24, 0x6d
    16a2:	9e a5       	lds	r25, 0x6e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9c ab       	sts	0x5c, r25
    16c2:	8b ab       	sts	0x5b, r24
    16c4:	12 c0       	rjmp	.+36     	; 0x16ea <LCD_vInit+0x444>
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9e ab       	sts	0x5e, r25
    16cc:	8d ab       	sts	0x5d, r24
    16ce:	8d a9       	sts	0x4d, r24
    16d0:	9e a9       	sts	0x4e, r25
    16d2:	8c 01       	movw	r16, r24
    16d4:	c8 01       	movw	r24, r16
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_vInit+0x430>
    16da:	8c 01       	movw	r16, r24
    16dc:	1e ab       	sts	0x5e, r17
    16de:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	8b a9       	sts	0x4b, r24
    16e2:	9c a9       	sts	0x4c, r25
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9c ab       	sts	0x5c, r25
    16e8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	8b a9       	sts	0x4b, r24
    16ec:	9c a9       	sts	0x4c, r25
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	51 f7       	brne	.-44     	; 0x16c6 <LCD_vInit+0x420>
    16f2:	17 c0       	rjmp	.+46     	; 0x1722 <LCD_vInit+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	6f a5       	lds	r22, 0x6f
    16f6:	78 a9       	sts	0x48, r23
    16f8:	89 a9       	sts	0x49, r24
    16fa:	9a a9       	sts	0x4a, r25
    16fc:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9c ab       	sts	0x5c, r25
    1706:	8b ab       	sts	0x5b, r24
    1708:	8b a9       	sts	0x4b, r24
    170a:	9c a9       	sts	0x4c, r25
    170c:	98 af       	sts	0x78, r25
    170e:	8f ab       	sts	0x5f, r24
    1710:	8f a9       	sts	0x4f, r24
    1712:	98 ad       	sts	0x68, r25
    1714:	8c 01       	movw	r16, r24
    1716:	f8 01       	movw	r30, r16
    1718:	31 97       	sbiw	r30, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_vInit+0x472>
    171c:	8f 01       	movw	r16, r30
    171e:	18 af       	sts	0x78, r17
    1720:	0f ab       	sts	0x5f, r16
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_vSend_cmd>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 e2       	ldi	r26, 0x20	; 32
    172e:	b1 e4       	ldi	r27, 0x41	; 65
    1730:	89 af       	sts	0x79, r24
    1732:	9a af       	sts	0x7a, r25
    1734:	ab af       	sts	0x7b, r26
    1736:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1738:	69 ad       	sts	0x69, r22
    173a:	7a ad       	sts	0x6a, r23
    173c:	8b ad       	sts	0x6b, r24
    173e:	9c ad       	sts	0x6c, r25
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a ef       	ldi	r20, 0xFA	; 250
    1746:	54 e4       	ldi	r21, 0x44	; 68
    1748:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9e 01       	movw	r18, r28
    1752:	23 5c       	subi	r18, 0xC3	; 195
    1754:	3f 4f       	sbci	r19, 0xFF	; 255
    1756:	f9 01       	movw	r30, r18
    1758:	80 83       	st	Z, r24
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	a2 83       	std	Z+2, r26	; 0x02
    175e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1760:	11 e0       	ldi	r17, 0x01	; 1
    1762:	ce 01       	movw	r24, r28
    1764:	cd 96       	adiw	r24, 0x3d	; 61
    1766:	fc 01       	movw	r30, r24
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    177c:	88 23       	and	r24, r24
    177e:	0c f0       	brlt	.+2      	; 0x1782 <LCD_vInit+0x4dc>
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	11 23       	and	r17, r17
    1784:	49 f0       	breq	.+18     	; 0x1798 <LCD_vInit+0x4f2>
		__ticks = 1;
    1786:	ce 01       	movw	r24, r28
    1788:	8f 5b       	subi	r24, 0xBF	; 191
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	21 e0       	ldi	r18, 0x01	; 1
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	fc 01       	movw	r30, r24
    1792:	31 83       	std	Z+1, r19	; 0x01
    1794:	20 83       	st	Z, r18
    1796:	6e c0       	rjmp	.+220    	; 0x1874 <LCD_vInit+0x5ce>
	else if (__tmp > 65535)
    1798:	11 e0       	ldi	r17, 0x01	; 1
    179a:	ce 01       	movw	r24, r28
    179c:	cd 96       	adiw	r24, 0x3d	; 61
    179e:	fc 01       	movw	r30, r24
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	0c f0       	brlt	.+2      	; 0x17ba <LCD_vInit+0x514>
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	11 23       	and	r17, r17
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <LCD_vInit+0x51a>
    17be:	49 c0       	rjmp	.+146    	; 0x1852 <LCD_vInit+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c0:	69 ad       	sts	0x69, r22
    17c2:	7a ad       	sts	0x6a, r23
    17c4:	8b ad       	sts	0x6b, r24
    17c6:	9c ad       	sts	0x6c, r25
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	8e 01       	movw	r16, r28
    17da:	0f 5b       	subi	r16, 0xBF	; 191
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    17f0:	27 c0       	rjmp	.+78     	; 0x1840 <LCD_vInit+0x59a>
    17f2:	ce 01       	movw	r24, r28
    17f4:	8d 5b       	subi	r24, 0xBD	; 189
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	28 ec       	ldi	r18, 0xC8	; 200
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	31 83       	std	Z+1, r19	; 0x01
    1800:	20 83       	st	Z, r18
    1802:	ce 01       	movw	r24, r28
    1804:	8d 5b       	subi	r24, 0xBD	; 189
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	8c 01       	movw	r16, r24
    1810:	c8 01       	movw	r24, r16
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_vInit+0x56c>
    1816:	8c 01       	movw	r16, r24
    1818:	ce 01       	movw	r24, r28
    181a:	8d 5b       	subi	r24, 0xBD	; 189
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	fc 01       	movw	r30, r24
    1820:	11 83       	std	Z+1, r17	; 0x01
    1822:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	ce 01       	movw	r24, r28
    1826:	8f 5b       	subi	r24, 0xBF	; 191
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	9e 01       	movw	r18, r28
    182c:	2f 5b       	subi	r18, 0xBF	; 191
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	f9 01       	movw	r30, r18
    1832:	20 81       	ld	r18, Z
    1834:	31 81       	ldd	r19, Z+1	; 0x01
    1836:	21 50       	subi	r18, 0x01	; 1
    1838:	30 40       	sbci	r19, 0x00	; 0
    183a:	fc 01       	movw	r30, r24
    183c:	31 83       	std	Z+1, r19	; 0x01
    183e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	ce 01       	movw	r24, r28
    1842:	8f 5b       	subi	r24, 0xBF	; 191
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	fc 01       	movw	r30, r24
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	89 f6       	brne	.-94     	; 0x17f2 <LCD_vInit+0x54c>
    1850:	2e c0       	rjmp	.+92     	; 0x18ae <LCD_vInit+0x608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	8e 01       	movw	r16, r28
    1854:	0f 5b       	subi	r16, 0xBF	; 191
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	ce 01       	movw	r24, r28
    185a:	cd 96       	adiw	r24, 0x3d	; 61
    185c:	fc 01       	movw	r30, r24
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	f8 01       	movw	r30, r16
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
    1874:	ce 01       	movw	r24, r28
    1876:	8b 5b       	subi	r24, 0xBB	; 187
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	9e 01       	movw	r18, r28
    187c:	2f 5b       	subi	r18, 0xBF	; 191
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	f9 01       	movw	r30, r18
    1882:	20 81       	ld	r18, Z
    1884:	31 81       	ldd	r19, Z+1	; 0x01
    1886:	fc 01       	movw	r30, r24
    1888:	31 83       	std	Z+1, r19	; 0x01
    188a:	20 83       	st	Z, r18
    188c:	ce 01       	movw	r24, r28
    188e:	8b 5b       	subi	r24, 0xBB	; 187
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	fc 01       	movw	r30, r24
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	8c 01       	movw	r16, r24
    189a:	c8 01       	movw	r24, r16
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCD_vInit+0x5f6>
    18a0:	8c 01       	movw	r16, r24
    18a2:	ce 01       	movw	r24, r28
    18a4:	8b 5b       	subi	r24, 0xBB	; 187
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	fc 01       	movw	r30, r24
    18aa:	11 83       	std	Z+1, r17	; 0x01
    18ac:	00 83       	st	Z, r16
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    18ae:	86 e0       	ldi	r24, 0x06	; 6
    18b0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_vSend_cmd>
    18b4:	9e 01       	movw	r18, r28
    18b6:	29 5b       	subi	r18, 0xB9	; 185
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e8       	ldi	r26, 0x80	; 128
    18c0:	bf e3       	ldi	r27, 0x3F	; 63
    18c2:	f9 01       	movw	r30, r18
    18c4:	80 83       	st	Z, r24
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	a2 83       	std	Z+2, r26	; 0x02
    18ca:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	8e 01       	movw	r16, r28
    18ce:	05 5b       	subi	r16, 0xB5	; 181
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	ce 01       	movw	r24, r28
    18d4:	89 5b       	subi	r24, 0xB9	; 185
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	fc 01       	movw	r30, r24
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	f8 01       	movw	r30, r16
    18f4:	80 83       	st	Z, r24
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	a2 83       	std	Z+2, r26	; 0x02
    18fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18fc:	ce 01       	movw	r24, r28
    18fe:	85 5b       	subi	r24, 0xB5	; 181
    1900:	9f 4f       	sbci	r25, 0xFF	; 255
    1902:	11 e0       	ldi	r17, 0x01	; 1
    1904:	fc 01       	movw	r30, r24
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e8       	ldi	r20, 0x80	; 128
    1914:	5f e3       	ldi	r21, 0x3F	; 63
    1916:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    191a:	88 23       	and	r24, r24
    191c:	0c f0       	brlt	.+2      	; 0x1920 <LCD_vInit+0x67a>
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	11 23       	and	r17, r17
    1922:	49 f0       	breq	.+18     	; 0x1936 <LCD_vInit+0x690>
		__ticks = 1;
    1924:	ce 01       	movw	r24, r28
    1926:	81 5b       	subi	r24, 0xB1	; 177
    1928:	9f 4f       	sbci	r25, 0xFF	; 255
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	fc 01       	movw	r30, r24
    1930:	31 83       	std	Z+1, r19	; 0x01
    1932:	20 83       	st	Z, r18
    1934:	74 c0       	rjmp	.+232    	; 0x1a1e <LCD_vInit+0x778>
	else if (__tmp > 65535)
    1936:	ce 01       	movw	r24, r28
    1938:	85 5b       	subi	r24, 0xB5	; 181
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	11 e0       	ldi	r17, 0x01	; 1
    193e:	fc 01       	movw	r30, r24
    1940:	60 81       	ld	r22, Z
    1942:	71 81       	ldd	r23, Z+1	; 0x01
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	3f ef       	ldi	r19, 0xFF	; 255
    194c:	4f e7       	ldi	r20, 0x7F	; 127
    194e:	57 e4       	ldi	r21, 0x47	; 71
    1950:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    1954:	18 16       	cp	r1, r24
    1956:	0c f0       	brlt	.+2      	; 0x195a <LCD_vInit+0x6b4>
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	11 23       	and	r17, r17
    195c:	09 f4       	brne	.+2      	; 0x1960 <LCD_vInit+0x6ba>
    195e:	4d c0       	rjmp	.+154    	; 0x19fa <LCD_vInit+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	ce 01       	movw	r24, r28
    1962:	89 5b       	subi	r24, 0xB9	; 185
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	fc 01       	movw	r30, r24
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8e 01       	movw	r16, r28
    1982:	01 5b       	subi	r16, 0xB1	; 177
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	f8 01       	movw	r30, r16
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	80 83       	st	Z, r24
    1998:	27 c0       	rjmp	.+78     	; 0x19e8 <LCD_vInit+0x742>
    199a:	ce 01       	movw	r24, r28
    199c:	8f 5a       	subi	r24, 0xAF	; 175
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	28 ec       	ldi	r18, 0xC8	; 200
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	fc 01       	movw	r30, r24
    19a6:	31 83       	std	Z+1, r19	; 0x01
    19a8:	20 83       	st	Z, r18
    19aa:	ce 01       	movw	r24, r28
    19ac:	8f 5a       	subi	r24, 0xAF	; 175
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	fc 01       	movw	r30, r24
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	8c 01       	movw	r16, r24
    19b8:	c8 01       	movw	r24, r16
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_vInit+0x714>
    19be:	8c 01       	movw	r16, r24
    19c0:	ce 01       	movw	r24, r28
    19c2:	8f 5a       	subi	r24, 0xAF	; 175
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	fc 01       	movw	r30, r24
    19c8:	11 83       	std	Z+1, r17	; 0x01
    19ca:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	ce 01       	movw	r24, r28
    19ce:	81 5b       	subi	r24, 0xB1	; 177
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	9e 01       	movw	r18, r28
    19d4:	21 5b       	subi	r18, 0xB1	; 177
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	f9 01       	movw	r30, r18
    19da:	20 81       	ld	r18, Z
    19dc:	31 81       	ldd	r19, Z+1	; 0x01
    19de:	21 50       	subi	r18, 0x01	; 1
    19e0:	30 40       	sbci	r19, 0x00	; 0
    19e2:	fc 01       	movw	r30, r24
    19e4:	31 83       	std	Z+1, r19	; 0x01
    19e6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	ce 01       	movw	r24, r28
    19ea:	81 5b       	subi	r24, 0xB1	; 177
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	fc 01       	movw	r30, r24
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	89 f6       	brne	.-94     	; 0x199a <LCD_vInit+0x6f4>
    19f8:	2f c0       	rjmp	.+94     	; 0x1a58 <LCD_vInit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	8e 01       	movw	r16, r28
    19fc:	01 5b       	subi	r16, 0xB1	; 177
    19fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1a00:	ce 01       	movw	r24, r28
    1a02:	85 5b       	subi	r24, 0xB5	; 181
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	fc 01       	movw	r30, r24
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	f8 01       	movw	r30, r16
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	80 83       	st	Z, r24
    1a1e:	ce 01       	movw	r24, r28
    1a20:	8d 5a       	subi	r24, 0xAD	; 173
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	9e 01       	movw	r18, r28
    1a26:	21 5b       	subi	r18, 0xB1	; 177
    1a28:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	20 81       	ld	r18, Z
    1a2e:	31 81       	ldd	r19, Z+1	; 0x01
    1a30:	fc 01       	movw	r30, r24
    1a32:	31 83       	std	Z+1, r19	; 0x01
    1a34:	20 83       	st	Z, r18
    1a36:	ce 01       	movw	r24, r28
    1a38:	8d 5a       	subi	r24, 0xAD	; 173
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	8c 01       	movw	r16, r24
    1a44:	c8 01       	movw	r24, r16
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_vInit+0x7a0>
    1a4a:	8c 01       	movw	r16, r24
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	8d 5a       	subi	r24, 0xAD	; 173
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	fc 01       	movw	r30, r24
    1a54:	11 83       	std	Z+1, r17	; 0x01
    1a56:	00 83       	st	Z, r16
	_delay_ms(1);
	#endif
}
    1a58:	cc 5a       	subi	r28, 0xAC	; 172
    1a5a:	df 4f       	sbci	r29, 0xFF	; 255
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	08 95       	ret

00001a70 <send_falling_edge>:


static void send_falling_edge(void)
{
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	6c 97       	sbiw	r28, 0x1c	; 28
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
	DIO_write('A',EN,1);
    1a88:	81 e4       	ldi	r24, 0x41	; 65
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	41 e0       	ldi	r20, 0x01	; 1
    1a8e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	b0 e4       	ldi	r27, 0x40	; 64
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	ab 83       	std	Y+3, r26	; 0x03
    1aa0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	69 81       	ldd	r22, Y+1	; 0x01
    1aa4:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a ef       	ldi	r20, 0xFA	; 250
    1ab0:	54 e4       	ldi	r21, 0x44	; 68
    1ab2:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	af 83       	std	Y+7, r26	; 0x07
    1ac0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ac2:	11 e0       	ldi	r17, 0x01	; 1
    1ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aca:	98 85       	ldd	r25, Y+8	; 0x08
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <send_falling_edge+0x6e>
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	11 23       	and	r17, r17
    1ae0:	29 f0       	breq	.+10     	; 0x1aec <send_falling_edge+0x7c>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9a 87       	std	Y+10, r25	; 0x0a
    1ae8:	89 87       	std	Y+9, r24	; 0x09
    1aea:	46 c0       	rjmp	.+140    	; 0x1b78 <send_falling_edge+0x108>
	else if (__tmp > 65535)
    1aec:	11 e0       	ldi	r17, 0x01	; 1
    1aee:	6d 81       	ldd	r22, Y+5	; 0x05
    1af0:	7e 81       	ldd	r23, Y+6	; 0x06
    1af2:	8f 81       	ldd	r24, Y+7	; 0x07
    1af4:	98 85       	ldd	r25, Y+8	; 0x08
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	0c f0       	brlt	.+2      	; 0x1b08 <send_falling_edge+0x98>
    1b06:	10 e0       	ldi	r17, 0x00	; 0
    1b08:	11 23       	and	r17, r17
    1b0a:	61 f1       	breq	.+88     	; 0x1b64 <send_falling_edge+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	69 81       	ldd	r22, Y+1	; 0x01
    1b0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9a 87       	std	Y+10, r25	; 0x0a
    1b32:	89 87       	std	Y+9, r24	; 0x09
    1b34:	12 c0       	rjmp	.+36     	; 0x1b5a <send_falling_edge+0xea>
    1b36:	88 ec       	ldi	r24, 0xC8	; 200
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9c 87       	std	Y+12, r25	; 0x0c
    1b3c:	8b 87       	std	Y+11, r24	; 0x0b
    1b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b40:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b42:	8c 01       	movw	r16, r24
    1b44:	c8 01       	movw	r24, r16
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <send_falling_edge+0xd6>
    1b4a:	8c 01       	movw	r16, r24
    1b4c:	1c 87       	std	Y+12, r17	; 0x0c
    1b4e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	9a 87       	std	Y+10, r25	; 0x0a
    1b58:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	51 f7       	brne	.-44     	; 0x1b36 <send_falling_edge+0xc6>
    1b62:	17 c0       	rjmp	.+46     	; 0x1b92 <send_falling_edge+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	6d 81       	ldd	r22, Y+5	; 0x05
    1b66:	7e 81       	ldd	r23, Y+6	; 0x06
    1b68:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6a:	98 85       	ldd	r25, Y+8	; 0x08
    1b6c:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9a 87       	std	Y+10, r25	; 0x0a
    1b76:	89 87       	std	Y+9, r24	; 0x09
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	9e 87       	std	Y+14, r25	; 0x0e
    1b7e:	8d 87       	std	Y+13, r24	; 0x0d
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b84:	8c 01       	movw	r16, r24
    1b86:	c8 01       	movw	r24, r16
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <send_falling_edge+0x118>
    1b8c:	8c 01       	movw	r16, r24
    1b8e:	1e 87       	std	Y+14, r17	; 0x0e
    1b90:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(2);
	DIO_write('A',EN,0);
    1b92:	81 e4       	ldi	r24, 0x41	; 65
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e4       	ldi	r27, 0x40	; 64
    1ba4:	8f 87       	std	Y+15, r24	; 0x0f
    1ba6:	98 8b       	std	Y+16, r25	; 0x10
    1ba8:	a9 8b       	std	Y+17, r26	; 0x11
    1baa:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bae:	78 89       	ldd	r23, Y+16	; 0x10
    1bb0:	89 89       	ldd	r24, Y+17	; 0x11
    1bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a ef       	ldi	r20, 0xFA	; 250
    1bba:	54 e4       	ldi	r21, 0x44	; 68
    1bbc:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8b 8b       	std	Y+19, r24	; 0x13
    1bc6:	9c 8b       	std	Y+20, r25	; 0x14
    1bc8:	ad 8b       	std	Y+21, r26	; 0x15
    1bca:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1bcc:	11 e0       	ldi	r17, 0x01	; 1
    1bce:	6b 89       	ldd	r22, Y+19	; 0x13
    1bd0:	7c 89       	ldd	r23, Y+20	; 0x14
    1bd2:	8d 89       	ldd	r24, Y+21	; 0x15
    1bd4:	9e 89       	ldd	r25, Y+22	; 0x16
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <send_falling_edge+0x178>
    1be6:	10 e0       	ldi	r17, 0x00	; 0
    1be8:	11 23       	and	r17, r17
    1bea:	29 f0       	breq	.+10     	; 0x1bf6 <send_falling_edge+0x186>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	98 8f       	std	Y+24, r25	; 0x18
    1bf2:	8f 8b       	std	Y+23, r24	; 0x17
    1bf4:	46 c0       	rjmp	.+140    	; 0x1c82 <send_falling_edge+0x212>
	else if (__tmp > 65535)
    1bf6:	11 e0       	ldi	r17, 0x01	; 1
    1bf8:	6b 89       	ldd	r22, Y+19	; 0x13
    1bfa:	7c 89       	ldd	r23, Y+20	; 0x14
    1bfc:	8d 89       	ldd	r24, Y+21	; 0x15
    1bfe:	9e 89       	ldd	r25, Y+22	; 0x16
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	0c f0       	brlt	.+2      	; 0x1c12 <send_falling_edge+0x1a2>
    1c10:	10 e0       	ldi	r17, 0x00	; 0
    1c12:	11 23       	and	r17, r17
    1c14:	61 f1       	breq	.+88     	; 0x1c6e <send_falling_edge+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c18:	78 89       	ldd	r23, Y+16	; 0x10
    1c1a:	89 89       	ldd	r24, Y+17	; 0x11
    1c1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	98 8f       	std	Y+24, r25	; 0x18
    1c3c:	8f 8b       	std	Y+23, r24	; 0x17
    1c3e:	12 c0       	rjmp	.+36     	; 0x1c64 <send_falling_edge+0x1f4>
    1c40:	88 ec       	ldi	r24, 0xC8	; 200
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9a 8f       	std	Y+26, r25	; 0x1a
    1c46:	89 8f       	std	Y+25, r24	; 0x19
    1c48:	89 8d       	ldd	r24, Y+25	; 0x19
    1c4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c4c:	8c 01       	movw	r16, r24
    1c4e:	c8 01       	movw	r24, r16
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <send_falling_edge+0x1e0>
    1c54:	8c 01       	movw	r16, r24
    1c56:	1a 8f       	std	Y+26, r17	; 0x1a
    1c58:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	98 8f       	std	Y+24, r25	; 0x18
    1c62:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	51 f7       	brne	.-44     	; 0x1c40 <send_falling_edge+0x1d0>
    1c6c:	17 c0       	rjmp	.+46     	; 0x1c9c <send_falling_edge+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6e:	6b 89       	ldd	r22, Y+19	; 0x13
    1c70:	7c 89       	ldd	r23, Y+20	; 0x14
    1c72:	8d 89       	ldd	r24, Y+21	; 0x15
    1c74:	9e 89       	ldd	r25, Y+22	; 0x16
    1c76:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	98 8f       	std	Y+24, r25	; 0x18
    1c80:	8f 8b       	std	Y+23, r24	; 0x17
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	98 8d       	ldd	r25, Y+24	; 0x18
    1c86:	9c 8f       	std	Y+28, r25	; 0x1c
    1c88:	8b 8f       	std	Y+27, r24	; 0x1b
    1c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8e:	8c 01       	movw	r16, r24
    1c90:	c8 01       	movw	r24, r16
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <send_falling_edge+0x222>
    1c96:	8c 01       	movw	r16, r24
    1c98:	1c 8f       	std	Y+28, r17	; 0x1c
    1c9a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(2);
}
    1c9c:	6c 96       	adiw	r28, 0x1c	; 28
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	08 95       	ret

00001cb2 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	2f 97       	sbiw	r28, 0x0f	; 15
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
    1ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cce:	98 2f       	mov	r25, r24
    1cd0:	92 95       	swap	r25
    1cd2:	9f 70       	andi	r25, 0x0F	; 15
    1cd4:	81 e4       	ldi	r24, 0x41	; 65
    1cd6:	69 2f       	mov	r22, r25
    1cd8:	0e 94 53 07 	call	0xea6	; 0xea6 <write_high_nibble>
	DIO_write('A',RS,0);
    1cdc:	81 e4       	ldi	r24, 0x41	; 65
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	send_falling_edge();
    1ce6:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <send_falling_edge>
	write_high_nibble('A',cmd);
    1cea:	81 e4       	ldi	r24, 0x41	; 65
    1cec:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cee:	0e 94 53 07 	call	0xea6	; 0xea6 <write_high_nibble>
	DIO_write('A',RS,0);
    1cf2:	81 e4       	ldi	r24, 0x41	; 65
    1cf4:	62 e0       	ldi	r22, 0x02	; 2
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	send_falling_edge();
    1cfc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <send_falling_edge>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a0 e8       	ldi	r26, 0x80	; 128
    1d06:	bf e3       	ldi	r27, 0x3F	; 63
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	ab 83       	std	Y+3, r26	; 0x03
    1d0e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d10:	69 81       	ldd	r22, Y+1	; 0x01
    1d12:	7a 81       	ldd	r23, Y+2	; 0x02
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a ef       	ldi	r20, 0xFA	; 250
    1d1e:	54 e4       	ldi	r21, 0x44	; 68
    1d20:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	af 83       	std	Y+7, r26	; 0x07
    1d2e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d30:	11 e0       	ldi	r17, 0x01	; 1
    1d32:	6d 81       	ldd	r22, Y+5	; 0x05
    1d34:	7e 81       	ldd	r23, Y+6	; 0x06
    1d36:	8f 81       	ldd	r24, Y+7	; 0x07
    1d38:	98 85       	ldd	r25, Y+8	; 0x08
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f e3       	ldi	r21, 0x3F	; 63
    1d42:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	0c f0       	brlt	.+2      	; 0x1d4c <LCD_vSend_cmd+0x9a>
    1d4a:	10 e0       	ldi	r17, 0x00	; 0
    1d4c:	11 23       	and	r17, r17
    1d4e:	29 f0       	breq	.+10     	; 0x1d5a <LCD_vSend_cmd+0xa8>
		__ticks = 1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9a 87       	std	Y+10, r25	; 0x0a
    1d56:	89 87       	std	Y+9, r24	; 0x09
    1d58:	46 c0       	rjmp	.+140    	; 0x1de6 <LCD_vSend_cmd+0x134>
	else if (__tmp > 65535)
    1d5a:	11 e0       	ldi	r17, 0x01	; 1
    1d5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1d5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1d60:	8f 81       	ldd	r24, Y+7	; 0x07
    1d62:	98 85       	ldd	r25, Y+8	; 0x08
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	3f ef       	ldi	r19, 0xFF	; 255
    1d68:	4f e7       	ldi	r20, 0x7F	; 127
    1d6a:	57 e4       	ldi	r21, 0x47	; 71
    1d6c:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    1d70:	18 16       	cp	r1, r24
    1d72:	0c f0       	brlt	.+2      	; 0x1d76 <LCD_vSend_cmd+0xc4>
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	11 23       	and	r17, r17
    1d78:	61 f1       	breq	.+88     	; 0x1dd2 <LCD_vSend_cmd+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	69 81       	ldd	r22, Y+1	; 0x01
    1d7c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9a 87       	std	Y+10, r25	; 0x0a
    1da0:	89 87       	std	Y+9, r24	; 0x09
    1da2:	12 c0       	rjmp	.+36     	; 0x1dc8 <LCD_vSend_cmd+0x116>
    1da4:	88 ec       	ldi	r24, 0xC8	; 200
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9c 87       	std	Y+12, r25	; 0x0c
    1daa:	8b 87       	std	Y+11, r24	; 0x0b
    1dac:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dae:	9c 85       	ldd	r25, Y+12	; 0x0c
    1db0:	8c 01       	movw	r16, r24
    1db2:	c8 01       	movw	r24, r16
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_vSend_cmd+0x102>
    1db8:	8c 01       	movw	r16, r24
    1dba:	1c 87       	std	Y+12, r17	; 0x0c
    1dbc:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9a 87       	std	Y+10, r25	; 0x0a
    1dc6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	89 85       	ldd	r24, Y+9	; 0x09
    1dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	51 f7       	brne	.-44     	; 0x1da4 <LCD_vSend_cmd+0xf2>
    1dd0:	17 c0       	rjmp	.+46     	; 0x1e00 <LCD_vSend_cmd+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1dd4:	7e 81       	ldd	r23, Y+6	; 0x06
    1dd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd8:	98 85       	ldd	r25, Y+8	; 0x08
    1dda:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9a 87       	std	Y+10, r25	; 0x0a
    1de4:	89 87       	std	Y+9, r24	; 0x09
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	9e 87       	std	Y+14, r25	; 0x0e
    1dec:	8d 87       	std	Y+13, r24	; 0x0d
    1dee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df2:	8c 01       	movw	r16, r24
    1df4:	c8 01       	movw	r24, r16
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_vSend_cmd+0x144>
    1dfa:	8c 01       	movw	r16, r24
    1dfc:	1e 87       	std	Y+14, r17	; 0x0e
    1dfe:	0d 87       	std	Y+13, r16	; 0x0d
	#endif
	_delay_ms(1);
}
    1e00:	2f 96       	adiw	r28, 0x0f	; 15
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	2f 97       	sbiw	r28, 0x0f	; 15
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
    1e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e32:	98 2f       	mov	r25, r24
    1e34:	92 95       	swap	r25
    1e36:	9f 70       	andi	r25, 0x0F	; 15
    1e38:	81 e4       	ldi	r24, 0x41	; 65
    1e3a:	69 2f       	mov	r22, r25
    1e3c:	0e 94 53 07 	call	0xea6	; 0xea6 <write_high_nibble>
	DIO_write('A',RS,1);
    1e40:	81 e4       	ldi	r24, 0x41	; 65
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	send_falling_edge();
    1e4a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <send_falling_edge>
	write_high_nibble('A',data);
    1e4e:	81 e4       	ldi	r24, 0x41	; 65
    1e50:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e52:	0e 94 53 07 	call	0xea6	; 0xea6 <write_high_nibble>
	DIO_write('A',RS,1);
    1e56:	81 e4       	ldi	r24, 0x41	; 65
    1e58:	62 e0       	ldi	r22, 0x02	; 2
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_write>
	send_falling_edge();
    1e60:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <send_falling_edge>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e8       	ldi	r26, 0x80	; 128
    1e6a:	bf e3       	ldi	r27, 0x3F	; 63
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	ab 83       	std	Y+3, r26	; 0x03
    1e72:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	69 81       	ldd	r22, Y+1	; 0x01
    1e76:	7a 81       	ldd	r23, Y+2	; 0x02
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a ef       	ldi	r20, 0xFA	; 250
    1e82:	54 e4       	ldi	r21, 0x44	; 68
    1e84:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	af 83       	std	Y+7, r26	; 0x07
    1e92:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e94:	11 e0       	ldi	r17, 0x01	; 1
    1e96:	6d 81       	ldd	r22, Y+5	; 0x05
    1e98:	7e 81       	ldd	r23, Y+6	; 0x06
    1e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9c:	98 85       	ldd	r25, Y+8	; 0x08
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	0c f0       	brlt	.+2      	; 0x1eb0 <LCD_vSend_char+0x9a>
    1eae:	10 e0       	ldi	r17, 0x00	; 0
    1eb0:	11 23       	and	r17, r17
    1eb2:	29 f0       	breq	.+10     	; 0x1ebe <LCD_vSend_char+0xa8>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9a 87       	std	Y+10, r25	; 0x0a
    1eba:	89 87       	std	Y+9, r24	; 0x09
    1ebc:	46 c0       	rjmp	.+140    	; 0x1f4a <LCD_vSend_char+0x134>
	else if (__tmp > 65535)
    1ebe:	11 e0       	ldi	r17, 0x01	; 1
    1ec0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec6:	98 85       	ldd	r25, Y+8	; 0x08
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	0c f0       	brlt	.+2      	; 0x1eda <LCD_vSend_char+0xc4>
    1ed8:	10 e0       	ldi	r17, 0x00	; 0
    1eda:	11 23       	and	r17, r17
    1edc:	61 f1       	breq	.+88     	; 0x1f36 <LCD_vSend_char+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	69 81       	ldd	r22, Y+1	; 0x01
    1ee0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9a 87       	std	Y+10, r25	; 0x0a
    1f04:	89 87       	std	Y+9, r24	; 0x09
    1f06:	12 c0       	rjmp	.+36     	; 0x1f2c <LCD_vSend_char+0x116>
    1f08:	88 ec       	ldi	r24, 0xC8	; 200
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9c 87       	std	Y+12, r25	; 0x0c
    1f0e:	8b 87       	std	Y+11, r24	; 0x0b
    1f10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f12:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f14:	8c 01       	movw	r16, r24
    1f16:	c8 01       	movw	r24, r16
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_vSend_char+0x102>
    1f1c:	8c 01       	movw	r16, r24
    1f1e:	1c 87       	std	Y+12, r17	; 0x0c
    1f20:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9a 87       	std	Y+10, r25	; 0x0a
    1f2a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	89 85       	ldd	r24, Y+9	; 0x09
    1f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	51 f7       	brne	.-44     	; 0x1f08 <LCD_vSend_char+0xf2>
    1f34:	17 c0       	rjmp	.+46     	; 0x1f64 <LCD_vSend_char+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6d 81       	ldd	r22, Y+5	; 0x05
    1f38:	7e 81       	ldd	r23, Y+6	; 0x06
    1f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3c:	98 85       	ldd	r25, Y+8	; 0x08
    1f3e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9a 87       	std	Y+10, r25	; 0x0a
    1f48:	89 87       	std	Y+9, r24	; 0x09
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	9e 87       	std	Y+14, r25	; 0x0e
    1f50:	8d 87       	std	Y+13, r24	; 0x0d
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	8c 01       	movw	r16, r24
    1f58:	c8 01       	movw	r24, r16
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_vSend_char+0x144>
    1f5e:	8c 01       	movw	r16, r24
    1f60:	1e 87       	std	Y+14, r17	; 0x0e
    1f62:	0d 87       	std	Y+13, r16	; 0x0d
	#endif
	_delay_ms(1);
}
    1f64:	2f 96       	adiw	r28, 0x0f	; 15
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	08 95       	ret

00001f7a <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <LCD_vSend_string+0x6>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
	while((*data)!='\0')
    1f88:	0b c0       	rjmp	.+22     	; 0x1fa0 <LCD_vSend_string+0x26>
	{
		LCD_vSend_char(*data);
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8e:	fc 01       	movw	r30, r24
    1f90:	80 81       	ld	r24, Z
    1f92:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_vSend_char>
		data++;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	01 96       	adiw	r24, 0x01	; 1
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 23       	and	r24, r24
    1faa:	79 f7       	brne	.-34     	; 0x1f8a <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	08 95       	ret

00001fb6 <LCD_clearscreen>:
void LCD_clearscreen()
{
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	2e 97       	sbiw	r28, 0x0e	; 14
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_vSend_cmd>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e2       	ldi	r26, 0x20	; 32
    1fda:	b1 e4       	ldi	r27, 0x41	; 65
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	ab 83       	std	Y+3, r26	; 0x03
    1fe2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	69 81       	ldd	r22, Y+1	; 0x01
    1fe6:	7a 81       	ldd	r23, Y+2	; 0x02
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a ef       	ldi	r20, 0xFA	; 250
    1ff2:	54 e4       	ldi	r21, 0x44	; 68
    1ff4:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	af 83       	std	Y+7, r26	; 0x07
    2002:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2004:	11 e0       	ldi	r17, 0x01	; 1
    2006:	6d 81       	ldd	r22, Y+5	; 0x05
    2008:	7e 81       	ldd	r23, Y+6	; 0x06
    200a:	8f 81       	ldd	r24, Y+7	; 0x07
    200c:	98 85       	ldd	r25, Y+8	; 0x08
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    201a:	88 23       	and	r24, r24
    201c:	0c f0       	brlt	.+2      	; 0x2020 <LCD_clearscreen+0x6a>
    201e:	10 e0       	ldi	r17, 0x00	; 0
    2020:	11 23       	and	r17, r17
    2022:	29 f0       	breq	.+10     	; 0x202e <LCD_clearscreen+0x78>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9a 87       	std	Y+10, r25	; 0x0a
    202a:	89 87       	std	Y+9, r24	; 0x09
    202c:	46 c0       	rjmp	.+140    	; 0x20ba <LCD_clearscreen+0x104>
	else if (__tmp > 65535)
    202e:	11 e0       	ldi	r17, 0x01	; 1
    2030:	6d 81       	ldd	r22, Y+5	; 0x05
    2032:	7e 81       	ldd	r23, Y+6	; 0x06
    2034:	8f 81       	ldd	r24, Y+7	; 0x07
    2036:	98 85       	ldd	r25, Y+8	; 0x08
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    2044:	18 16       	cp	r1, r24
    2046:	0c f0       	brlt	.+2      	; 0x204a <LCD_clearscreen+0x94>
    2048:	10 e0       	ldi	r17, 0x00	; 0
    204a:	11 23       	and	r17, r17
    204c:	61 f1       	breq	.+88     	; 0x20a6 <LCD_clearscreen+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	69 81       	ldd	r22, Y+1	; 0x01
    2050:	7a 81       	ldd	r23, Y+2	; 0x02
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9a 87       	std	Y+10, r25	; 0x0a
    2074:	89 87       	std	Y+9, r24	; 0x09
    2076:	12 c0       	rjmp	.+36     	; 0x209c <LCD_clearscreen+0xe6>
    2078:	88 ec       	ldi	r24, 0xC8	; 200
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9c 87       	std	Y+12, r25	; 0x0c
    207e:	8b 87       	std	Y+11, r24	; 0x0b
    2080:	8b 85       	ldd	r24, Y+11	; 0x0b
    2082:	9c 85       	ldd	r25, Y+12	; 0x0c
    2084:	8c 01       	movw	r16, r24
    2086:	c8 01       	movw	r24, r16
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_clearscreen+0xd2>
    208c:	8c 01       	movw	r16, r24
    208e:	1c 87       	std	Y+12, r17	; 0x0c
    2090:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9a 87       	std	Y+10, r25	; 0x0a
    209a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	51 f7       	brne	.-44     	; 0x2078 <LCD_clearscreen+0xc2>
    20a4:	17 c0       	rjmp	.+46     	; 0x20d4 <LCD_clearscreen+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6d 81       	ldd	r22, Y+5	; 0x05
    20a8:	7e 81       	ldd	r23, Y+6	; 0x06
    20aa:	8f 81       	ldd	r24, Y+7	; 0x07
    20ac:	98 85       	ldd	r25, Y+8	; 0x08
    20ae:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9a 87       	std	Y+10, r25	; 0x0a
    20b8:	89 87       	std	Y+9, r24	; 0x09
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20be:	9e 87       	std	Y+14, r25	; 0x0e
    20c0:	8d 87       	std	Y+13, r24	; 0x0d
    20c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c6:	8c 01       	movw	r16, r24
    20c8:	c8 01       	movw	r24, r16
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_clearscreen+0x114>
    20ce:	8c 01       	movw	r16, r24
    20d0:	1e 87       	std	Y+14, r17	; 0x0e
    20d2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
}
    20d4:	2e 96       	adiw	r28, 0x0e	; 14
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	08 95       	ret

000020ea <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	61 97       	sbiw	r28, 0x11	; 17
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	88 8b       	std	Y+16, r24	; 0x10
    2104:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    2106:	88 89       	ldd	r24, Y+16	; 0x10
    2108:	83 30       	cpi	r24, 0x03	; 3
    210a:	48 f4       	brcc	.+18     	; 0x211e <LCD_movecursor+0x34>
    210c:	88 89       	ldd	r24, Y+16	; 0x10
    210e:	88 23       	and	r24, r24
    2110:	31 f0       	breq	.+12     	; 0x211e <LCD_movecursor+0x34>
    2112:	89 89       	ldd	r24, Y+17	; 0x11
    2114:	81 31       	cpi	r24, 0x11	; 17
    2116:	18 f4       	brcc	.+6      	; 0x211e <LCD_movecursor+0x34>
    2118:	89 89       	ldd	r24, Y+17	; 0x11
    211a:	88 23       	and	r24, r24
    211c:	19 f4       	brne	.+6      	; 0x2124 <LCD_movecursor+0x3a>
	{
		data=0x80;
    211e:	80 e8       	ldi	r24, 0x80	; 128
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	0d c0       	rjmp	.+26     	; 0x213e <LCD_movecursor+0x54>
	}
	else if(row==1)
    2124:	88 89       	ldd	r24, Y+16	; 0x10
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	21 f4       	brne	.+8      	; 0x2132 <LCD_movecursor+0x48>
	{
		data=0x80+coloumn-1 ;
    212a:	89 89       	ldd	r24, Y+17	; 0x11
    212c:	81 58       	subi	r24, 0x81	; 129
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	06 c0       	rjmp	.+12     	; 0x213e <LCD_movecursor+0x54>
	}
	else if (row==2)
    2132:	88 89       	ldd	r24, Y+16	; 0x10
    2134:	82 30       	cpi	r24, 0x02	; 2
    2136:	19 f4       	brne	.+6      	; 0x213e <LCD_movecursor+0x54>
	{
		data=0xc0+coloumn-1;
    2138:	89 89       	ldd	r24, Y+17	; 0x11
    213a:	81 54       	subi	r24, 0x41	; 65
    213c:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_vSend_cmd(data);
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_vSend_cmd>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a0 e8       	ldi	r26, 0x80	; 128
    214a:	bf e3       	ldi	r27, 0x3F	; 63
    214c:	8a 83       	std	Y+2, r24	; 0x02
    214e:	9b 83       	std	Y+3, r25	; 0x03
    2150:	ac 83       	std	Y+4, r26	; 0x04
    2152:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6a 81       	ldd	r22, Y+2	; 0x02
    2156:	7b 81       	ldd	r23, Y+3	; 0x03
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8e 83       	std	Y+6, r24	; 0x06
    216e:	9f 83       	std	Y+7, r25	; 0x07
    2170:	a8 87       	std	Y+8, r26	; 0x08
    2172:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    2174:	11 e0       	ldi	r17, 0x01	; 1
    2176:	6e 81       	ldd	r22, Y+6	; 0x06
    2178:	7f 81       	ldd	r23, Y+7	; 0x07
    217a:	88 85       	ldd	r24, Y+8	; 0x08
    217c:	99 85       	ldd	r25, Y+9	; 0x09
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e8       	ldi	r20, 0x80	; 128
    2184:	5f e3       	ldi	r21, 0x3F	; 63
    2186:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    218a:	88 23       	and	r24, r24
    218c:	0c f0       	brlt	.+2      	; 0x2190 <LCD_movecursor+0xa6>
    218e:	10 e0       	ldi	r17, 0x00	; 0
    2190:	11 23       	and	r17, r17
    2192:	29 f0       	breq	.+10     	; 0x219e <LCD_movecursor+0xb4>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9b 87       	std	Y+11, r25	; 0x0b
    219a:	8a 87       	std	Y+10, r24	; 0x0a
    219c:	46 c0       	rjmp	.+140    	; 0x222a <LCD_movecursor+0x140>
	else if (__tmp > 65535)
    219e:	11 e0       	ldi	r17, 0x01	; 1
    21a0:	6e 81       	ldd	r22, Y+6	; 0x06
    21a2:	7f 81       	ldd	r23, Y+7	; 0x07
    21a4:	88 85       	ldd	r24, Y+8	; 0x08
    21a6:	99 85       	ldd	r25, Y+9	; 0x09
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	3f ef       	ldi	r19, 0xFF	; 255
    21ac:	4f e7       	ldi	r20, 0x7F	; 127
    21ae:	57 e4       	ldi	r21, 0x47	; 71
    21b0:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    21b4:	18 16       	cp	r1, r24
    21b6:	0c f0       	brlt	.+2      	; 0x21ba <LCD_movecursor+0xd0>
    21b8:	10 e0       	ldi	r17, 0x00	; 0
    21ba:	11 23       	and	r17, r17
    21bc:	61 f1       	breq	.+88     	; 0x2216 <LCD_movecursor+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21be:	6a 81       	ldd	r22, Y+2	; 0x02
    21c0:	7b 81       	ldd	r23, Y+3	; 0x03
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9b 87       	std	Y+11, r25	; 0x0b
    21e4:	8a 87       	std	Y+10, r24	; 0x0a
    21e6:	12 c0       	rjmp	.+36     	; 0x220c <LCD_movecursor+0x122>
    21e8:	88 ec       	ldi	r24, 0xC8	; 200
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9d 87       	std	Y+13, r25	; 0x0d
    21ee:	8c 87       	std	Y+12, r24	; 0x0c
    21f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    21f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    21f4:	8c 01       	movw	r16, r24
    21f6:	c8 01       	movw	r24, r16
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_movecursor+0x10e>
    21fc:	8c 01       	movw	r16, r24
    21fe:	1d 87       	std	Y+13, r17	; 0x0d
    2200:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8a 85       	ldd	r24, Y+10	; 0x0a
    2204:	9b 85       	ldd	r25, Y+11	; 0x0b
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9b 87       	std	Y+11, r25	; 0x0b
    220a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8a 85       	ldd	r24, Y+10	; 0x0a
    220e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	51 f7       	brne	.-44     	; 0x21e8 <LCD_movecursor+0xfe>
    2214:	17 c0       	rjmp	.+46     	; 0x2244 <LCD_movecursor+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6e 81       	ldd	r22, Y+6	; 0x06
    2218:	7f 81       	ldd	r23, Y+7	; 0x07
    221a:	88 85       	ldd	r24, Y+8	; 0x08
    221c:	99 85       	ldd	r25, Y+9	; 0x09
    221e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9b 87       	std	Y+11, r25	; 0x0b
    2228:	8a 87       	std	Y+10, r24	; 0x0a
    222a:	8a 85       	ldd	r24, Y+10	; 0x0a
    222c:	9b 85       	ldd	r25, Y+11	; 0x0b
    222e:	9f 87       	std	Y+15, r25	; 0x0f
    2230:	8e 87       	std	Y+14, r24	; 0x0e
    2232:	8e 85       	ldd	r24, Y+14	; 0x0e
    2234:	9f 85       	ldd	r25, Y+15	; 0x0f
    2236:	8c 01       	movw	r16, r24
    2238:	c8 01       	movw	r24, r16
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_movecursor+0x150>
    223e:	8c 01       	movw	r16, r24
    2240:	1f 87       	std	Y+15, r17	; 0x0f
    2242:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(1);
}
    2244:	61 96       	adiw	r28, 0x11	; 17
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	08 95       	ret

0000225a <main>:
button5 = NOTPRESSED,button6=NOTPRESSED, button7 = NOTPRESSED ,button8 = NOTPRESSED;

unsigned char _i2c_address;

int main()
{
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
	  
      
	    I2C_Master_init(400000); 
    2262:	60 e8       	ldi	r22, 0x80	; 128
    2264:	7a e1       	ldi	r23, 0x1A	; 26
    2266:	86 e0       	ldi	r24, 0x06	; 6
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 c3 07 	call	0xf86	; 0xf86 <I2C_Master_init>
	    timer2_overflow_init_interrupt();
    226e:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <timer2_overflow_init_interrupt>
	    _i2c_address = 0X78; // this works  or 0X3D does not
    2272:	88 e7       	ldi	r24, 0x78	; 120
    2274:	80 93 b5 00 	sts	0x00B5, r24
        ADC_init();
    2278:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_init>
		button_init('B',0);
    227c:	82 e4       	ldi	r24, 0x42	; 66
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		button_init('B',1);
    2288:	82 e4       	ldi	r24, 0x42	; 66
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		button_init('B',2);
    2294:	82 e4       	ldi	r24, 0x42	; 66
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	62 e0       	ldi	r22, 0x02	; 2
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		button_init('B',3);
    22a0:	82 e4       	ldi	r24, 0x42	; 66
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	63 e0       	ldi	r22, 0x03	; 3
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		
		button_init('B',6);
    22ac:	82 e4       	ldi	r24, 0x42	; 66
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	66 e0       	ldi	r22, 0x06	; 6
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		
		DIO_vconnectpullup('B',0,1);
    22b8:	82 e4       	ldi	r24, 0x42	; 66
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',1,1);
    22c8:	82 e4       	ldi	r24, 0x42	; 66
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',2,1);
    22d8:	82 e4       	ldi	r24, 0x42	; 66
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	62 e0       	ldi	r22, 0x02	; 2
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',3,1);
    22e8:	82 e4       	ldi	r24, 0x42	; 66
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	63 e0       	ldi	r22, 0x03	; 3
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		
		DIO_vconnectpullup('B',6,1);
    22f8:	82 e4       	ldi	r24, 0x42	; 66
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	66 e0       	ldi	r22, 0x06	; 6
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		
		InitializeDisplay();
    2308:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <InitializeDisplay>
		//reset_display();
		//_delay_ms(10);
		
		
		tempchange:
		clear_display();
    230c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear_display>
		sendStrXY("TEMP:",X_OF_TEMP,Y_OF_TEMP);
    2310:	80 e7       	ldi	r24, 0x70	; 112
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	43 e0       	ldi	r20, 0x03	; 3
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <sendStrXY>
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <main+0xca>
					day_counter = (first_digit * 10) + second_digit;
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
			//		_delay_ms(250);
					goto tempchange;
				}
				}			 					
    2322:	00 00       	nop
		clear_display();
		sendStrXY("TEMP:",X_OF_TEMP,Y_OF_TEMP);
		while (1){
			do
			 {  
				 temp = .25 * ADC_read();
    2324:	0e 94 02 02 	call	0x404	; 0x404 <ADC_read>
    2328:	aa 27       	eor	r26, r26
    232a:	97 fd       	sbrc	r25, 7
    232c:	a0 95       	com	r26
    232e:	ba 2f       	mov	r27, r26
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 a7 20 	call	0x414e	; 0x414e <__floatsisf>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5e e3       	ldi	r21, 0x3E	; 62
    2348:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	90 93 b7 00 	sts	0x00B7, r25
    2360:	80 93 b6 00 	sts	0x00B6, r24
				 
				 if(temp < 10)
    2364:	80 91 b6 00 	lds	r24, 0x00B6
    2368:	90 91 b7 00 	lds	r25, 0x00B7
    236c:	8a 30       	cpi	r24, 0x0A	; 10
    236e:	91 05       	cpc	r25, r1
    2370:	b8 f4       	brcc	.+46     	; 0x23a0 <main+0x146>
				 {
					 sendCharXY(temp+48,X_OF_TEMP,Y_OF_TEMP+5);
    2372:	80 91 b6 00 	lds	r24, 0x00B6
    2376:	90 91 b7 00 	lds	r25, 0x00B7
    237a:	80 5d       	subi	r24, 0xD0	; 208
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	48 e0       	ldi	r20, 0x08	; 8
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 sendCharXY('C',X_OF_TEMP,Y_OF_TEMP+6);
    2388:	83 e4       	ldi	r24, 0x43	; 67
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	49 e0       	ldi	r20, 0x09	; 9
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 sendStr("   ");
    2396:	86 e7       	ldi	r24, 0x76	; 118
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <sendStr>
    239e:	8d c0       	rjmp	.+282    	; 0x24ba <main+0x260>
				 }
				 else if(temp < 100 && temp >= 10)
    23a0:	80 91 b6 00 	lds	r24, 0x00B6
    23a4:	90 91 b7 00 	lds	r25, 0x00B7
    23a8:	84 36       	cpi	r24, 0x64	; 100
    23aa:	91 05       	cpc	r25, r1
    23ac:	a8 f5       	brcc	.+106    	; 0x2418 <main+0x1be>
    23ae:	80 91 b6 00 	lds	r24, 0x00B6
    23b2:	90 91 b7 00 	lds	r25, 0x00B7
    23b6:	8a 30       	cpi	r24, 0x0A	; 10
    23b8:	91 05       	cpc	r25, r1
    23ba:	70 f1       	brcs	.+92     	; 0x2418 <main+0x1be>
				 {
					 sendCharXY((temp/10)+48,X_OF_TEMP,Y_OF_TEMP + 5);
    23bc:	80 91 b6 00 	lds	r24, 0x00B6
    23c0:	90 91 b7 00 	lds	r25, 0x00B7
    23c4:	2a e0       	ldi	r18, 0x0A	; 10
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	b9 01       	movw	r22, r18
    23ca:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    23ce:	9b 01       	movw	r18, r22
    23d0:	c9 01       	movw	r24, r18
    23d2:	80 5d       	subi	r24, 0xD0	; 208
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	48 e0       	ldi	r20, 0x08	; 8
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 sendCharXY((temp%10)+48,X_OF_TEMP,Y_OF_TEMP + 6);
    23e0:	80 91 b6 00 	lds	r24, 0x00B6
    23e4:	90 91 b7 00 	lds	r25, 0x00B7
    23e8:	2a e0       	ldi	r18, 0x0A	; 10
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	b9 01       	movw	r22, r18
    23ee:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    23f2:	80 5d       	subi	r24, 0xD0	; 208
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	49 e0       	ldi	r20, 0x09	; 9
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 sendCharXY('C',X_OF_TEMP,Y_OF_TEMP + 7);
    2400:	83 e4       	ldi	r24, 0x43	; 67
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	70 e0       	ldi	r23, 0x00	; 0
    2406:	4a e0       	ldi	r20, 0x0A	; 10
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 sendStr(" ");
    240e:	8a e7       	ldi	r24, 0x7A	; 122
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <sendStr>
    2416:	51 c0       	rjmp	.+162    	; 0x24ba <main+0x260>
				 }
				 else if(temp<1000 && temp >= 100)
    2418:	80 91 b6 00 	lds	r24, 0x00B6
    241c:	90 91 b7 00 	lds	r25, 0x00B7
    2420:	23 e0       	ldi	r18, 0x03	; 3
    2422:	88 3e       	cpi	r24, 0xE8	; 232
    2424:	92 07       	cpc	r25, r18
    2426:	08 f0       	brcs	.+2      	; 0x242a <main+0x1d0>
    2428:	48 c0       	rjmp	.+144    	; 0x24ba <main+0x260>
    242a:	80 91 b6 00 	lds	r24, 0x00B6
    242e:	90 91 b7 00 	lds	r25, 0x00B7
    2432:	84 36       	cpi	r24, 0x64	; 100
    2434:	91 05       	cpc	r25, r1
    2436:	08 f4       	brcc	.+2      	; 0x243a <main+0x1e0>
    2438:	40 c0       	rjmp	.+128    	; 0x24ba <main+0x260>
				 {
					 
					 sendCharXY((temp/100)+48,X_OF_TEMP,Y_OF_TEMP + 5);
    243a:	80 91 b6 00 	lds	r24, 0x00B6
    243e:	90 91 b7 00 	lds	r25, 0x00B7
    2442:	24 e6       	ldi	r18, 0x64	; 100
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	b9 01       	movw	r22, r18
    2448:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    244c:	9b 01       	movw	r18, r22
    244e:	c9 01       	movw	r24, r18
    2450:	80 5d       	subi	r24, 0xD0	; 208
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	48 e0       	ldi	r20, 0x08	; 8
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 sendCharXY((temp / 10 % 10) + 48,X_OF_TEMP,Y_OF_TEMP + 6);
    245e:	80 91 b6 00 	lds	r24, 0x00B6
    2462:	90 91 b7 00 	lds	r25, 0x00B7
    2466:	2a e0       	ldi	r18, 0x0A	; 10
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	b9 01       	movw	r22, r18
    246c:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    2470:	9b 01       	movw	r18, r22
    2472:	c9 01       	movw	r24, r18
    2474:	2a e0       	ldi	r18, 0x0A	; 10
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	b9 01       	movw	r22, r18
    247a:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    247e:	80 5d       	subi	r24, 0xD0	; 208
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	49 e0       	ldi	r20, 0x09	; 9
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 sendCharXY((temp % 10) + 48,X_OF_TEMP,Y_OF_TEMP + 7);
    248c:	80 91 b6 00 	lds	r24, 0x00B6
    2490:	90 91 b7 00 	lds	r25, 0x00B7
    2494:	2a e0       	ldi	r18, 0x0A	; 10
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	b9 01       	movw	r22, r18
    249a:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    249e:	80 5d       	subi	r24, 0xD0	; 208
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	4a e0       	ldi	r20, 0x0A	; 10
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 sendCharXY('C',X_OF_TEMP,Y_OF_TEMP + 8);
    24ac:	83 e4       	ldi	r24, 0x43	; 67
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	4b e0       	ldi	r20, 0x0B	; 11
    24b4:	50 e0       	ldi	r21, 0x00	; 0
    24b6:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 }
				 else
				 {
					 
				 }
				 if(60 <= seconds_counter)
    24ba:	80 91 b8 00 	lds	r24, 0x00B8
    24be:	8c 33       	cpi	r24, 0x3C	; 60
    24c0:	38 f0       	brcs	.+14     	; 0x24d0 <main+0x276>
				 {
					 minutes_counter++;
    24c2:	80 91 b9 00 	lds	r24, 0x00B9
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	80 93 b9 00 	sts	0x00B9, r24
					 seconds_counter = 0;
    24cc:	10 92 b8 00 	sts	0x00B8, r1
				 } 
				 if(60 <= minutes_counter)
    24d0:	80 91 b9 00 	lds	r24, 0x00B9
    24d4:	8c 33       	cpi	r24, 0x3C	; 60
    24d6:	38 f0       	brcs	.+14     	; 0x24e6 <main+0x28c>
				 {
					 hours_counter++;
    24d8:	80 91 ba 00 	lds	r24, 0x00BA
    24dc:	8f 5f       	subi	r24, 0xFF	; 255
    24de:	80 93 ba 00 	sts	0x00BA, r24
					 minutes_counter = 0;
    24e2:	10 92 b9 00 	sts	0x00B9, r1
				 }
				 if(24 <= hours_counter)
    24e6:	80 91 ba 00 	lds	r24, 0x00BA
    24ea:	88 31       	cpi	r24, 0x18	; 24
    24ec:	38 f0       	brcs	.+14     	; 0x24fc <main+0x2a2>
				 {
					 hours_counter = 0;
    24ee:	10 92 ba 00 	sts	0x00BA, r1
					 day_counter++;
    24f2:	80 91 64 00 	lds	r24, 0x0064
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	80 93 64 00 	sts	0x0064, r24
				 }
				 if(day_counter >= 31 )
    24fc:	80 91 64 00 	lds	r24, 0x0064
    2500:	8f 31       	cpi	r24, 0x1F	; 31
    2502:	40 f0       	brcs	.+16     	; 0x2514 <main+0x2ba>
				 {
					 day_counter = 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	80 93 64 00 	sts	0x0064, r24
					 month_counter++;
    250a:	80 91 65 00 	lds	r24, 0x0065
    250e:	8f 5f       	subi	r24, 0xFF	; 255
    2510:	80 93 65 00 	sts	0x0065, r24
				 }
				 if(month_counter >= 12)
    2514:	80 91 65 00 	lds	r24, 0x0065
    2518:	8c 30       	cpi	r24, 0x0C	; 12
    251a:	60 f0       	brcs	.+24     	; 0x2534 <main+0x2da>
				 {
					 month_counter = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	80 93 65 00 	sts	0x0065, r24
					 year_counter++;
    2522:	80 91 66 00 	lds	r24, 0x0066
    2526:	90 91 67 00 	lds	r25, 0x0067
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	90 93 67 00 	sts	0x0067, r25
    2530:	80 93 66 00 	sts	0x0066, r24
				 }
				 
				 
				 // time displaying
				 sendCharXY((hours_counter/10) + 48,x_of_time,y_of_time);
    2534:	80 91 ba 00 	lds	r24, 0x00BA
    2538:	9a e0       	ldi	r25, 0x0A	; 10
    253a:	69 2f       	mov	r22, r25
    253c:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    2540:	80 5d       	subi	r24, 0xD0	; 208
    2542:	90 91 60 00 	lds	r25, 0x0060
    2546:	49 2f       	mov	r20, r25
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	90 91 61 00 	lds	r25, 0x0061
    254e:	29 2f       	mov	r18, r25
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	ba 01       	movw	r22, r20
    2554:	a9 01       	movw	r20, r18
    2556:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((hours_counter%10) + 48,x_of_time,y_of_time+1);
    255a:	80 91 ba 00 	lds	r24, 0x00BA
    255e:	9a e0       	ldi	r25, 0x0A	; 10
    2560:	69 2f       	mov	r22, r25
    2562:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    2566:	89 2f       	mov	r24, r25
    2568:	68 2f       	mov	r22, r24
    256a:	60 5d       	subi	r22, 0xD0	; 208
    256c:	80 91 60 00 	lds	r24, 0x0060
    2570:	48 2f       	mov	r20, r24
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	80 91 61 00 	lds	r24, 0x0061
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9c 01       	movw	r18, r24
    257e:	2f 5f       	subi	r18, 0xFF	; 255
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	86 2f       	mov	r24, r22
    2584:	ba 01       	movw	r22, r20
    2586:	a9 01       	movw	r20, r18
    2588:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY(':',x_of_time,y_of_time+2);
    258c:	80 91 60 00 	lds	r24, 0x0060
    2590:	48 2f       	mov	r20, r24
    2592:	50 e0       	ldi	r21, 0x00	; 0
    2594:	80 91 61 00 	lds	r24, 0x0061
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9c 01       	movw	r18, r24
    259e:	2e 5f       	subi	r18, 0xFE	; 254
    25a0:	3f 4f       	sbci	r19, 0xFF	; 255
    25a2:	8a e3       	ldi	r24, 0x3A	; 58
    25a4:	ba 01       	movw	r22, r20
    25a6:	a9 01       	movw	r20, r18
    25a8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((minutes_counter/10) + 48,x_of_time,y_of_time + 3);
    25ac:	80 91 b9 00 	lds	r24, 0x00B9
    25b0:	9a e0       	ldi	r25, 0x0A	; 10
    25b2:	69 2f       	mov	r22, r25
    25b4:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    25b8:	68 2f       	mov	r22, r24
    25ba:	60 5d       	subi	r22, 0xD0	; 208
    25bc:	80 91 60 00 	lds	r24, 0x0060
    25c0:	48 2f       	mov	r20, r24
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	80 91 61 00 	lds	r24, 0x0061
    25c8:	88 2f       	mov	r24, r24
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9c 01       	movw	r18, r24
    25ce:	2d 5f       	subi	r18, 0xFD	; 253
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	86 2f       	mov	r24, r22
    25d4:	ba 01       	movw	r22, r20
    25d6:	a9 01       	movw	r20, r18
    25d8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((minutes_counter%10) + 48,x_of_time,y_of_time + 4);
    25dc:	80 91 b9 00 	lds	r24, 0x00B9
    25e0:	9a e0       	ldi	r25, 0x0A	; 10
    25e2:	69 2f       	mov	r22, r25
    25e4:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    25e8:	89 2f       	mov	r24, r25
    25ea:	68 2f       	mov	r22, r24
    25ec:	60 5d       	subi	r22, 0xD0	; 208
    25ee:	80 91 60 00 	lds	r24, 0x0060
    25f2:	48 2f       	mov	r20, r24
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	80 91 61 00 	lds	r24, 0x0061
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9c 01       	movw	r18, r24
    2600:	2c 5f       	subi	r18, 0xFC	; 252
    2602:	3f 4f       	sbci	r19, 0xFF	; 255
    2604:	86 2f       	mov	r24, r22
    2606:	ba 01       	movw	r22, r20
    2608:	a9 01       	movw	r20, r18
    260a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY(':',x_of_time,y_of_time+5);
    260e:	80 91 60 00 	lds	r24, 0x0060
    2612:	48 2f       	mov	r20, r24
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	80 91 61 00 	lds	r24, 0x0061
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9c 01       	movw	r18, r24
    2620:	2b 5f       	subi	r18, 0xFB	; 251
    2622:	3f 4f       	sbci	r19, 0xFF	; 255
    2624:	8a e3       	ldi	r24, 0x3A	; 58
    2626:	ba 01       	movw	r22, r20
    2628:	a9 01       	movw	r20, r18
    262a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((seconds_counter/10) + 48,x_of_time,y_of_time + 6);
    262e:	80 91 b8 00 	lds	r24, 0x00B8
    2632:	9a e0       	ldi	r25, 0x0A	; 10
    2634:	69 2f       	mov	r22, r25
    2636:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    263a:	68 2f       	mov	r22, r24
    263c:	60 5d       	subi	r22, 0xD0	; 208
    263e:	80 91 60 00 	lds	r24, 0x0060
    2642:	48 2f       	mov	r20, r24
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	80 91 61 00 	lds	r24, 0x0061
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9c 01       	movw	r18, r24
    2650:	2a 5f       	subi	r18, 0xFA	; 250
    2652:	3f 4f       	sbci	r19, 0xFF	; 255
    2654:	86 2f       	mov	r24, r22
    2656:	ba 01       	movw	r22, r20
    2658:	a9 01       	movw	r20, r18
    265a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((seconds_counter%10) + 48,x_of_time,y_of_time + 7);
    265e:	80 91 b8 00 	lds	r24, 0x00B8
    2662:	9a e0       	ldi	r25, 0x0A	; 10
    2664:	69 2f       	mov	r22, r25
    2666:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    266a:	89 2f       	mov	r24, r25
    266c:	68 2f       	mov	r22, r24
    266e:	60 5d       	subi	r22, 0xD0	; 208
    2670:	80 91 60 00 	lds	r24, 0x0060
    2674:	48 2f       	mov	r20, r24
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	80 91 61 00 	lds	r24, 0x0061
    267c:	88 2f       	mov	r24, r24
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9c 01       	movw	r18, r24
    2682:	29 5f       	subi	r18, 0xF9	; 249
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	86 2f       	mov	r24, r22
    2688:	ba 01       	movw	r22, r20
    268a:	a9 01       	movw	r20, r18
    268c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 
				 // date diplaying
				 sendCharXY((year_counter/1000) + 48,x_of_date,y_of_date);
    2690:	80 91 66 00 	lds	r24, 0x0066
    2694:	90 91 67 00 	lds	r25, 0x0067
    2698:	28 ee       	ldi	r18, 0xE8	; 232
    269a:	33 e0       	ldi	r19, 0x03	; 3
    269c:	b9 01       	movw	r22, r18
    269e:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    26a2:	9b 01       	movw	r18, r22
    26a4:	c9 01       	movw	r24, r18
    26a6:	80 5d       	subi	r24, 0xD0	; 208
    26a8:	90 91 62 00 	lds	r25, 0x0062
    26ac:	49 2f       	mov	r20, r25
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	90 91 63 00 	lds	r25, 0x0063
    26b4:	29 2f       	mov	r18, r25
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	ba 01       	movw	r22, r20
    26ba:	a9 01       	movw	r20, r18
    26bc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY(((year_counter/100) % 10) + 48,x_of_date,y_of_date+1);
    26c0:	80 91 66 00 	lds	r24, 0x0066
    26c4:	90 91 67 00 	lds	r25, 0x0067
    26c8:	24 e6       	ldi	r18, 0x64	; 100
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	b9 01       	movw	r22, r18
    26ce:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    26d2:	9b 01       	movw	r18, r22
    26d4:	c9 01       	movw	r24, r18
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	b9 01       	movw	r22, r18
    26dc:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    26e0:	68 2f       	mov	r22, r24
    26e2:	60 5d       	subi	r22, 0xD0	; 208
    26e4:	80 91 62 00 	lds	r24, 0x0062
    26e8:	48 2f       	mov	r20, r24
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	80 91 63 00 	lds	r24, 0x0063
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 01       	movw	r18, r24
    26f6:	2f 5f       	subi	r18, 0xFF	; 255
    26f8:	3f 4f       	sbci	r19, 0xFF	; 255
    26fa:	86 2f       	mov	r24, r22
    26fc:	ba 01       	movw	r22, r20
    26fe:	a9 01       	movw	r20, r18
    2700:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY(((year_counter/10) % 10) + 48,x_of_date,y_of_date+2);
    2704:	80 91 66 00 	lds	r24, 0x0066
    2708:	90 91 67 00 	lds	r25, 0x0067
    270c:	2a e0       	ldi	r18, 0x0A	; 10
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	b9 01       	movw	r22, r18
    2712:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    2716:	9b 01       	movw	r18, r22
    2718:	c9 01       	movw	r24, r18
    271a:	2a e0       	ldi	r18, 0x0A	; 10
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	b9 01       	movw	r22, r18
    2720:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    2724:	68 2f       	mov	r22, r24
    2726:	60 5d       	subi	r22, 0xD0	; 208
    2728:	80 91 62 00 	lds	r24, 0x0062
    272c:	48 2f       	mov	r20, r24
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	80 91 63 00 	lds	r24, 0x0063
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9c 01       	movw	r18, r24
    273a:	2e 5f       	subi	r18, 0xFE	; 254
    273c:	3f 4f       	sbci	r19, 0xFF	; 255
    273e:	86 2f       	mov	r24, r22
    2740:	ba 01       	movw	r22, r20
    2742:	a9 01       	movw	r20, r18
    2744:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((year_counter % 10) + 48,x_of_date,y_of_date+3);
    2748:	80 91 66 00 	lds	r24, 0x0066
    274c:	90 91 67 00 	lds	r25, 0x0067
    2750:	2a e0       	ldi	r18, 0x0A	; 10
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	b9 01       	movw	r22, r18
    2756:	0e 94 ca 21 	call	0x4394	; 0x4394 <__udivmodhi4>
    275a:	68 2f       	mov	r22, r24
    275c:	60 5d       	subi	r22, 0xD0	; 208
    275e:	80 91 62 00 	lds	r24, 0x0062
    2762:	48 2f       	mov	r20, r24
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	80 91 63 00 	lds	r24, 0x0063
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9c 01       	movw	r18, r24
    2770:	2d 5f       	subi	r18, 0xFD	; 253
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
    2774:	86 2f       	mov	r24, r22
    2776:	ba 01       	movw	r22, r20
    2778:	a9 01       	movw	r20, r18
    277a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY('/',x_of_date,y_of_date+4);
    277e:	80 91 62 00 	lds	r24, 0x0062
    2782:	48 2f       	mov	r20, r24
    2784:	50 e0       	ldi	r21, 0x00	; 0
    2786:	80 91 63 00 	lds	r24, 0x0063
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9c 01       	movw	r18, r24
    2790:	2c 5f       	subi	r18, 0xFC	; 252
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	8f e2       	ldi	r24, 0x2F	; 47
    2796:	ba 01       	movw	r22, r20
    2798:	a9 01       	movw	r20, r18
    279a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((month_counter/10) + 48,x_of_date,y_of_date + 5);
    279e:	80 91 65 00 	lds	r24, 0x0065
    27a2:	9a e0       	ldi	r25, 0x0A	; 10
    27a4:	69 2f       	mov	r22, r25
    27a6:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    27aa:	68 2f       	mov	r22, r24
    27ac:	60 5d       	subi	r22, 0xD0	; 208
    27ae:	80 91 62 00 	lds	r24, 0x0062
    27b2:	48 2f       	mov	r20, r24
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	80 91 63 00 	lds	r24, 0x0063
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c 01       	movw	r18, r24
    27c0:	2b 5f       	subi	r18, 0xFB	; 251
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	86 2f       	mov	r24, r22
    27c6:	ba 01       	movw	r22, r20
    27c8:	a9 01       	movw	r20, r18
    27ca:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((month_counter%10) + 48,x_of_date,y_of_date + 6);
    27ce:	80 91 65 00 	lds	r24, 0x0065
    27d2:	9a e0       	ldi	r25, 0x0A	; 10
    27d4:	69 2f       	mov	r22, r25
    27d6:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    27da:	89 2f       	mov	r24, r25
    27dc:	68 2f       	mov	r22, r24
    27de:	60 5d       	subi	r22, 0xD0	; 208
    27e0:	80 91 62 00 	lds	r24, 0x0062
    27e4:	48 2f       	mov	r20, r24
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	80 91 63 00 	lds	r24, 0x0063
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c 01       	movw	r18, r24
    27f2:	2a 5f       	subi	r18, 0xFA	; 250
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	86 2f       	mov	r24, r22
    27f8:	ba 01       	movw	r22, r20
    27fa:	a9 01       	movw	r20, r18
    27fc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY('/',x_of_date,y_of_date+7);
    2800:	80 91 62 00 	lds	r24, 0x0062
    2804:	48 2f       	mov	r20, r24
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	80 91 63 00 	lds	r24, 0x0063
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9c 01       	movw	r18, r24
    2812:	29 5f       	subi	r18, 0xF9	; 249
    2814:	3f 4f       	sbci	r19, 0xFF	; 255
    2816:	8f e2       	ldi	r24, 0x2F	; 47
    2818:	ba 01       	movw	r22, r20
    281a:	a9 01       	movw	r20, r18
    281c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((day_counter/10) + 48,x_of_date,y_of_date + 8);
    2820:	80 91 64 00 	lds	r24, 0x0064
    2824:	9a e0       	ldi	r25, 0x0A	; 10
    2826:	69 2f       	mov	r22, r25
    2828:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    282c:	68 2f       	mov	r22, r24
    282e:	60 5d       	subi	r22, 0xD0	; 208
    2830:	80 91 62 00 	lds	r24, 0x0062
    2834:	48 2f       	mov	r20, r24
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	80 91 63 00 	lds	r24, 0x0063
    283c:	88 2f       	mov	r24, r24
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9c 01       	movw	r18, r24
    2842:	28 5f       	subi	r18, 0xF8	; 248
    2844:	3f 4f       	sbci	r19, 0xFF	; 255
    2846:	86 2f       	mov	r24, r22
    2848:	ba 01       	movw	r22, r20
    284a:	a9 01       	movw	r20, r18
    284c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 sendCharXY((day_counter%10) + 48,x_of_date,y_of_date + 9);
    2850:	80 91 64 00 	lds	r24, 0x0064
    2854:	9a e0       	ldi	r25, 0x0A	; 10
    2856:	69 2f       	mov	r22, r25
    2858:	0e 94 be 21 	call	0x437c	; 0x437c <__udivmodqi4>
    285c:	89 2f       	mov	r24, r25
    285e:	68 2f       	mov	r22, r24
    2860:	60 5d       	subi	r22, 0xD0	; 208
    2862:	80 91 62 00 	lds	r24, 0x0062
    2866:	48 2f       	mov	r20, r24
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	80 91 63 00 	lds	r24, 0x0063
    286e:	88 2f       	mov	r24, r24
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9c 01       	movw	r18, r24
    2874:	27 5f       	subi	r18, 0xF7	; 247
    2876:	3f 4f       	sbci	r19, 0xFF	; 255
    2878:	86 2f       	mov	r24, r22
    287a:	ba 01       	movw	r22, r20
    287c:	a9 01       	movw	r20, r18
    287e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				 
				 
				 button1 = button_read('B',0);
    2882:	82 e4       	ldi	r24, 0x42	; 66
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    288e:	80 93 68 00 	sts	0x0068, r24
				 button2 = button_read('B',1);
    2892:	82 e4       	ldi	r24, 0x42	; 66
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    289e:	80 93 69 00 	sts	0x0069, r24
				 button3 = button_read('B',2);
    28a2:	82 e4       	ldi	r24, 0x42	; 66
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	62 e0       	ldi	r22, 0x02	; 2
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    28ae:	80 93 6a 00 	sts	0x006A, r24
				 button4 = button_read('B',3);
    28b2:	82 e4       	ldi	r24, 0x42	; 66
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	63 e0       	ldi	r22, 0x03	; 3
    28b8:	70 e0       	ldi	r23, 0x00	; 0
    28ba:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    28be:	80 93 6b 00 	sts	0x006B, r24
				 button7 = button_read('B',6);
    28c2:	82 e4       	ldi	r24, 0x42	; 66
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	66 e0       	ldi	r22, 0x06	; 6
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    28ce:	80 93 6e 00 	sts	0x006E, r24
						 					 
					 } while (button_read('B',7) == NOTPRESSED);
					  
				 }
				 */					  
			 } while (button1 == NOTPRESSED && button2 == NOTPRESSED);
    28d2:	80 91 68 00 	lds	r24, 0x0068
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	29 f4       	brne	.+10     	; 0x28e4 <main+0x68a>
    28da:	80 91 69 00 	lds	r24, 0x0069
    28de:	81 30       	cpi	r24, 0x01	; 1
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <main+0x68a>
    28e2:	20 cd       	rjmp	.-1472   	; 0x2324 <main+0xca>
			if(button1 == PRESSED)
    28e4:	80 91 68 00 	lds	r24, 0x0068
    28e8:	88 23       	and	r24, r24
    28ea:	09 f0       	breq	.+2      	; 0x28ee <main+0x694>
    28ec:	48 c3       	rjmp	.+1680   	; 0x2f7e <main+0xd24>
			 {
				     clear_display();
    28ee:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear_display>
				     while (button_read('B',0) == PRESSED); // stay until it your button is not pressed
    28f2:	00 00       	nop
    28f4:	82 e4       	ldi	r24, 0x42	; 66
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	70 e0       	ldi	r23, 0x00	; 0
    28fc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	c1 f3       	breq	.-16     	; 0x28f4 <main+0x69a>
				    // _delay_ms(250);
					 first_digit = 0;
    2904:	10 92 bb 00 	sts	0x00BB, r1
					 second_digit = 0;
    2908:	10 92 bc 00 	sts	0x00BC, r1
					 //_delay_ms(300);
					 sendStrXY("hours:--",X_OF_INPUT,Y_OF_INPUT + 1);
    290c:	8c e7       	ldi	r24, 0x7C	; 124
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	63 e0       	ldi	r22, 0x03	; 3
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	44 e0       	ldi	r20, 0x04	; 4
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <sendStrXY>
					 firstdigithours:
					 do
					 { 
					 sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT+7);
    291c:	80 91 bb 00 	lds	r24, 0x00BB
    2920:	80 5d       	subi	r24, 0xD0	; 208
    2922:	63 e0       	ldi	r22, 0x03	; 3
    2924:	70 e0       	ldi	r23, 0x00	; 0
    2926:	4a e0       	ldi	r20, 0x0A	; 10
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 do{
						 button1 = button_read('B',0);
    292e:	82 e4       	ldi	r24, 0x42	; 66
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    293a:	80 93 68 00 	sts	0x0068, r24
						 button3 = button_read('B',2);
    293e:	82 e4       	ldi	r24, 0x42	; 66
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	62 e0       	ldi	r22, 0x02	; 2
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    294a:	80 93 6a 00 	sts	0x006A, r24
						 button4 = button_read('B',3);
    294e:	82 e4       	ldi	r24, 0x42	; 66
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	63 e0       	ldi	r22, 0x03	; 3
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    295a:	80 93 6b 00 	sts	0x006B, r24
					 }while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED);
    295e:	80 91 6a 00 	lds	r24, 0x006A
    2962:	81 30       	cpi	r24, 0x01	; 1
    2964:	41 f4       	brne	.+16     	; 0x2976 <main+0x71c>
    2966:	80 91 6b 00 	lds	r24, 0x006B
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	21 f4       	brne	.+8      	; 0x2976 <main+0x71c>
    296e:	80 91 68 00 	lds	r24, 0x0068
    2972:	81 30       	cpi	r24, 0x01	; 1
    2974:	e1 f2       	breq	.-72     	; 0x292e <main+0x6d4>
					 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    2976:	00 00       	nop
    2978:	82 e4       	ldi	r24, 0x42	; 66
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	63 e0       	ldi	r22, 0x03	; 3
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	c1 f3       	breq	.-16     	; 0x2978 <main+0x71e>
    2988:	82 e4       	ldi	r24, 0x42	; 66
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	62 e0       	ldi	r22, 0x02	; 2
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	81 f3       	breq	.-32     	; 0x2978 <main+0x71e>
					// _delay_ms(250);
					 if(button3 == PRESSED && ((first_digit < 2 && second_digit < 5) ||  first_digit < 1 ))
    2998:	80 91 6a 00 	lds	r24, 0x006A
    299c:	88 23       	and	r24, r24
    299e:	91 f4       	brne	.+36     	; 0x29c4 <main+0x76a>
    29a0:	80 91 bb 00 	lds	r24, 0x00BB
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	20 f4       	brcc	.+8      	; 0x29b0 <main+0x756>
    29a8:	80 91 bc 00 	lds	r24, 0x00BC
    29ac:	85 30       	cpi	r24, 0x05	; 5
    29ae:	20 f0       	brcs	.+8      	; 0x29b8 <main+0x75e>
    29b0:	80 91 bb 00 	lds	r24, 0x00BB
    29b4:	88 23       	and	r24, r24
    29b6:	31 f4       	brne	.+12     	; 0x29c4 <main+0x76a>
					 {
						 first_digit++;
    29b8:	80 91 bb 00 	lds	r24, 0x00BB
    29bc:	8f 5f       	subi	r24, 0xFF	; 255
    29be:	80 93 bb 00 	sts	0x00BB, r24
    29c2:	0d c0       	rjmp	.+26     	; 0x29de <main+0x784>
					 }
					 else if(button4 == PRESSED && first_digit > 0)
    29c4:	80 91 6b 00 	lds	r24, 0x006B
    29c8:	88 23       	and	r24, r24
    29ca:	49 f4       	brne	.+18     	; 0x29de <main+0x784>
    29cc:	80 91 bb 00 	lds	r24, 0x00BB
    29d0:	88 23       	and	r24, r24
    29d2:	29 f0       	breq	.+10     	; 0x29de <main+0x784>
					 {
						 first_digit--;
    29d4:	80 91 bb 00 	lds	r24, 0x00BB
    29d8:	81 50       	subi	r24, 0x01	; 1
    29da:	80 93 bb 00 	sts	0x00BB, r24
					 }	 
					 }while(button_read('B',0) == NOTPRESSED);
    29de:	82 e4       	ldi	r24, 0x42	; 66
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	91 05       	cpc	r25, r1
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <main+0x798>
    29f0:	95 cf       	rjmp	.-214    	; 0x291c <main+0x6c2>
					 while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    29f2:	00 00       	nop
    29f4:	82 e4       	ldi	r24, 0x42	; 66
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	c1 f3       	breq	.-16     	; 0x29f4 <main+0x79a>
					// _delay_ms(250);
					 do{
					 sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT+8);
    2a04:	80 91 bc 00 	lds	r24, 0x00BC
    2a08:	80 5d       	subi	r24, 0xD0	; 208
    2a0a:	63 e0       	ldi	r22, 0x03	; 3
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	4b e0       	ldi	r20, 0x0B	; 11
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 do{
						 button1 = button_read('B',0);
    2a16:	82 e4       	ldi	r24, 0x42	; 66
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	60 e0       	ldi	r22, 0x00	; 0
    2a1c:	70 e0       	ldi	r23, 0x00	; 0
    2a1e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a22:	80 93 68 00 	sts	0x0068, r24
						 button3 = button_read('B',2);
    2a26:	82 e4       	ldi	r24, 0x42	; 66
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	62 e0       	ldi	r22, 0x02	; 2
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a32:	80 93 6a 00 	sts	0x006A, r24
						 button4 = button_read('B',3);
    2a36:	82 e4       	ldi	r24, 0x42	; 66
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	63 e0       	ldi	r22, 0x03	; 3
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a42:	80 93 6b 00 	sts	0x006B, r24
						 button7 = button_read('B',6);
    2a46:	82 e4       	ldi	r24, 0x42	; 66
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	66 e0       	ldi	r22, 0x06	; 6
    2a4c:	70 e0       	ldi	r23, 0x00	; 0
    2a4e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a52:	80 93 6e 00 	sts	0x006E, r24
					 }while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED && button7 == NOTPRESSED);
    2a56:	80 91 6a 00 	lds	r24, 0x006A
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	61 f4       	brne	.+24     	; 0x2a76 <main+0x81c>
    2a5e:	80 91 6b 00 	lds	r24, 0x006B
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	41 f4       	brne	.+16     	; 0x2a76 <main+0x81c>
    2a66:	80 91 68 00 	lds	r24, 0x0068
    2a6a:	81 30       	cpi	r24, 0x01	; 1
    2a6c:	21 f4       	brne	.+8      	; 0x2a76 <main+0x81c>
    2a6e:	80 91 6e 00 	lds	r24, 0x006E
    2a72:	81 30       	cpi	r24, 0x01	; 1
    2a74:	81 f2       	breq	.-96     	; 0x2a16 <main+0x7bc>
					 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    2a76:	00 00       	nop
    2a78:	82 e4       	ldi	r24, 0x42	; 66
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	63 e0       	ldi	r22, 0x03	; 3
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	c1 f3       	breq	.-16     	; 0x2a78 <main+0x81e>
    2a88:	82 e4       	ldi	r24, 0x42	; 66
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	62 e0       	ldi	r22, 0x02	; 2
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	81 f3       	breq	.-32     	; 0x2a78 <main+0x81e>
    2a98:	82 e4       	ldi	r24, 0x42	; 66
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	66 e0       	ldi	r22, 0x06	; 6
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	41 f3       	breq	.-48     	; 0x2a78 <main+0x81e>
					// _delay_ms(250);
					  if(button3 == PRESSED && ((first_digit == 2 && second_digit < 4) || (first_digit < 2 && second_digit < 9)))
    2aa8:	80 91 6a 00 	lds	r24, 0x006A
    2aac:	88 23       	and	r24, r24
    2aae:	b1 f4       	brne	.+44     	; 0x2adc <main+0x882>
    2ab0:	80 91 bb 00 	lds	r24, 0x00BB
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	21 f4       	brne	.+8      	; 0x2ac0 <main+0x866>
    2ab8:	80 91 bc 00 	lds	r24, 0x00BC
    2abc:	84 30       	cpi	r24, 0x04	; 4
    2abe:	40 f0       	brcs	.+16     	; 0x2ad0 <main+0x876>
    2ac0:	80 91 bb 00 	lds	r24, 0x00BB
    2ac4:	82 30       	cpi	r24, 0x02	; 2
    2ac6:	50 f4       	brcc	.+20     	; 0x2adc <main+0x882>
    2ac8:	80 91 bc 00 	lds	r24, 0x00BC
    2acc:	89 30       	cpi	r24, 0x09	; 9
    2ace:	30 f4       	brcc	.+12     	; 0x2adc <main+0x882>
					  {
						  second_digit++;
    2ad0:	80 91 bc 00 	lds	r24, 0x00BC
    2ad4:	8f 5f       	subi	r24, 0xFF	; 255
    2ad6:	80 93 bc 00 	sts	0x00BC, r24
    2ada:	1a c0       	rjmp	.+52     	; 0x2b10 <main+0x8b6>
					  }
					  else if(button4 == PRESSED && second_digit > 0)
    2adc:	80 91 6b 00 	lds	r24, 0x006B
    2ae0:	88 23       	and	r24, r24
    2ae2:	51 f4       	brne	.+20     	; 0x2af8 <main+0x89e>
    2ae4:	80 91 bc 00 	lds	r24, 0x00BC
    2ae8:	88 23       	and	r24, r24
    2aea:	31 f0       	breq	.+12     	; 0x2af8 <main+0x89e>
					  {
						  second_digit--;
    2aec:	80 91 bc 00 	lds	r24, 0x00BC
    2af0:	81 50       	subi	r24, 0x01	; 1
    2af2:	80 93 bc 00 	sts	0x00BC, r24
    2af6:	0c c0       	rjmp	.+24     	; 0x2b10 <main+0x8b6>
					  }
					  else if(button7 == PRESSED)
    2af8:	80 91 6e 00 	lds	r24, 0x006E
    2afc:	88 23       	and	r24, r24
    2afe:	41 f4       	brne	.+16     	; 0x2b10 <main+0x8b6>
					  {
						  sendCharXY('-',X_OF_INPUT,Y_OF_INPUT+8);
    2b00:	8d e2       	ldi	r24, 0x2D	; 45
    2b02:	63 e0       	ldi	r22, 0x03	; 3
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	4b e0       	ldi	r20, 0x0B	; 11
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						  goto firstdigithours;
    2b0e:	06 cf       	rjmp	.-500    	; 0x291c <main+0x6c2>
					  }						  
				    }while(button_read('B',0) == NOTPRESSED);
    2b10:	82 e4       	ldi	r24, 0x42	; 66
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2b1c:	81 30       	cpi	r24, 0x01	; 1
    2b1e:	91 05       	cpc	r25, r1
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <main+0x8ca>
    2b22:	70 cf       	rjmp	.-288    	; 0x2a04 <main+0x7aa>
					hours_counter = (first_digit * 10) + second_digit;
    2b24:	80 91 bb 00 	lds	r24, 0x00BB
    2b28:	88 0f       	add	r24, r24
    2b2a:	98 2f       	mov	r25, r24
    2b2c:	99 0f       	add	r25, r25
    2b2e:	99 0f       	add	r25, r25
    2b30:	98 0f       	add	r25, r24
    2b32:	80 91 bc 00 	lds	r24, 0x00BC
    2b36:	89 0f       	add	r24, r25
    2b38:	80 93 ba 00 	sts	0x00BA, r24
				    while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    2b3c:	00 00       	nop
    2b3e:	82 e4       	ldi	r24, 0x42	; 66
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	c1 f3       	breq	.-16     	; 0x2b3e <main+0x8e4>
				   // _delay_ms(250);
					
					 clear_display();
    2b4e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear_display>
					 first_digit = 0;
    2b52:	10 92 bb 00 	sts	0x00BB, r1
					 second_digit = 0;
    2b56:	10 92 bc 00 	sts	0x00BC, r1
					// _delay_ms(300);
					 sendStrXY("minutes:--",X_OF_INPUT,Y_OF_INPUT);	
    2b5a:	85 e8       	ldi	r24, 0x85	; 133
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	63 e0       	ldi	r22, 0x03	; 3
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	43 e0       	ldi	r20, 0x03	; 3
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <sendStrXY>
					 firstdigitminutes: 
					 do
					 {
						 
						 sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT+8);
    2b6a:	80 91 bb 00 	lds	r24, 0x00BB
    2b6e:	80 5d       	subi	r24, 0xD0	; 208
    2b70:	63 e0       	ldi	r22, 0x03	; 3
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	4b e0       	ldi	r20, 0x0B	; 11
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						 do{
							 button1 = button_read('B',0);
    2b7c:	82 e4       	ldi	r24, 0x42	; 66
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2b88:	80 93 68 00 	sts	0x0068, r24
							 button3 = button_read('B',2);
    2b8c:	82 e4       	ldi	r24, 0x42	; 66
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	62 e0       	ldi	r22, 0x02	; 2
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2b98:	80 93 6a 00 	sts	0x006A, r24
							 button4 = button_read('B',3);
    2b9c:	82 e4       	ldi	r24, 0x42	; 66
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	63 e0       	ldi	r22, 0x03	; 3
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2ba8:	80 93 6b 00 	sts	0x006B, r24
						 }while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED);
    2bac:	80 91 6a 00 	lds	r24, 0x006A
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	41 f4       	brne	.+16     	; 0x2bc4 <main+0x96a>
    2bb4:	80 91 6b 00 	lds	r24, 0x006B
    2bb8:	81 30       	cpi	r24, 0x01	; 1
    2bba:	21 f4       	brne	.+8      	; 0x2bc4 <main+0x96a>
    2bbc:	80 91 68 00 	lds	r24, 0x0068
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	e1 f2       	breq	.-72     	; 0x2b7c <main+0x922>
						 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    2bc4:	00 00       	nop
    2bc6:	82 e4       	ldi	r24, 0x42	; 66
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	63 e0       	ldi	r22, 0x03	; 3
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	c1 f3       	breq	.-16     	; 0x2bc6 <main+0x96c>
    2bd6:	82 e4       	ldi	r24, 0x42	; 66
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	62 e0       	ldi	r22, 0x02	; 2
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	81 f3       	breq	.-32     	; 0x2bc6 <main+0x96c>
						// _delay_ms(250);
						  if(button3 == PRESSED && first_digit < 5)
    2be6:	80 91 6a 00 	lds	r24, 0x006A
    2bea:	88 23       	and	r24, r24
    2bec:	51 f4       	brne	.+20     	; 0x2c02 <main+0x9a8>
    2bee:	80 91 bb 00 	lds	r24, 0x00BB
    2bf2:	85 30       	cpi	r24, 0x05	; 5
    2bf4:	30 f4       	brcc	.+12     	; 0x2c02 <main+0x9a8>
						  {
							  first_digit++;
    2bf6:	80 91 bb 00 	lds	r24, 0x00BB
    2bfa:	8f 5f       	subi	r24, 0xFF	; 255
    2bfc:	80 93 bb 00 	sts	0x00BB, r24
    2c00:	0d c0       	rjmp	.+26     	; 0x2c1c <main+0x9c2>
						  }
						  else if(button4 == PRESSED && first_digit > 0)
    2c02:	80 91 6b 00 	lds	r24, 0x006B
    2c06:	88 23       	and	r24, r24
    2c08:	49 f4       	brne	.+18     	; 0x2c1c <main+0x9c2>
    2c0a:	80 91 bb 00 	lds	r24, 0x00BB
    2c0e:	88 23       	and	r24, r24
    2c10:	29 f0       	breq	.+10     	; 0x2c1c <main+0x9c2>
						  {
							  first_digit--;
    2c12:	80 91 bb 00 	lds	r24, 0x00BB
    2c16:	81 50       	subi	r24, 0x01	; 1
    2c18:	80 93 bb 00 	sts	0x00BB, r24
						  }
					 }while(button1 == NOTPRESSED);
    2c1c:	80 91 68 00 	lds	r24, 0x0068
    2c20:	81 30       	cpi	r24, 0x01	; 1
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <main+0x9cc>
    2c24:	a2 cf       	rjmp	.-188    	; 0x2b6a <main+0x910>
					 while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    2c26:	00 00       	nop
    2c28:	82 e4       	ldi	r24, 0x42	; 66
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c34:	00 97       	sbiw	r24, 0x00	; 0
    2c36:	c1 f3       	breq	.-16     	; 0x2c28 <main+0x9ce>
					// _delay_ms(250);
					do{
					 
					 sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT+9);
    2c38:	80 91 bc 00 	lds	r24, 0x00BC
    2c3c:	80 5d       	subi	r24, 0xD0	; 208
    2c3e:	63 e0       	ldi	r22, 0x03	; 3
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	4c e0       	ldi	r20, 0x0C	; 12
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					do{
						button1 = button_read('B',0);
    2c4a:	82 e4       	ldi	r24, 0x42	; 66
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c56:	80 93 68 00 	sts	0x0068, r24
						button3 = button_read('B',2);
    2c5a:	82 e4       	ldi	r24, 0x42	; 66
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	62 e0       	ldi	r22, 0x02	; 2
    2c60:	70 e0       	ldi	r23, 0x00	; 0
    2c62:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c66:	80 93 6a 00 	sts	0x006A, r24
						button4 = button_read('B',3);
    2c6a:	82 e4       	ldi	r24, 0x42	; 66
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	63 e0       	ldi	r22, 0x03	; 3
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c76:	80 93 6b 00 	sts	0x006B, r24
						button7 = button_read('B',6);
    2c7a:	82 e4       	ldi	r24, 0x42	; 66
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	66 e0       	ldi	r22, 0x06	; 6
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c86:	80 93 6e 00 	sts	0x006E, r24
					}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED && button7 == NOTPRESSED);
    2c8a:	80 91 6a 00 	lds	r24, 0x006A
    2c8e:	81 30       	cpi	r24, 0x01	; 1
    2c90:	61 f4       	brne	.+24     	; 0x2caa <main+0xa50>
    2c92:	80 91 6b 00 	lds	r24, 0x006B
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	41 f4       	brne	.+16     	; 0x2caa <main+0xa50>
    2c9a:	80 91 68 00 	lds	r24, 0x0068
    2c9e:	81 30       	cpi	r24, 0x01	; 1
    2ca0:	21 f4       	brne	.+8      	; 0x2caa <main+0xa50>
    2ca2:	80 91 6e 00 	lds	r24, 0x006E
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	81 f2       	breq	.-96     	; 0x2c4a <main+0x9f0>
					 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    2caa:	00 00       	nop
    2cac:	82 e4       	ldi	r24, 0x42	; 66
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	63 e0       	ldi	r22, 0x03	; 3
    2cb2:	70 e0       	ldi	r23, 0x00	; 0
    2cb4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	c1 f3       	breq	.-16     	; 0x2cac <main+0xa52>
    2cbc:	82 e4       	ldi	r24, 0x42	; 66
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	62 e0       	ldi	r22, 0x02	; 2
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	81 f3       	breq	.-32     	; 0x2cac <main+0xa52>
    2ccc:	82 e4       	ldi	r24, 0x42	; 66
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	66 e0       	ldi	r22, 0x06	; 6
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	41 f3       	breq	.-48     	; 0x2cac <main+0xa52>
					// _delay_ms(250);
					  if(button3 == PRESSED && second_digit < 9)
    2cdc:	80 91 6a 00 	lds	r24, 0x006A
    2ce0:	88 23       	and	r24, r24
    2ce2:	51 f4       	brne	.+20     	; 0x2cf8 <main+0xa9e>
    2ce4:	80 91 bc 00 	lds	r24, 0x00BC
    2ce8:	89 30       	cpi	r24, 0x09	; 9
    2cea:	30 f4       	brcc	.+12     	; 0x2cf8 <main+0xa9e>
					  {
						  second_digit++;
    2cec:	80 91 bc 00 	lds	r24, 0x00BC
    2cf0:	8f 5f       	subi	r24, 0xFF	; 255
    2cf2:	80 93 bc 00 	sts	0x00BC, r24
    2cf6:	1a c0       	rjmp	.+52     	; 0x2d2c <main+0xad2>
					  }
					  else if(button4 == PRESSED && second_digit > 0)
    2cf8:	80 91 6b 00 	lds	r24, 0x006B
    2cfc:	88 23       	and	r24, r24
    2cfe:	51 f4       	brne	.+20     	; 0x2d14 <main+0xaba>
    2d00:	80 91 bc 00 	lds	r24, 0x00BC
    2d04:	88 23       	and	r24, r24
    2d06:	31 f0       	breq	.+12     	; 0x2d14 <main+0xaba>
					  {
						  second_digit--;
    2d08:	80 91 bc 00 	lds	r24, 0x00BC
    2d0c:	81 50       	subi	r24, 0x01	; 1
    2d0e:	80 93 bc 00 	sts	0x00BC, r24
    2d12:	0c c0       	rjmp	.+24     	; 0x2d2c <main+0xad2>
					  }
					  else if(button7 == PRESSED)
    2d14:	80 91 6e 00 	lds	r24, 0x006E
    2d18:	88 23       	and	r24, r24
    2d1a:	41 f4       	brne	.+16     	; 0x2d2c <main+0xad2>
					  {
						  sendCharXY('-',X_OF_INPUT,Y_OF_INPUT+9);
    2d1c:	8d e2       	ldi	r24, 0x2D	; 45
    2d1e:	63 e0       	ldi	r22, 0x03	; 3
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	4c e0       	ldi	r20, 0x0C	; 12
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						  goto firstdigitminutes;
    2d2a:	1f cf       	rjmp	.-450    	; 0x2b6a <main+0x910>
					  }
				 }while(button1 == NOTPRESSED);
    2d2c:	80 91 68 00 	lds	r24, 0x0068
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <main+0xadc>
    2d34:	81 cf       	rjmp	.-254    	; 0x2c38 <main+0x9de>
				 minutes_counter = (first_digit * 10) + second_digit;
    2d36:	80 91 bb 00 	lds	r24, 0x00BB
    2d3a:	88 0f       	add	r24, r24
    2d3c:	98 2f       	mov	r25, r24
    2d3e:	99 0f       	add	r25, r25
    2d40:	99 0f       	add	r25, r25
    2d42:	98 0f       	add	r25, r24
    2d44:	80 91 bc 00 	lds	r24, 0x00BC
    2d48:	89 0f       	add	r24, r25
    2d4a:	80 93 b9 00 	sts	0x00B9, r24
				 while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    2d4e:	00 00       	nop
    2d50:	82 e4       	ldi	r24, 0x42	; 66
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	c1 f3       	breq	.-16     	; 0x2d50 <main+0xaf6>
				// _delay_ms(250);
				 clear_display();
    2d60:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear_display>
				 first_digit = 0;
    2d64:	10 92 bb 00 	sts	0x00BB, r1
				 second_digit = 0;
    2d68:	10 92 bc 00 	sts	0x00BC, r1
				// _delay_ms(300);
				 sendStrXY("seconds:--",X_OF_INPUT,Y_OF_INPUT);
    2d6c:	80 e9       	ldi	r24, 0x90	; 144
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	63 e0       	ldi	r22, 0x03	; 3
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	43 e0       	ldi	r20, 0x03	; 3
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <sendStrXY>
				 firstdigitseconds:
				 do{
					  sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT+8);
    2d7c:	80 91 bb 00 	lds	r24, 0x00BB
    2d80:	80 5d       	subi	r24, 0xD0	; 208
    2d82:	63 e0       	ldi	r22, 0x03	; 3
    2d84:	70 e0       	ldi	r23, 0x00	; 0
    2d86:	4b e0       	ldi	r20, 0x0B	; 11
    2d88:	50 e0       	ldi	r21, 0x00	; 0
    2d8a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					 do{
						 button1 = button_read('B',0);
    2d8e:	82 e4       	ldi	r24, 0x42	; 66
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	60 e0       	ldi	r22, 0x00	; 0
    2d94:	70 e0       	ldi	r23, 0x00	; 0
    2d96:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2d9a:	80 93 68 00 	sts	0x0068, r24
						 button3 = button_read('B',2);
    2d9e:	82 e4       	ldi	r24, 0x42	; 66
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	62 e0       	ldi	r22, 0x02	; 2
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2daa:	80 93 6a 00 	sts	0x006A, r24
						 button4 = button_read('B',3);
    2dae:	82 e4       	ldi	r24, 0x42	; 66
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	63 e0       	ldi	r22, 0x03	; 3
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2dba:	80 93 6b 00 	sts	0x006B, r24
					 }while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED);
    2dbe:	80 91 6a 00 	lds	r24, 0x006A
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	41 f4       	brne	.+16     	; 0x2dd6 <main+0xb7c>
    2dc6:	80 91 6b 00 	lds	r24, 0x006B
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <main+0xb7c>
    2dce:	80 91 68 00 	lds	r24, 0x0068
    2dd2:	81 30       	cpi	r24, 0x01	; 1
    2dd4:	e1 f2       	breq	.-72     	; 0x2d8e <main+0xb34>
					 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    2dd6:	00 00       	nop
    2dd8:	82 e4       	ldi	r24, 0x42	; 66
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	63 e0       	ldi	r22, 0x03	; 3
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	c1 f3       	breq	.-16     	; 0x2dd8 <main+0xb7e>
    2de8:	82 e4       	ldi	r24, 0x42	; 66
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	62 e0       	ldi	r22, 0x02	; 2
    2dee:	70 e0       	ldi	r23, 0x00	; 0
    2df0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	81 f3       	breq	.-32     	; 0x2dd8 <main+0xb7e>
					// _delay_ms(250);
					  if(button3 == PRESSED && first_digit < 5)
    2df8:	80 91 6a 00 	lds	r24, 0x006A
    2dfc:	88 23       	and	r24, r24
    2dfe:	51 f4       	brne	.+20     	; 0x2e14 <main+0xbba>
    2e00:	80 91 bb 00 	lds	r24, 0x00BB
    2e04:	85 30       	cpi	r24, 0x05	; 5
    2e06:	30 f4       	brcc	.+12     	; 0x2e14 <main+0xbba>
					  {
						  first_digit++;
    2e08:	80 91 bb 00 	lds	r24, 0x00BB
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	80 93 bb 00 	sts	0x00BB, r24
    2e12:	0d c0       	rjmp	.+26     	; 0x2e2e <main+0xbd4>
					  }
					  else if(button4 == PRESSED && first_digit > 0)
    2e14:	80 91 6b 00 	lds	r24, 0x006B
    2e18:	88 23       	and	r24, r24
    2e1a:	49 f4       	brne	.+18     	; 0x2e2e <main+0xbd4>
    2e1c:	80 91 bb 00 	lds	r24, 0x00BB
    2e20:	88 23       	and	r24, r24
    2e22:	29 f0       	breq	.+10     	; 0x2e2e <main+0xbd4>
					  {
						  first_digit--;
    2e24:	80 91 bb 00 	lds	r24, 0x00BB
    2e28:	81 50       	subi	r24, 0x01	; 1
    2e2a:	80 93 bb 00 	sts	0x00BB, r24
					  }
				}while(button1 == NOTPRESSED);
    2e2e:	80 91 68 00 	lds	r24, 0x0068
    2e32:	81 30       	cpi	r24, 0x01	; 1
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <main+0xbde>
    2e36:	a2 cf       	rjmp	.-188    	; 0x2d7c <main+0xb22>
				while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    2e38:	00 00       	nop
    2e3a:	82 e4       	ldi	r24, 0x42	; 66
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	70 e0       	ldi	r23, 0x00	; 0
    2e42:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	c1 f3       	breq	.-16     	; 0x2e3a <main+0xbe0>
			//	_delay_ms(250);
				do{
				 sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT+9);
    2e4a:	80 91 bc 00 	lds	r24, 0x00BC
    2e4e:	80 5d       	subi	r24, 0xD0	; 208
    2e50:	63 e0       	ldi	r22, 0x03	; 3
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	4c e0       	ldi	r20, 0x0C	; 12
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
				do{
					button1 = button_read('B',0);
    2e5c:	82 e4       	ldi	r24, 0x42	; 66
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e68:	80 93 68 00 	sts	0x0068, r24
					button3 = button_read('B',2);
    2e6c:	82 e4       	ldi	r24, 0x42	; 66
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	62 e0       	ldi	r22, 0x02	; 2
    2e72:	70 e0       	ldi	r23, 0x00	; 0
    2e74:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e78:	80 93 6a 00 	sts	0x006A, r24
					button4 = button_read('B',3);
    2e7c:	82 e4       	ldi	r24, 0x42	; 66
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	63 e0       	ldi	r22, 0x03	; 3
    2e82:	70 e0       	ldi	r23, 0x00	; 0
    2e84:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e88:	80 93 6b 00 	sts	0x006B, r24
					button7 = button_read('B',6);
    2e8c:	82 e4       	ldi	r24, 0x42	; 66
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	66 e0       	ldi	r22, 0x06	; 6
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e98:	80 93 6e 00 	sts	0x006E, r24
					
				}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED && button7 == NOTPRESSED);
    2e9c:	80 91 6a 00 	lds	r24, 0x006A
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	61 f4       	brne	.+24     	; 0x2ebc <main+0xc62>
    2ea4:	80 91 6b 00 	lds	r24, 0x006B
    2ea8:	81 30       	cpi	r24, 0x01	; 1
    2eaa:	41 f4       	brne	.+16     	; 0x2ebc <main+0xc62>
    2eac:	80 91 68 00 	lds	r24, 0x0068
    2eb0:	81 30       	cpi	r24, 0x01	; 1
    2eb2:	21 f4       	brne	.+8      	; 0x2ebc <main+0xc62>
    2eb4:	80 91 6e 00 	lds	r24, 0x006E
    2eb8:	81 30       	cpi	r24, 0x01	; 1
    2eba:	81 f2       	breq	.-96     	; 0x2e5c <main+0xc02>
				 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    2ebc:	00 00       	nop
    2ebe:	82 e4       	ldi	r24, 0x42	; 66
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	63 e0       	ldi	r22, 0x03	; 3
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	c1 f3       	breq	.-16     	; 0x2ebe <main+0xc64>
    2ece:	82 e4       	ldi	r24, 0x42	; 66
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	62 e0       	ldi	r22, 0x02	; 2
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	81 f3       	breq	.-32     	; 0x2ebe <main+0xc64>
    2ede:	82 e4       	ldi	r24, 0x42	; 66
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	66 e0       	ldi	r22, 0x06	; 6
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	41 f3       	breq	.-48     	; 0x2ebe <main+0xc64>
			//	 _delay_ms(250);
				  if(button3 == PRESSED && second_digit < 9)
    2eee:	80 91 6a 00 	lds	r24, 0x006A
    2ef2:	88 23       	and	r24, r24
    2ef4:	51 f4       	brne	.+20     	; 0x2f0a <main+0xcb0>
    2ef6:	80 91 bc 00 	lds	r24, 0x00BC
    2efa:	89 30       	cpi	r24, 0x09	; 9
    2efc:	30 f4       	brcc	.+12     	; 0x2f0a <main+0xcb0>
				  {
					  second_digit++;
    2efe:	80 91 bc 00 	lds	r24, 0x00BC
    2f02:	8f 5f       	subi	r24, 0xFF	; 255
    2f04:	80 93 bc 00 	sts	0x00BC, r24
    2f08:	1a c0       	rjmp	.+52     	; 0x2f3e <main+0xce4>
				  }
				  else if(button4 == PRESSED && second_digit > 0)
    2f0a:	80 91 6b 00 	lds	r24, 0x006B
    2f0e:	88 23       	and	r24, r24
    2f10:	51 f4       	brne	.+20     	; 0x2f26 <main+0xccc>
    2f12:	80 91 bc 00 	lds	r24, 0x00BC
    2f16:	88 23       	and	r24, r24
    2f18:	31 f0       	breq	.+12     	; 0x2f26 <main+0xccc>
				  {
					  second_digit--;
    2f1a:	80 91 bc 00 	lds	r24, 0x00BC
    2f1e:	81 50       	subi	r24, 0x01	; 1
    2f20:	80 93 bc 00 	sts	0x00BC, r24
    2f24:	0c c0       	rjmp	.+24     	; 0x2f3e <main+0xce4>
				  }
				  else if(button7 == PRESSED)
    2f26:	80 91 6e 00 	lds	r24, 0x006E
    2f2a:	88 23       	and	r24, r24
    2f2c:	41 f4       	brne	.+16     	; 0x2f3e <main+0xce4>
				  {
					  sendCharXY('-',X_OF_INPUT,Y_OF_INPUT+9);
    2f2e:	8d e2       	ldi	r24, 0x2D	; 45
    2f30:	63 e0       	ldi	r22, 0x03	; 3
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	4c e0       	ldi	r20, 0x0C	; 12
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
					  goto firstdigitseconds;  
    2f3c:	1f cf       	rjmp	.-450    	; 0x2d7c <main+0xb22>
				  }
				 }while(button_read('B',0) == NOTPRESSED);
    2f3e:	82 e4       	ldi	r24, 0x42	; 66
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <main+0xcf8>
    2f50:	7c cf       	rjmp	.-264    	; 0x2e4a <main+0xbf0>
				 seconds_counter = (first_digit * 10) + second_digit;
    2f52:	80 91 bb 00 	lds	r24, 0x00BB
    2f56:	88 0f       	add	r24, r24
    2f58:	98 2f       	mov	r25, r24
    2f5a:	99 0f       	add	r25, r25
    2f5c:	99 0f       	add	r25, r25
    2f5e:	98 0f       	add	r25, r24
    2f60:	80 91 bc 00 	lds	r24, 0x00BC
    2f64:	89 0f       	add	r24, r25
    2f66:	80 93 b8 00 	sts	0x00B8, r24
			 while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    2f6a:	00 00       	nop
    2f6c:	82 e4       	ldi	r24, 0x42	; 66
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	60 e0       	ldi	r22, 0x00	; 0
    2f72:	70 e0       	ldi	r23, 0x00	; 0
    2f74:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	c1 f3       	breq	.-16     	; 0x2f6c <main+0xd12>
			// _delay_ms(250);
			 goto tempchange;
    2f7c:	c7 c9       	rjmp	.-3186   	; 0x230c <main+0xb2>
				}		 
				if(button2 == PRESSED)
    2f7e:	80 91 69 00 	lds	r24, 0x0069
    2f82:	88 23       	and	r24, r24
    2f84:	09 f0       	breq	.+2      	; 0x2f88 <main+0xd2e>
    2f86:	cd c9       	rjmp	.-3174   	; 0x2322 <main+0xc8>
				{
					clear_display();
    2f88:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear_display>
					while (button_read('B',1) == PRESSED); // stay until it your button is not pressed
    2f8c:	00 00       	nop
    2f8e:	82 e4       	ldi	r24, 0x42	; 66
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	61 e0       	ldi	r22, 0x01	; 1
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	c1 f3       	breq	.-16     	; 0x2f8e <main+0xd34>
					//_delay_ms(250);
					
					first_digit = 2;
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	80 93 bb 00 	sts	0x00BB, r24
					second_digit = 0;
    2fa4:	10 92 bc 00 	sts	0x00BC, r1
					third_digit = 2;
    2fa8:	82 e0       	ldi	r24, 0x02	; 2
    2faa:	80 93 bd 00 	sts	0x00BD, r24
					fourth_digit = 4;
    2fae:	84 e0       	ldi	r24, 0x04	; 4
    2fb0:	80 93 be 00 	sts	0x00BE, r24
				//	_delay_ms(300);
					sendStrXY("year:----",X_OF_INPUT,Y_OF_INPUT + 1);
    2fb4:	8b e9       	ldi	r24, 0x9B	; 155
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	63 e0       	ldi	r22, 0x03	; 3
    2fba:	70 e0       	ldi	r23, 0x00	; 0
    2fbc:	44 e0       	ldi	r20, 0x04	; 4
    2fbe:	50 e0       	ldi	r21, 0x00	; 0
    2fc0:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <sendStrXY>
					firstdigityear:
					do
					{
						
						sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT + 6);
    2fc4:	80 91 bb 00 	lds	r24, 0x00BB
    2fc8:	80 5d       	subi	r24, 0xD0	; 208
    2fca:	63 e0       	ldi	r22, 0x03	; 3
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	49 e0       	ldi	r20, 0x09	; 9
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						do{
							button2 = button_read('B',1);
    2fd6:	82 e4       	ldi	r24, 0x42	; 66
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	61 e0       	ldi	r22, 0x01	; 1
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2fe2:	80 93 69 00 	sts	0x0069, r24
							button3 = button_read('B',2);
    2fe6:	82 e4       	ldi	r24, 0x42	; 66
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	62 e0       	ldi	r22, 0x02	; 2
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2ff2:	80 93 6a 00 	sts	0x006A, r24
							button4 = button_read('B',3);
    2ff6:	82 e4       	ldi	r24, 0x42	; 66
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	63 e0       	ldi	r22, 0x03	; 3
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3002:	80 93 6b 00 	sts	0x006B, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED);
    3006:	80 91 6a 00 	lds	r24, 0x006A
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	41 f4       	brne	.+16     	; 0x301e <main+0xdc4>
    300e:	80 91 6b 00 	lds	r24, 0x006B
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	21 f4       	brne	.+8      	; 0x301e <main+0xdc4>
    3016:	80 91 69 00 	lds	r24, 0x0069
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	e1 f2       	breq	.-72     	; 0x2fd6 <main+0xd7c>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    301e:	00 00       	nop
    3020:	82 e4       	ldi	r24, 0x42	; 66
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	63 e0       	ldi	r22, 0x03	; 3
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	c1 f3       	breq	.-16     	; 0x3020 <main+0xdc6>
    3030:	82 e4       	ldi	r24, 0x42	; 66
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	62 e0       	ldi	r22, 0x02	; 2
    3036:	70 e0       	ldi	r23, 0x00	; 0
    3038:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	81 f3       	breq	.-32     	; 0x3020 <main+0xdc6>
						//_delay_ms(250);
						if(button3 == PRESSED && first_digit < 2)
    3040:	80 91 6a 00 	lds	r24, 0x006A
    3044:	88 23       	and	r24, r24
    3046:	51 f4       	brne	.+20     	; 0x305c <main+0xe02>
    3048:	80 91 bb 00 	lds	r24, 0x00BB
    304c:	82 30       	cpi	r24, 0x02	; 2
    304e:	30 f4       	brcc	.+12     	; 0x305c <main+0xe02>
						{
							first_digit++;
    3050:	80 91 bb 00 	lds	r24, 0x00BB
    3054:	8f 5f       	subi	r24, 0xFF	; 255
    3056:	80 93 bb 00 	sts	0x00BB, r24
    305a:	0d c0       	rjmp	.+26     	; 0x3076 <main+0xe1c>
						}
						else if(button4 == PRESSED && first_digit > 1)
    305c:	80 91 6b 00 	lds	r24, 0x006B
    3060:	88 23       	and	r24, r24
    3062:	49 f4       	brne	.+18     	; 0x3076 <main+0xe1c>
    3064:	80 91 bb 00 	lds	r24, 0x00BB
    3068:	82 30       	cpi	r24, 0x02	; 2
    306a:	28 f0       	brcs	.+10     	; 0x3076 <main+0xe1c>
						{
							first_digit--;
    306c:	80 91 bb 00 	lds	r24, 0x00BB
    3070:	81 50       	subi	r24, 0x01	; 1
    3072:	80 93 bb 00 	sts	0x00BB, r24
						}

					}while(button_read('B',1) == NOTPRESSED);
    3076:	82 e4       	ldi	r24, 0x42	; 66
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	61 e0       	ldi	r22, 0x01	; 1
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	91 05       	cpc	r25, r1
    3086:	09 f4       	brne	.+2      	; 0x308a <main+0xe30>
    3088:	9d cf       	rjmp	.-198    	; 0x2fc4 <main+0xd6a>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    308a:	00 00       	nop
    308c:	82 e4       	ldi	r24, 0x42	; 66
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	c1 f3       	breq	.-16     	; 0x308c <main+0xe32>
				//	_delay_ms(250);
					seconddigityear:
					do{
						
						sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT + 7);
    309c:	80 91 bc 00 	lds	r24, 0x00BC
    30a0:	80 5d       	subi	r24, 0xD0	; 208
    30a2:	63 e0       	ldi	r22, 0x03	; 3
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	4a e0       	ldi	r20, 0x0A	; 10
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						do{
							button2 = button_read('B',1);
    30ae:	82 e4       	ldi	r24, 0x42	; 66
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    30ba:	80 93 69 00 	sts	0x0069, r24
							button3 = button_read('B',2);
    30be:	82 e4       	ldi	r24, 0x42	; 66
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	62 e0       	ldi	r22, 0x02	; 2
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    30ca:	80 93 6a 00 	sts	0x006A, r24
							button4 = button_read('B',3);
    30ce:	82 e4       	ldi	r24, 0x42	; 66
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	70 e0       	ldi	r23, 0x00	; 0
    30d6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    30da:	80 93 6b 00 	sts	0x006B, r24
							button7 = button_read('B',6);
    30de:	82 e4       	ldi	r24, 0x42	; 66
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	66 e0       	ldi	r22, 0x06	; 6
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    30ea:	80 93 6e 00 	sts	0x006E, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    30ee:	80 91 6a 00 	lds	r24, 0x006A
    30f2:	81 30       	cpi	r24, 0x01	; 1
    30f4:	61 f4       	brne	.+24     	; 0x310e <main+0xeb4>
    30f6:	80 91 6b 00 	lds	r24, 0x006B
    30fa:	81 30       	cpi	r24, 0x01	; 1
    30fc:	41 f4       	brne	.+16     	; 0x310e <main+0xeb4>
    30fe:	80 91 69 00 	lds	r24, 0x0069
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	21 f4       	brne	.+8      	; 0x310e <main+0xeb4>
    3106:	80 91 6e 00 	lds	r24, 0x006E
    310a:	81 30       	cpi	r24, 0x01	; 1
    310c:	81 f2       	breq	.-96     	; 0x30ae <main+0xe54>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    310e:	00 00       	nop
    3110:	82 e4       	ldi	r24, 0x42	; 66
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	63 e0       	ldi	r22, 0x03	; 3
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	c1 f3       	breq	.-16     	; 0x3110 <main+0xeb6>
    3120:	82 e4       	ldi	r24, 0x42	; 66
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	62 e0       	ldi	r22, 0x02	; 2
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	81 f3       	breq	.-32     	; 0x3110 <main+0xeb6>
    3130:	82 e4       	ldi	r24, 0x42	; 66
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	66 e0       	ldi	r22, 0x06	; 6
    3136:	70 e0       	ldi	r23, 0x00	; 0
    3138:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	41 f3       	breq	.-48     	; 0x3110 <main+0xeb6>
					//	_delay_ms(250);
						if(button3 == PRESSED && second_digit < 9)
    3140:	80 91 6a 00 	lds	r24, 0x006A
    3144:	88 23       	and	r24, r24
    3146:	51 f4       	brne	.+20     	; 0x315c <main+0xf02>
    3148:	80 91 bc 00 	lds	r24, 0x00BC
    314c:	89 30       	cpi	r24, 0x09	; 9
    314e:	30 f4       	brcc	.+12     	; 0x315c <main+0xf02>
						{
							second_digit++;
    3150:	80 91 bc 00 	lds	r24, 0x00BC
    3154:	8f 5f       	subi	r24, 0xFF	; 255
    3156:	80 93 bc 00 	sts	0x00BC, r24
    315a:	1a c0       	rjmp	.+52     	; 0x3190 <main+0xf36>
						}
						else if(button4 == PRESSED && second_digit > 0)
    315c:	80 91 6b 00 	lds	r24, 0x006B
    3160:	88 23       	and	r24, r24
    3162:	51 f4       	brne	.+20     	; 0x3178 <main+0xf1e>
    3164:	80 91 bc 00 	lds	r24, 0x00BC
    3168:	88 23       	and	r24, r24
    316a:	31 f0       	breq	.+12     	; 0x3178 <main+0xf1e>
						{
							second_digit--;
    316c:	80 91 bc 00 	lds	r24, 0x00BC
    3170:	81 50       	subi	r24, 0x01	; 1
    3172:	80 93 bc 00 	sts	0x00BC, r24
    3176:	0c c0       	rjmp	.+24     	; 0x3190 <main+0xf36>
						}
						else if(button7 == PRESSED)
    3178:	80 91 6e 00 	lds	r24, 0x006E
    317c:	88 23       	and	r24, r24
    317e:	41 f4       	brne	.+16     	; 0x3190 <main+0xf36>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 7);
    3180:	8d e2       	ldi	r24, 0x2D	; 45
    3182:	63 e0       	ldi	r22, 0x03	; 3
    3184:	70 e0       	ldi	r23, 0x00	; 0
    3186:	4a e0       	ldi	r20, 0x0A	; 10
    3188:	50 e0       	ldi	r21, 0x00	; 0
    318a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
							goto firstdigityear;
    318e:	1a cf       	rjmp	.-460    	; 0x2fc4 <main+0xd6a>
						}
						
					}while(button_read('B',1) == NOTPRESSED);
    3190:	82 e4       	ldi	r24, 0x42	; 66
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	61 e0       	ldi	r22, 0x01	; 1
    3196:	70 e0       	ldi	r23, 0x00	; 0
    3198:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    319c:	81 30       	cpi	r24, 0x01	; 1
    319e:	91 05       	cpc	r25, r1
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <main+0xf4a>
    31a2:	7c cf       	rjmp	.-264    	; 0x309c <main+0xe42>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    31a4:	00 00       	nop
    31a6:	82 e4       	ldi	r24, 0x42	; 66
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	61 e0       	ldi	r22, 0x01	; 1
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	c1 f3       	breq	.-16     	; 0x31a6 <main+0xf4c>
				//	_delay_ms(250);
					thirddigityear:
					do
					{
						
						sendCharXY(third_digit + 48,X_OF_INPUT,Y_OF_INPUT + 8);
    31b6:	80 91 bd 00 	lds	r24, 0x00BD
    31ba:	80 5d       	subi	r24, 0xD0	; 208
    31bc:	63 e0       	ldi	r22, 0x03	; 3
    31be:	70 e0       	ldi	r23, 0x00	; 0
    31c0:	4b e0       	ldi	r20, 0x0B	; 11
    31c2:	50 e0       	ldi	r21, 0x00	; 0
    31c4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						do{
							button2 = button_read('B',1);
    31c8:	82 e4       	ldi	r24, 0x42	; 66
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	61 e0       	ldi	r22, 0x01	; 1
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    31d4:	80 93 69 00 	sts	0x0069, r24
							button3 = button_read('B',2);
    31d8:	82 e4       	ldi	r24, 0x42	; 66
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	62 e0       	ldi	r22, 0x02	; 2
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    31e4:	80 93 6a 00 	sts	0x006A, r24
							button4 = button_read('B',3);
    31e8:	82 e4       	ldi	r24, 0x42	; 66
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	63 e0       	ldi	r22, 0x03	; 3
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    31f4:	80 93 6b 00 	sts	0x006B, r24
							button7 = button_read('B',6);
    31f8:	82 e4       	ldi	r24, 0x42	; 66
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	66 e0       	ldi	r22, 0x06	; 6
    31fe:	70 e0       	ldi	r23, 0x00	; 0
    3200:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3204:	80 93 6e 00 	sts	0x006E, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    3208:	80 91 6a 00 	lds	r24, 0x006A
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	61 f4       	brne	.+24     	; 0x3228 <main+0xfce>
    3210:	80 91 6b 00 	lds	r24, 0x006B
    3214:	81 30       	cpi	r24, 0x01	; 1
    3216:	41 f4       	brne	.+16     	; 0x3228 <main+0xfce>
    3218:	80 91 69 00 	lds	r24, 0x0069
    321c:	81 30       	cpi	r24, 0x01	; 1
    321e:	21 f4       	brne	.+8      	; 0x3228 <main+0xfce>
    3220:	80 91 6e 00 	lds	r24, 0x006E
    3224:	81 30       	cpi	r24, 0x01	; 1
    3226:	81 f2       	breq	.-96     	; 0x31c8 <main+0xf6e>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    3228:	00 00       	nop
    322a:	82 e4       	ldi	r24, 0x42	; 66
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	63 e0       	ldi	r22, 0x03	; 3
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	c1 f3       	breq	.-16     	; 0x322a <main+0xfd0>
    323a:	82 e4       	ldi	r24, 0x42	; 66
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	62 e0       	ldi	r22, 0x02	; 2
    3240:	70 e0       	ldi	r23, 0x00	; 0
    3242:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	81 f3       	breq	.-32     	; 0x322a <main+0xfd0>
    324a:	82 e4       	ldi	r24, 0x42	; 66
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	66 e0       	ldi	r22, 0x06	; 6
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	41 f3       	breq	.-48     	; 0x322a <main+0xfd0>
					//	_delay_ms(250);
						if(button3 == PRESSED && third_digit < 9)
    325a:	80 91 6a 00 	lds	r24, 0x006A
    325e:	88 23       	and	r24, r24
    3260:	51 f4       	brne	.+20     	; 0x3276 <main+0x101c>
    3262:	80 91 bd 00 	lds	r24, 0x00BD
    3266:	89 30       	cpi	r24, 0x09	; 9
    3268:	30 f4       	brcc	.+12     	; 0x3276 <main+0x101c>
						{
							third_digit++;
    326a:	80 91 bd 00 	lds	r24, 0x00BD
    326e:	8f 5f       	subi	r24, 0xFF	; 255
    3270:	80 93 bd 00 	sts	0x00BD, r24
    3274:	1a c0       	rjmp	.+52     	; 0x32aa <main+0x1050>
						}
						else if(button4 == PRESSED && third_digit > 0)
    3276:	80 91 6b 00 	lds	r24, 0x006B
    327a:	88 23       	and	r24, r24
    327c:	51 f4       	brne	.+20     	; 0x3292 <main+0x1038>
    327e:	80 91 bd 00 	lds	r24, 0x00BD
    3282:	88 23       	and	r24, r24
    3284:	31 f0       	breq	.+12     	; 0x3292 <main+0x1038>
						{
							third_digit--;
    3286:	80 91 bd 00 	lds	r24, 0x00BD
    328a:	81 50       	subi	r24, 0x01	; 1
    328c:	80 93 bd 00 	sts	0x00BD, r24
    3290:	0c c0       	rjmp	.+24     	; 0x32aa <main+0x1050>
						}
						else if(button7 == PRESSED)
    3292:	80 91 6e 00 	lds	r24, 0x006E
    3296:	88 23       	and	r24, r24
    3298:	41 f4       	brne	.+16     	; 0x32aa <main+0x1050>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 8);
    329a:	8d e2       	ldi	r24, 0x2D	; 45
    329c:	63 e0       	ldi	r22, 0x03	; 3
    329e:	70 e0       	ldi	r23, 0x00	; 0
    32a0:	4b e0       	ldi	r20, 0x0B	; 11
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
							goto seconddigityear;
    32a8:	f9 ce       	rjmp	.-526    	; 0x309c <main+0xe42>
						}
					}while(button_read('B',1) == NOTPRESSED);
    32aa:	82 e4       	ldi	r24, 0x42	; 66
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	61 e0       	ldi	r22, 0x01	; 1
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    32b6:	81 30       	cpi	r24, 0x01	; 1
    32b8:	91 05       	cpc	r25, r1
    32ba:	09 f4       	brne	.+2      	; 0x32be <main+0x1064>
    32bc:	7c cf       	rjmp	.-264    	; 0x31b6 <main+0xf5c>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    32be:	00 00       	nop
    32c0:	82 e4       	ldi	r24, 0x42	; 66
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	70 e0       	ldi	r23, 0x00	; 0
    32c8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	c1 f3       	breq	.-16     	; 0x32c0 <main+0x1066>
				//	_delay_ms(250);
					
					do
					{
						sendCharXY(fourth_digit + 48,X_OF_INPUT,Y_OF_INPUT + 9);
    32d0:	80 91 be 00 	lds	r24, 0x00BE
    32d4:	80 5d       	subi	r24, 0xD0	; 208
    32d6:	63 e0       	ldi	r22, 0x03	; 3
    32d8:	70 e0       	ldi	r23, 0x00	; 0
    32da:	4c e0       	ldi	r20, 0x0C	; 12
    32dc:	50 e0       	ldi	r21, 0x00	; 0
    32de:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						do{
							button2 = button_read('B',1);
    32e2:	82 e4       	ldi	r24, 0x42	; 66
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	61 e0       	ldi	r22, 0x01	; 1
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    32ee:	80 93 69 00 	sts	0x0069, r24
							button3 = button_read('B',2);
    32f2:	82 e4       	ldi	r24, 0x42	; 66
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	62 e0       	ldi	r22, 0x02	; 2
    32f8:	70 e0       	ldi	r23, 0x00	; 0
    32fa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    32fe:	80 93 6a 00 	sts	0x006A, r24
							button4 = button_read('B',3);
    3302:	82 e4       	ldi	r24, 0x42	; 66
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	63 e0       	ldi	r22, 0x03	; 3
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    330e:	80 93 6b 00 	sts	0x006B, r24
							button7 = button_read('B',6);
    3312:	82 e4       	ldi	r24, 0x42	; 66
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	66 e0       	ldi	r22, 0x06	; 6
    3318:	70 e0       	ldi	r23, 0x00	; 0
    331a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    331e:	80 93 6e 00 	sts	0x006E, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    3322:	80 91 6a 00 	lds	r24, 0x006A
    3326:	81 30       	cpi	r24, 0x01	; 1
    3328:	61 f4       	brne	.+24     	; 0x3342 <main+0x10e8>
    332a:	80 91 6b 00 	lds	r24, 0x006B
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	41 f4       	brne	.+16     	; 0x3342 <main+0x10e8>
    3332:	80 91 69 00 	lds	r24, 0x0069
    3336:	81 30       	cpi	r24, 0x01	; 1
    3338:	21 f4       	brne	.+8      	; 0x3342 <main+0x10e8>
    333a:	80 91 6e 00 	lds	r24, 0x006E
    333e:	81 30       	cpi	r24, 0x01	; 1
    3340:	81 f2       	breq	.-96     	; 0x32e2 <main+0x1088>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    3342:	00 00       	nop
    3344:	82 e4       	ldi	r24, 0x42	; 66
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	63 e0       	ldi	r22, 0x03	; 3
    334a:	70 e0       	ldi	r23, 0x00	; 0
    334c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	c1 f3       	breq	.-16     	; 0x3344 <main+0x10ea>
    3354:	82 e4       	ldi	r24, 0x42	; 66
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	62 e0       	ldi	r22, 0x02	; 2
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3360:	00 97       	sbiw	r24, 0x00	; 0
    3362:	81 f3       	breq	.-32     	; 0x3344 <main+0x10ea>
    3364:	82 e4       	ldi	r24, 0x42	; 66
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	66 e0       	ldi	r22, 0x06	; 6
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	41 f3       	breq	.-48     	; 0x3344 <main+0x10ea>
					//	_delay_ms(250);
						if(button3 == PRESSED && fourth_digit < 9)
    3374:	80 91 6a 00 	lds	r24, 0x006A
    3378:	88 23       	and	r24, r24
    337a:	51 f4       	brne	.+20     	; 0x3390 <main+0x1136>
    337c:	80 91 be 00 	lds	r24, 0x00BE
    3380:	89 30       	cpi	r24, 0x09	; 9
    3382:	30 f4       	brcc	.+12     	; 0x3390 <main+0x1136>
						{
							fourth_digit++;
    3384:	80 91 be 00 	lds	r24, 0x00BE
    3388:	8f 5f       	subi	r24, 0xFF	; 255
    338a:	80 93 be 00 	sts	0x00BE, r24
    338e:	1a c0       	rjmp	.+52     	; 0x33c4 <main+0x116a>
						}
						else if(button4 == PRESSED && fourth_digit > 0)
    3390:	80 91 6b 00 	lds	r24, 0x006B
    3394:	88 23       	and	r24, r24
    3396:	51 f4       	brne	.+20     	; 0x33ac <main+0x1152>
    3398:	80 91 be 00 	lds	r24, 0x00BE
    339c:	88 23       	and	r24, r24
    339e:	31 f0       	breq	.+12     	; 0x33ac <main+0x1152>
						{
							first_digit--;
    33a0:	80 91 bb 00 	lds	r24, 0x00BB
    33a4:	81 50       	subi	r24, 0x01	; 1
    33a6:	80 93 bb 00 	sts	0x00BB, r24
    33aa:	0c c0       	rjmp	.+24     	; 0x33c4 <main+0x116a>
						}
						else if(button7 == PRESSED)
    33ac:	80 91 6e 00 	lds	r24, 0x006E
    33b0:	88 23       	and	r24, r24
    33b2:	41 f4       	brne	.+16     	; 0x33c4 <main+0x116a>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 9);
    33b4:	8d e2       	ldi	r24, 0x2D	; 45
    33b6:	63 e0       	ldi	r22, 0x03	; 3
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	4c e0       	ldi	r20, 0x0C	; 12
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
							goto thirddigityear;
    33c2:	f9 ce       	rjmp	.-526    	; 0x31b6 <main+0xf5c>
						}
						
					}while(button_read('B',1) == NOTPRESSED);
    33c4:	82 e4       	ldi	r24, 0x42	; 66
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	61 e0       	ldi	r22, 0x01	; 1
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    33d0:	81 30       	cpi	r24, 0x01	; 1
    33d2:	91 05       	cpc	r25, r1
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <main+0x117e>
    33d6:	7c cf       	rjmp	.-264    	; 0x32d0 <main+0x1076>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    33d8:	00 00       	nop
    33da:	82 e4       	ldi	r24, 0x42	; 66
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	61 e0       	ldi	r22, 0x01	; 1
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	c1 f3       	breq	.-16     	; 0x33da <main+0x1180>
					//_delay_ms(250);
					year_counter = (first_digit * 1000) + (second_digit * 100) + (third_digit * 10) + fourth_digit;
    33ea:	80 91 bb 00 	lds	r24, 0x00BB
    33ee:	48 2f       	mov	r20, r24
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	88 ee       	ldi	r24, 0xE8	; 232
    33f4:	93 e0       	ldi	r25, 0x03	; 3
    33f6:	48 9f       	mul	r20, r24
    33f8:	90 01       	movw	r18, r0
    33fa:	49 9f       	mul	r20, r25
    33fc:	30 0d       	add	r19, r0
    33fe:	58 9f       	mul	r21, r24
    3400:	30 0d       	add	r19, r0
    3402:	11 24       	eor	r1, r1
    3404:	80 91 bc 00 	lds	r24, 0x00BC
    3408:	68 2f       	mov	r22, r24
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	44 e6       	ldi	r20, 0x64	; 100
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	64 9f       	mul	r22, r20
    3412:	c0 01       	movw	r24, r0
    3414:	65 9f       	mul	r22, r21
    3416:	90 0d       	add	r25, r0
    3418:	74 9f       	mul	r23, r20
    341a:	90 0d       	add	r25, r0
    341c:	11 24       	eor	r1, r1
    341e:	28 0f       	add	r18, r24
    3420:	39 1f       	adc	r19, r25
    3422:	80 91 bd 00 	lds	r24, 0x00BD
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	88 0f       	add	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	ac 01       	movw	r20, r24
    3430:	44 0f       	add	r20, r20
    3432:	55 1f       	adc	r21, r21
    3434:	44 0f       	add	r20, r20
    3436:	55 1f       	adc	r21, r21
    3438:	84 0f       	add	r24, r20
    343a:	95 1f       	adc	r25, r21
    343c:	28 0f       	add	r18, r24
    343e:	39 1f       	adc	r19, r25
    3440:	80 91 be 00 	lds	r24, 0x00BE
    3444:	88 2f       	mov	r24, r24
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	82 0f       	add	r24, r18
    344a:	93 1f       	adc	r25, r19
    344c:	90 93 67 00 	sts	0x0067, r25
    3450:	80 93 66 00 	sts	0x0066, r24
					
					
					clear_display();
    3454:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear_display>
					first_digit = 0;
    3458:	10 92 bb 00 	sts	0x00BB, r1
					second_digit = 1;
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	80 93 bc 00 	sts	0x00BC, r24
					//_delay_ms(300);
					sendStrXY("month:--",X_OF_INPUT,Y_OF_INPUT + 1);
    3462:	85 ea       	ldi	r24, 0xA5	; 165
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	63 e0       	ldi	r22, 0x03	; 3
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	44 e0       	ldi	r20, 0x04	; 4
    346c:	50 e0       	ldi	r21, 0x00	; 0
    346e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <sendStrXY>
					do
					{
						firstdigitmonth:
						sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT + 7);
    3472:	80 91 bb 00 	lds	r24, 0x00BB
    3476:	80 5d       	subi	r24, 0xD0	; 208
    3478:	63 e0       	ldi	r22, 0x03	; 3
    347a:	70 e0       	ldi	r23, 0x00	; 0
    347c:	4a e0       	ldi	r20, 0x0A	; 10
    347e:	50 e0       	ldi	r21, 0x00	; 0
    3480:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						do{
							button2 = button_read('B',1);
    3484:	82 e4       	ldi	r24, 0x42	; 66
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	61 e0       	ldi	r22, 0x01	; 1
    348a:	70 e0       	ldi	r23, 0x00	; 0
    348c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3490:	80 93 69 00 	sts	0x0069, r24
							button3 = button_read('B',2);
    3494:	82 e4       	ldi	r24, 0x42	; 66
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	62 e0       	ldi	r22, 0x02	; 2
    349a:	70 e0       	ldi	r23, 0x00	; 0
    349c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    34a0:	80 93 6a 00 	sts	0x006A, r24
							button4 = button_read('B',3);
    34a4:	82 e4       	ldi	r24, 0x42	; 66
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	63 e0       	ldi	r22, 0x03	; 3
    34aa:	70 e0       	ldi	r23, 0x00	; 0
    34ac:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    34b0:	80 93 6b 00 	sts	0x006B, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED);
    34b4:	80 91 6a 00 	lds	r24, 0x006A
    34b8:	81 30       	cpi	r24, 0x01	; 1
    34ba:	41 f4       	brne	.+16     	; 0x34cc <main+0x1272>
    34bc:	80 91 6b 00 	lds	r24, 0x006B
    34c0:	81 30       	cpi	r24, 0x01	; 1
    34c2:	21 f4       	brne	.+8      	; 0x34cc <main+0x1272>
    34c4:	80 91 69 00 	lds	r24, 0x0069
    34c8:	81 30       	cpi	r24, 0x01	; 1
    34ca:	e1 f2       	breq	.-72     	; 0x3484 <main+0x122a>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    34cc:	00 00       	nop
    34ce:	82 e4       	ldi	r24, 0x42	; 66
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	63 e0       	ldi	r22, 0x03	; 3
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	c1 f3       	breq	.-16     	; 0x34ce <main+0x1274>
    34de:	82 e4       	ldi	r24, 0x42	; 66
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	62 e0       	ldi	r22, 0x02	; 2
    34e4:	70 e0       	ldi	r23, 0x00	; 0
    34e6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	81 f3       	breq	.-32     	; 0x34ce <main+0x1274>
					//	_delay_ms(250);
						if(button3 == PRESSED && first_digit < 1)
    34ee:	80 91 6a 00 	lds	r24, 0x006A
    34f2:	88 23       	and	r24, r24
    34f4:	51 f4       	brne	.+20     	; 0x350a <main+0x12b0>
    34f6:	80 91 bb 00 	lds	r24, 0x00BB
    34fa:	88 23       	and	r24, r24
    34fc:	31 f4       	brne	.+12     	; 0x350a <main+0x12b0>
						{
							first_digit++;
    34fe:	80 91 bb 00 	lds	r24, 0x00BB
    3502:	8f 5f       	subi	r24, 0xFF	; 255
    3504:	80 93 bb 00 	sts	0x00BB, r24
    3508:	15 c0       	rjmp	.+42     	; 0x3534 <main+0x12da>
						}
						else if(button4 == PRESSED && ((first_digit > 0 && second_digit > 0) || first_digit > 1))
    350a:	80 91 6b 00 	lds	r24, 0x006B
    350e:	88 23       	and	r24, r24
    3510:	89 f4       	brne	.+34     	; 0x3534 <main+0x12da>
    3512:	80 91 bb 00 	lds	r24, 0x00BB
    3516:	88 23       	and	r24, r24
    3518:	21 f0       	breq	.+8      	; 0x3522 <main+0x12c8>
    351a:	80 91 bc 00 	lds	r24, 0x00BC
    351e:	88 23       	and	r24, r24
    3520:	21 f4       	brne	.+8      	; 0x352a <main+0x12d0>
    3522:	80 91 bb 00 	lds	r24, 0x00BB
    3526:	82 30       	cpi	r24, 0x02	; 2
    3528:	28 f0       	brcs	.+10     	; 0x3534 <main+0x12da>
						{
							first_digit--;
    352a:	80 91 bb 00 	lds	r24, 0x00BB
    352e:	81 50       	subi	r24, 0x01	; 1
    3530:	80 93 bb 00 	sts	0x00BB, r24
						}
						
					}while(button2 == NOTPRESSED);
    3534:	80 91 69 00 	lds	r24, 0x0069
    3538:	81 30       	cpi	r24, 0x01	; 1
    353a:	09 f4       	brne	.+2      	; 0x353e <main+0x12e4>
    353c:	9a cf       	rjmp	.-204    	; 0x3472 <main+0x1218>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    353e:	00 00       	nop
    3540:	82 e4       	ldi	r24, 0x42	; 66
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	70 e0       	ldi	r23, 0x00	; 0
    3548:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	c1 f3       	breq	.-16     	; 0x3540 <main+0x12e6>
					//_delay_ms(250);
					do{
						
						sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT + 8);
    3550:	80 91 bc 00 	lds	r24, 0x00BC
    3554:	80 5d       	subi	r24, 0xD0	; 208
    3556:	63 e0       	ldi	r22, 0x03	; 3
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	4b e0       	ldi	r20, 0x0B	; 11
    355c:	50 e0       	ldi	r21, 0x00	; 0
    355e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						do{
							button2 = button_read('B',1);
    3562:	82 e4       	ldi	r24, 0x42	; 66
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	61 e0       	ldi	r22, 0x01	; 1
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    356e:	80 93 69 00 	sts	0x0069, r24
							button3 = button_read('B',2);
    3572:	82 e4       	ldi	r24, 0x42	; 66
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	62 e0       	ldi	r22, 0x02	; 2
    3578:	70 e0       	ldi	r23, 0x00	; 0
    357a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    357e:	80 93 6a 00 	sts	0x006A, r24
							button4 = button_read('B',3);
    3582:	82 e4       	ldi	r24, 0x42	; 66
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	63 e0       	ldi	r22, 0x03	; 3
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    358e:	80 93 6b 00 	sts	0x006B, r24
							button7 = button_read('B',6);
    3592:	82 e4       	ldi	r24, 0x42	; 66
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	66 e0       	ldi	r22, 0x06	; 6
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    359e:	80 93 6e 00 	sts	0x006E, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    35a2:	80 91 6a 00 	lds	r24, 0x006A
    35a6:	81 30       	cpi	r24, 0x01	; 1
    35a8:	61 f4       	brne	.+24     	; 0x35c2 <main+0x1368>
    35aa:	80 91 6b 00 	lds	r24, 0x006B
    35ae:	81 30       	cpi	r24, 0x01	; 1
    35b0:	41 f4       	brne	.+16     	; 0x35c2 <main+0x1368>
    35b2:	80 91 69 00 	lds	r24, 0x0069
    35b6:	81 30       	cpi	r24, 0x01	; 1
    35b8:	21 f4       	brne	.+8      	; 0x35c2 <main+0x1368>
    35ba:	80 91 6e 00 	lds	r24, 0x006E
    35be:	81 30       	cpi	r24, 0x01	; 1
    35c0:	81 f2       	breq	.-96     	; 0x3562 <main+0x1308>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    35c2:	00 00       	nop
    35c4:	82 e4       	ldi	r24, 0x42	; 66
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	63 e0       	ldi	r22, 0x03	; 3
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	c1 f3       	breq	.-16     	; 0x35c4 <main+0x136a>
    35d4:	82 e4       	ldi	r24, 0x42	; 66
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	62 e0       	ldi	r22, 0x02	; 2
    35da:	70 e0       	ldi	r23, 0x00	; 0
    35dc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	81 f3       	breq	.-32     	; 0x35c4 <main+0x136a>
    35e4:	82 e4       	ldi	r24, 0x42	; 66
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	66 e0       	ldi	r22, 0x06	; 6
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	41 f3       	breq	.-48     	; 0x35c4 <main+0x136a>
					//	_delay_ms(250);
						if(button3 == PRESSED && ((second_digit < 9 && first_digit == 0) || (second_digit<2 && first_digit == 1)) )
    35f4:	80 91 6a 00 	lds	r24, 0x006A
    35f8:	88 23       	and	r24, r24
    35fa:	b1 f4       	brne	.+44     	; 0x3628 <main+0x13ce>
    35fc:	80 91 bc 00 	lds	r24, 0x00BC
    3600:	89 30       	cpi	r24, 0x09	; 9
    3602:	20 f4       	brcc	.+8      	; 0x360c <main+0x13b2>
    3604:	80 91 bb 00 	lds	r24, 0x00BB
    3608:	88 23       	and	r24, r24
    360a:	41 f0       	breq	.+16     	; 0x361c <main+0x13c2>
    360c:	80 91 bc 00 	lds	r24, 0x00BC
    3610:	82 30       	cpi	r24, 0x02	; 2
    3612:	50 f4       	brcc	.+20     	; 0x3628 <main+0x13ce>
    3614:	80 91 bb 00 	lds	r24, 0x00BB
    3618:	81 30       	cpi	r24, 0x01	; 1
    361a:	31 f4       	brne	.+12     	; 0x3628 <main+0x13ce>
						{
							second_digit++;
    361c:	80 91 bc 00 	lds	r24, 0x00BC
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	80 93 bc 00 	sts	0x00BC, r24
    3626:	26 c0       	rjmp	.+76     	; 0x3674 <main+0x141a>
						}
						else if(button4 == PRESSED && ((second_digit > 0 && first_digit == 1) || (second_digit > 1 && first_digit == 0)))
    3628:	80 91 6b 00 	lds	r24, 0x006B
    362c:	88 23       	and	r24, r24
    362e:	b1 f4       	brne	.+44     	; 0x365c <main+0x1402>
    3630:	80 91 bc 00 	lds	r24, 0x00BC
    3634:	88 23       	and	r24, r24
    3636:	21 f0       	breq	.+8      	; 0x3640 <main+0x13e6>
    3638:	80 91 bb 00 	lds	r24, 0x00BB
    363c:	81 30       	cpi	r24, 0x01	; 1
    363e:	41 f0       	breq	.+16     	; 0x3650 <main+0x13f6>
    3640:	80 91 bc 00 	lds	r24, 0x00BC
    3644:	82 30       	cpi	r24, 0x02	; 2
    3646:	50 f0       	brcs	.+20     	; 0x365c <main+0x1402>
    3648:	80 91 bb 00 	lds	r24, 0x00BB
    364c:	88 23       	and	r24, r24
    364e:	31 f4       	brne	.+12     	; 0x365c <main+0x1402>
						{
							second_digit--;
    3650:	80 91 bc 00 	lds	r24, 0x00BC
    3654:	81 50       	subi	r24, 0x01	; 1
    3656:	80 93 bc 00 	sts	0x00BC, r24
    365a:	0c c0       	rjmp	.+24     	; 0x3674 <main+0x141a>
						}
						else if(button7 == PRESSED)
    365c:	80 91 6e 00 	lds	r24, 0x006E
    3660:	88 23       	and	r24, r24
    3662:	41 f4       	brne	.+16     	; 0x3674 <main+0x141a>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 8);
    3664:	8d e2       	ldi	r24, 0x2D	; 45
    3666:	63 e0       	ldi	r22, 0x03	; 3
    3668:	70 e0       	ldi	r23, 0x00	; 0
    366a:	4b e0       	ldi	r20, 0x0B	; 11
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
							goto firstdigitmonth;
    3672:	ff ce       	rjmp	.-514    	; 0x3472 <main+0x1218>
						}
					}while(button2 == NOTPRESSED);
    3674:	80 91 69 00 	lds	r24, 0x0069
    3678:	81 30       	cpi	r24, 0x01	; 1
    367a:	09 f4       	brne	.+2      	; 0x367e <main+0x1424>
    367c:	69 cf       	rjmp	.-302    	; 0x3550 <main+0x12f6>
					month_counter = (first_digit * 10) + second_digit;
    367e:	80 91 bb 00 	lds	r24, 0x00BB
    3682:	88 0f       	add	r24, r24
    3684:	98 2f       	mov	r25, r24
    3686:	99 0f       	add	r25, r25
    3688:	99 0f       	add	r25, r25
    368a:	98 0f       	add	r25, r24
    368c:	80 91 bc 00 	lds	r24, 0x00BC
    3690:	89 0f       	add	r24, r25
    3692:	80 93 65 00 	sts	0x0065, r24
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    3696:	00 00       	nop
    3698:	82 e4       	ldi	r24, 0x42	; 66
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	61 e0       	ldi	r22, 0x01	; 1
    369e:	70 e0       	ldi	r23, 0x00	; 0
    36a0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	c1 f3       	breq	.-16     	; 0x3698 <main+0x143e>
				//	_delay_ms(250);
					clear_display();
    36a8:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear_display>
					first_digit = 0;
    36ac:	10 92 bb 00 	sts	0x00BB, r1
					second_digit = 1;
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	80 93 bc 00 	sts	0x00BC, r24
				//	_delay_ms(300);
					sendStrXY("day:--",X_OF_INPUT,Y_OF_INPUT + 2);
    36b6:	8e ea       	ldi	r24, 0xAE	; 174
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	63 e0       	ldi	r22, 0x03	; 3
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	45 e0       	ldi	r20, 0x05	; 5
    36c0:	50 e0       	ldi	r21, 0x00	; 0
    36c2:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <sendStrXY>
					do{
						firstdigitday:
						sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT + 6);
    36c6:	80 91 bb 00 	lds	r24, 0x00BB
    36ca:	80 5d       	subi	r24, 0xD0	; 208
    36cc:	63 e0       	ldi	r22, 0x03	; 3
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	49 e0       	ldi	r20, 0x09	; 9
    36d2:	50 e0       	ldi	r21, 0x00	; 0
    36d4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						do{
							button2 = button_read('B',1);
    36d8:	82 e4       	ldi	r24, 0x42	; 66
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	61 e0       	ldi	r22, 0x01	; 1
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    36e4:	80 93 69 00 	sts	0x0069, r24
							button3 = button_read('B',2);
    36e8:	82 e4       	ldi	r24, 0x42	; 66
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	62 e0       	ldi	r22, 0x02	; 2
    36ee:	70 e0       	ldi	r23, 0x00	; 0
    36f0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    36f4:	80 93 6a 00 	sts	0x006A, r24
							button4 = button_read('B',3);
    36f8:	82 e4       	ldi	r24, 0x42	; 66
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	63 e0       	ldi	r22, 0x03	; 3
    36fe:	70 e0       	ldi	r23, 0x00	; 0
    3700:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3704:	80 93 6b 00 	sts	0x006B, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED);
    3708:	80 91 6a 00 	lds	r24, 0x006A
    370c:	81 30       	cpi	r24, 0x01	; 1
    370e:	41 f4       	brne	.+16     	; 0x3720 <main+0x14c6>
    3710:	80 91 6b 00 	lds	r24, 0x006B
    3714:	81 30       	cpi	r24, 0x01	; 1
    3716:	21 f4       	brne	.+8      	; 0x3720 <main+0x14c6>
    3718:	80 91 69 00 	lds	r24, 0x0069
    371c:	81 30       	cpi	r24, 0x01	; 1
    371e:	e1 f2       	breq	.-72     	; 0x36d8 <main+0x147e>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    3720:	00 00       	nop
    3722:	82 e4       	ldi	r24, 0x42	; 66
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	63 e0       	ldi	r22, 0x03	; 3
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	c1 f3       	breq	.-16     	; 0x3722 <main+0x14c8>
    3732:	82 e4       	ldi	r24, 0x42	; 66
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	62 e0       	ldi	r22, 0x02	; 2
    3738:	70 e0       	ldi	r23, 0x00	; 0
    373a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	81 f3       	breq	.-32     	; 0x3722 <main+0x14c8>
					//	_delay_ms(250);
						if(button3 == PRESSED && first_digit < 3)
    3742:	80 91 6a 00 	lds	r24, 0x006A
    3746:	88 23       	and	r24, r24
    3748:	51 f4       	brne	.+20     	; 0x375e <main+0x1504>
    374a:	80 91 bb 00 	lds	r24, 0x00BB
    374e:	83 30       	cpi	r24, 0x03	; 3
    3750:	30 f4       	brcc	.+12     	; 0x375e <main+0x1504>
						{
							first_digit++;
    3752:	80 91 bb 00 	lds	r24, 0x00BB
    3756:	8f 5f       	subi	r24, 0xFF	; 255
    3758:	80 93 bb 00 	sts	0x00BB, r24
    375c:	15 c0       	rjmp	.+42     	; 0x3788 <main+0x152e>
						}
						else if(button4 == PRESSED && ((first_digit > 0 && second_digit == 1) || (first_digit > 1)))
    375e:	80 91 6b 00 	lds	r24, 0x006B
    3762:	88 23       	and	r24, r24
    3764:	89 f4       	brne	.+34     	; 0x3788 <main+0x152e>
    3766:	80 91 bb 00 	lds	r24, 0x00BB
    376a:	88 23       	and	r24, r24
    376c:	21 f0       	breq	.+8      	; 0x3776 <main+0x151c>
    376e:	80 91 bc 00 	lds	r24, 0x00BC
    3772:	81 30       	cpi	r24, 0x01	; 1
    3774:	21 f0       	breq	.+8      	; 0x377e <main+0x1524>
    3776:	80 91 bb 00 	lds	r24, 0x00BB
    377a:	82 30       	cpi	r24, 0x02	; 2
    377c:	28 f0       	brcs	.+10     	; 0x3788 <main+0x152e>
						{
							first_digit--;
    377e:	80 91 bb 00 	lds	r24, 0x00BB
    3782:	81 50       	subi	r24, 0x01	; 1
    3784:	80 93 bb 00 	sts	0x00BB, r24
						}
					}while(button2 == NOTPRESSED);
    3788:	80 91 69 00 	lds	r24, 0x0069
    378c:	81 30       	cpi	r24, 0x01	; 1
    378e:	09 f4       	brne	.+2      	; 0x3792 <main+0x1538>
    3790:	9a cf       	rjmp	.-204    	; 0x36c6 <main+0x146c>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    3792:	00 00       	nop
    3794:	82 e4       	ldi	r24, 0x42	; 66
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	61 e0       	ldi	r22, 0x01	; 1
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	c1 f3       	breq	.-16     	; 0x3794 <main+0x153a>
				//	_delay_ms(250);
					do{
						sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT + 7);
    37a4:	80 91 bc 00 	lds	r24, 0x00BC
    37a8:	80 5d       	subi	r24, 0xD0	; 208
    37aa:	63 e0       	ldi	r22, 0x03	; 3
    37ac:	70 e0       	ldi	r23, 0x00	; 0
    37ae:	4a e0       	ldi	r20, 0x0A	; 10
    37b0:	50 e0       	ldi	r21, 0x00	; 0
    37b2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
						do{
							button2 = button_read('B',1);
    37b6:	82 e4       	ldi	r24, 0x42	; 66
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	61 e0       	ldi	r22, 0x01	; 1
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    37c2:	80 93 69 00 	sts	0x0069, r24
							button3 = button_read('B',2);
    37c6:	82 e4       	ldi	r24, 0x42	; 66
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	62 e0       	ldi	r22, 0x02	; 2
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    37d2:	80 93 6a 00 	sts	0x006A, r24
							button4 = button_read('B',3);
    37d6:	82 e4       	ldi	r24, 0x42	; 66
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	63 e0       	ldi	r22, 0x03	; 3
    37dc:	70 e0       	ldi	r23, 0x00	; 0
    37de:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    37e2:	80 93 6b 00 	sts	0x006B, r24
							button7 = button_read('B',6);
    37e6:	82 e4       	ldi	r24, 0x42	; 66
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	66 e0       	ldi	r22, 0x06	; 6
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    37f2:	80 93 6e 00 	sts	0x006E, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    37f6:	80 91 6a 00 	lds	r24, 0x006A
    37fa:	81 30       	cpi	r24, 0x01	; 1
    37fc:	61 f4       	brne	.+24     	; 0x3816 <main+0x15bc>
    37fe:	80 91 6b 00 	lds	r24, 0x006B
    3802:	81 30       	cpi	r24, 0x01	; 1
    3804:	41 f4       	brne	.+16     	; 0x3816 <main+0x15bc>
    3806:	80 91 69 00 	lds	r24, 0x0069
    380a:	81 30       	cpi	r24, 0x01	; 1
    380c:	21 f4       	brne	.+8      	; 0x3816 <main+0x15bc>
    380e:	80 91 6e 00 	lds	r24, 0x006E
    3812:	81 30       	cpi	r24, 0x01	; 1
    3814:	81 f2       	breq	.-96     	; 0x37b6 <main+0x155c>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    3816:	00 00       	nop
    3818:	82 e4       	ldi	r24, 0x42	; 66
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	63 e0       	ldi	r22, 0x03	; 3
    381e:	70 e0       	ldi	r23, 0x00	; 0
    3820:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	c1 f3       	breq	.-16     	; 0x3818 <main+0x15be>
    3828:	82 e4       	ldi	r24, 0x42	; 66
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	62 e0       	ldi	r22, 0x02	; 2
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	81 f3       	breq	.-32     	; 0x3818 <main+0x15be>
    3838:	82 e4       	ldi	r24, 0x42	; 66
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	66 e0       	ldi	r22, 0x06	; 6
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3844:	00 97       	sbiw	r24, 0x00	; 0
    3846:	41 f3       	breq	.-48     	; 0x3818 <main+0x15be>
				//		_delay_ms(250);
						if(button3 == PRESSED && ((second_digit < 9 && first_digit < 3) || (second_digit<1 && first_digit == 3)))
    3848:	80 91 6a 00 	lds	r24, 0x006A
    384c:	88 23       	and	r24, r24
    384e:	b1 f4       	brne	.+44     	; 0x387c <main+0x1622>
    3850:	80 91 bc 00 	lds	r24, 0x00BC
    3854:	89 30       	cpi	r24, 0x09	; 9
    3856:	20 f4       	brcc	.+8      	; 0x3860 <main+0x1606>
    3858:	80 91 bb 00 	lds	r24, 0x00BB
    385c:	83 30       	cpi	r24, 0x03	; 3
    385e:	40 f0       	brcs	.+16     	; 0x3870 <main+0x1616>
    3860:	80 91 bc 00 	lds	r24, 0x00BC
    3864:	88 23       	and	r24, r24
    3866:	51 f4       	brne	.+20     	; 0x387c <main+0x1622>
    3868:	80 91 bb 00 	lds	r24, 0x00BB
    386c:	83 30       	cpi	r24, 0x03	; 3
    386e:	31 f4       	brne	.+12     	; 0x387c <main+0x1622>
						{
							second_digit++;
    3870:	80 91 bc 00 	lds	r24, 0x00BC
    3874:	8f 5f       	subi	r24, 0xFF	; 255
    3876:	80 93 bc 00 	sts	0x00BC, r24
    387a:	26 c0       	rjmp	.+76     	; 0x38c8 <main+0x166e>
						}
						else if(button4 == PRESSED && ((second_digit > 0 && first_digit > 0) || (second_digit > 1 && first_digit == 0)))
    387c:	80 91 6b 00 	lds	r24, 0x006B
    3880:	88 23       	and	r24, r24
    3882:	b1 f4       	brne	.+44     	; 0x38b0 <main+0x1656>
    3884:	80 91 bc 00 	lds	r24, 0x00BC
    3888:	88 23       	and	r24, r24
    388a:	21 f0       	breq	.+8      	; 0x3894 <main+0x163a>
    388c:	80 91 bb 00 	lds	r24, 0x00BB
    3890:	88 23       	and	r24, r24
    3892:	41 f4       	brne	.+16     	; 0x38a4 <main+0x164a>
    3894:	80 91 bc 00 	lds	r24, 0x00BC
    3898:	82 30       	cpi	r24, 0x02	; 2
    389a:	50 f0       	brcs	.+20     	; 0x38b0 <main+0x1656>
    389c:	80 91 bb 00 	lds	r24, 0x00BB
    38a0:	88 23       	and	r24, r24
    38a2:	31 f4       	brne	.+12     	; 0x38b0 <main+0x1656>
						{
							second_digit--;
    38a4:	80 91 bc 00 	lds	r24, 0x00BC
    38a8:	81 50       	subi	r24, 0x01	; 1
    38aa:	80 93 bc 00 	sts	0x00BC, r24
    38ae:	0c c0       	rjmp	.+24     	; 0x38c8 <main+0x166e>
						}
						else if(button7 == PRESSED)
    38b0:	80 91 6e 00 	lds	r24, 0x006E
    38b4:	88 23       	and	r24, r24
    38b6:	41 f4       	brne	.+16     	; 0x38c8 <main+0x166e>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 7);
    38b8:	8d e2       	ldi	r24, 0x2D	; 45
    38ba:	63 e0       	ldi	r22, 0x03	; 3
    38bc:	70 e0       	ldi	r23, 0x00	; 0
    38be:	4a e0       	ldi	r20, 0x0A	; 10
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <sendCharXY>
							goto firstdigitday;
    38c6:	ff ce       	rjmp	.-514    	; 0x36c6 <main+0x146c>
						}
					}while(button_read('B',1) == NOTPRESSED);
    38c8:	82 e4       	ldi	r24, 0x42	; 66
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	70 e0       	ldi	r23, 0x00	; 0
    38d0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    38d4:	81 30       	cpi	r24, 0x01	; 1
    38d6:	91 05       	cpc	r25, r1
    38d8:	09 f4       	brne	.+2      	; 0x38dc <main+0x1682>
    38da:	64 cf       	rjmp	.-312    	; 0x37a4 <main+0x154a>
					day_counter = (first_digit * 10) + second_digit;
    38dc:	80 91 bb 00 	lds	r24, 0x00BB
    38e0:	88 0f       	add	r24, r24
    38e2:	98 2f       	mov	r25, r24
    38e4:	99 0f       	add	r25, r25
    38e6:	99 0f       	add	r25, r25
    38e8:	98 0f       	add	r25, r24
    38ea:	80 91 bc 00 	lds	r24, 0x00BC
    38ee:	89 0f       	add	r24, r25
    38f0:	80 93 64 00 	sts	0x0064, r24
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    38f4:	00 00       	nop
    38f6:	82 e4       	ldi	r24, 0x42	; 66
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	61 e0       	ldi	r22, 0x01	; 1
    38fc:	70 e0       	ldi	r23, 0x00	; 0
    38fe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3902:	00 97       	sbiw	r24, 0x00	; 0
    3904:	c1 f3       	breq	.-16     	; 0x38f6 <main+0x169c>
			//		_delay_ms(250);
					goto tempchange;
    3906:	0c 94 86 11 	jmp	0x230c	; 0x230c <main+0xb2>

0000390a <__vector_5>:
				}			 					
return 0;
}									 		

ISR(TIMER2_OVF_vect)
{
    390a:	1f 92       	push	r1
    390c:	0f 92       	push	r0
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	0f 92       	push	r0
    3912:	11 24       	eor	r1, r1
    3914:	8f 93       	push	r24
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
	seconds_counter++;
    391e:	80 91 b8 00 	lds	r24, 0x00B8
    3922:	8f 5f       	subi	r24, 0xFF	; 255
    3924:	80 93 b8 00 	sts	0x00B8, r24
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	8f 91       	pop	r24
    392e:	0f 90       	pop	r0
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	0f 90       	pop	r0
    3934:	1f 90       	pop	r1
    3936:	18 95       	reti

00003938 <ssd1306_command>:
#include "data.h"
#include "ssd1306.h"
uint8_t _i2c_address=0x78;    //display write address

void  ssd1306_command(uint8_t c)
{
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	00 d0       	rcall	.+0      	; 0x393e <ssd1306_command+0x6>
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t control = 0x00; // some use 0X00 other examples use 0X80. I tried both
    3944:	19 82       	std	Y+1, r1	; 0x01
	I2C_start();
    3946:	0e 94 fe 07 	call	0xffc	; 0xffc <I2C_start>
	//I2C_Write();
	I2C_write_address(_i2c_address);
    394a:	80 91 b5 00 	lds	r24, 0x00B5
    394e:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_write_address>
	I2C_write_data(control); // This is Command
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_write_data(c);
    3958:	8a 81       	ldd	r24, Y+2	; 0x02
    395a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_stop();
    395e:	0e 94 92 08 	call	0x1124	; 0x1124 <I2C_stop>
}
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	08 95       	ret

0000396c <ssd1306_data>:
////////////////////////////////////////////
//
void  ssd1306_data(uint8_t c)
{
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	0f 92       	push	r0
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	89 83       	std	Y+1, r24	; 0x01
	I2C_start();
    3978:	0e 94 fe 07 	call	0xffc	; 0xffc <I2C_start>
	I2C_write_address(_i2c_address);
    397c:	80 91 b5 00 	lds	r24, 0x00B5
    3980:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_write_address>
	I2C_write_data(0X40); // This byte is DATA
    3984:	80 e4       	ldi	r24, 0x40	; 64
    3986:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_write_data(c);
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_stop();
    3990:	0e 94 92 08 	call	0x1124	; 0x1124 <I2C_stop>
}
    3994:	0f 90       	pop	r0
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	08 95       	ret

0000399c <setColAddress>:
///////////////////////////////////////////////////
// Used when doing Horizontal or Vertical Addressing
void setColAddress()
{
    399c:	cf 93       	push	r28
    399e:	df 93       	push	r29
    39a0:	cd b7       	in	r28, 0x3d	; 61
    39a2:	de b7       	in	r29, 0x3e	; 62
	ssd1306_command(SSD1306_COLUMNADDR); // 0x21 COMMAND
    39a4:	81 e2       	ldi	r24, 0x21	; 33
    39a6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0); // Column start address
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address
    39b0:	8f e7       	ldi	r24, 0x7F	; 127
    39b2:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
}
    39b6:	df 91       	pop	r29
    39b8:	cf 91       	pop	r28
    39ba:	08 95       	ret

000039bc <setPageAddress>:
/////////////////////////////////////////////////////
// Used when doing Horizontal or Vertical Addressing
void setPageAddress()
{
    39bc:	cf 93       	push	r28
    39be:	df 93       	push	r29
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
	ssd1306_command(SSD1306_PAGEADDR); // 0x22 COMMAND
    39c4:	82 e2       	ldi	r24, 0x22	; 34
    39c6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0); // Start Page address
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command((SSD1306_LCDHEIGHT/8)-1);// End Page address
    39d0:	87 e0       	ldi	r24, 0x07	; 7
    39d2:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
}
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	08 95       	ret

000039dc <InitializeDisplay>:
///////////////////////////////////////////////////////////////////
// init according to SSD1306 data sheet and many places on the web
void  InitializeDisplay()
{
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
    39e8:	2e 97       	sbiw	r28, 0x0e	; 14
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
	DDRA|=(1<<DDA2)|(1<<DDA4);
    39f4:	8a e3       	ldi	r24, 0x3A	; 58
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	2a e3       	ldi	r18, 0x3A	; 58
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	f9 01       	movw	r30, r18
    39fe:	20 81       	ld	r18, Z
    3a00:	24 61       	ori	r18, 0x14	; 20
    3a02:	fc 01       	movw	r30, r24
    3a04:	20 83       	st	Z, r18
	PORTA|=(1<<PA2);
    3a06:	8b e3       	ldi	r24, 0x3B	; 59
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	2b e3       	ldi	r18, 0x3B	; 59
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	f9 01       	movw	r30, r18
    3a10:	20 81       	ld	r18, Z
    3a12:	24 60       	ori	r18, 0x04	; 4
    3a14:	fc 01       	movw	r30, r24
    3a16:	20 83       	st	Z, r18
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	a8 ec       	ldi	r26, 0xC8	; 200
    3a1e:	b2 e4       	ldi	r27, 0x42	; 66
    3a20:	89 83       	std	Y+1, r24	; 0x01
    3a22:	9a 83       	std	Y+2, r25	; 0x02
    3a24:	ab 83       	std	Y+3, r26	; 0x03
    3a26:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3a28:	69 81       	ldd	r22, Y+1	; 0x01
    3a2a:	7a 81       	ldd	r23, Y+2	; 0x02
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	4a ef       	ldi	r20, 0xFA	; 250
    3a36:	54 e4       	ldi	r21, 0x44	; 68
    3a38:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	8d 83       	std	Y+5, r24	; 0x05
    3a42:	9e 83       	std	Y+6, r25	; 0x06
    3a44:	af 83       	std	Y+7, r26	; 0x07
    3a46:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3a48:	11 e0       	ldi	r17, 0x01	; 1
    3a4a:	6d 81       	ldd	r22, Y+5	; 0x05
    3a4c:	7e 81       	ldd	r23, Y+6	; 0x06
    3a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a50:	98 85       	ldd	r25, Y+8	; 0x08
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 75 20 	call	0x40ea	; 0x40ea <__cmpsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	0c f0       	brlt	.+2      	; 0x3a64 <InitializeDisplay+0x88>
    3a62:	10 e0       	ldi	r17, 0x00	; 0
    3a64:	11 23       	and	r17, r17
    3a66:	29 f0       	breq	.+10     	; 0x3a72 <InitializeDisplay+0x96>
		__ticks = 1;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	9a 87       	std	Y+10, r25	; 0x0a
    3a6e:	89 87       	std	Y+9, r24	; 0x09
    3a70:	46 c0       	rjmp	.+140    	; 0x3afe <InitializeDisplay+0x122>
	else if (__tmp > 65535)
    3a72:	11 e0       	ldi	r17, 0x01	; 1
    3a74:	6d 81       	ldd	r22, Y+5	; 0x05
    3a76:	7e 81       	ldd	r23, Y+6	; 0x06
    3a78:	8f 81       	ldd	r24, Y+7	; 0x07
    3a7a:	98 85       	ldd	r25, Y+8	; 0x08
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	3f ef       	ldi	r19, 0xFF	; 255
    3a80:	4f e7       	ldi	r20, 0x7F	; 127
    3a82:	57 e4       	ldi	r21, 0x47	; 71
    3a84:	0e 94 2f 21 	call	0x425e	; 0x425e <__gesf2>
    3a88:	18 16       	cp	r1, r24
    3a8a:	0c f0       	brlt	.+2      	; 0x3a8e <InitializeDisplay+0xb2>
    3a8c:	10 e0       	ldi	r17, 0x00	; 0
    3a8e:	11 23       	and	r17, r17
    3a90:	61 f1       	breq	.+88     	; 0x3aea <InitializeDisplay+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a92:	69 81       	ldd	r22, Y+1	; 0x01
    3a94:	7a 81       	ldd	r23, Y+2	; 0x02
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e2       	ldi	r20, 0x20	; 32
    3aa0:	51 e4       	ldi	r21, 0x41	; 65
    3aa2:	0e 94 33 21 	call	0x4266	; 0x4266 <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9a 87       	std	Y+10, r25	; 0x0a
    3ab8:	89 87       	std	Y+9, r24	; 0x09
    3aba:	12 c0       	rjmp	.+36     	; 0x3ae0 <InitializeDisplay+0x104>
    3abc:	88 ec       	ldi	r24, 0xC8	; 200
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	9c 87       	std	Y+12, r25	; 0x0c
    3ac2:	8b 87       	std	Y+11, r24	; 0x0b
    3ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ac6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ac8:	8c 01       	movw	r16, r24
    3aca:	c8 01       	movw	r24, r16
    3acc:	01 97       	sbiw	r24, 0x01	; 1
    3ace:	f1 f7       	brne	.-4      	; 0x3acc <InitializeDisplay+0xf0>
    3ad0:	8c 01       	movw	r16, r24
    3ad2:	1c 87       	std	Y+12, r17	; 0x0c
    3ad4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad6:	89 85       	ldd	r24, Y+9	; 0x09
    3ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	9a 87       	std	Y+10, r25	; 0x0a
    3ade:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae0:	89 85       	ldd	r24, Y+9	; 0x09
    3ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae4:	00 97       	sbiw	r24, 0x00	; 0
    3ae6:	51 f7       	brne	.-44     	; 0x3abc <InitializeDisplay+0xe0>
    3ae8:	17 c0       	rjmp	.+46     	; 0x3b18 <InitializeDisplay+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aea:	6d 81       	ldd	r22, Y+5	; 0x05
    3aec:	7e 81       	ldd	r23, Y+6	; 0x06
    3aee:	8f 81       	ldd	r24, Y+7	; 0x07
    3af0:	98 85       	ldd	r25, Y+8	; 0x08
    3af2:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__fixunssfsi>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	9a 87       	std	Y+10, r25	; 0x0a
    3afc:	89 87       	std	Y+9, r24	; 0x09
    3afe:	89 85       	ldd	r24, Y+9	; 0x09
    3b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b02:	9e 87       	std	Y+14, r25	; 0x0e
    3b04:	8d 87       	std	Y+13, r24	; 0x0d
    3b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b0a:	8c 01       	movw	r16, r24
    3b0c:	f8 01       	movw	r30, r16
    3b0e:	31 97       	sbiw	r30, 0x01	; 1
    3b10:	f1 f7       	brne	.-4      	; 0x3b0e <InitializeDisplay+0x132>
    3b12:	8f 01       	movw	r16, r30
    3b14:	1e 87       	std	Y+14, r17	; 0x0e
    3b16:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	
	
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
    3b18:	8e ea       	ldi	r24, 0xAE	; 174
    3b1a:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
    3b1e:	85 ed       	ldi	r24, 0xD5	; 213
    3b20:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
    3b24:	80 e8       	ldi	r24, 0x80	; 128
    3b26:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
    3b2a:	88 ea       	ldi	r24, 0xA8	; 168
    3b2c:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0x3F);
    3b30:	8f e3       	ldi	r24, 0x3F	; 63
    3b32:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
    3b36:	83 ed       	ldi	r24, 0xD3	; 211
    3b38:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
    3b42:	80 e4       	ldi	r24, 0x40	; 64
    3b44:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
    3b48:	8d e8       	ldi	r24, 0x8D	; 141
    3b4a:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0x14);  // using internal VCC
    3b4e:	84 e1       	ldi	r24, 0x14	; 20
    3b50:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	//ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
	//ssd1306_command(0x00);          // 0x00 horizontal addressing
	
	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
    3b54:	81 ea       	ldi	r24, 0xA1	; 161
    3b56:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
    3b5a:	88 ec       	ldi	r24, 0xC8	; 200
    3b5c:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
    3b60:	8a ed       	ldi	r24, 0xDA	; 218
    3b62:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0x12);
    3b66:	82 e1       	ldi	r24, 0x12	; 18
    3b68:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
    3b6c:	81 e8       	ldi	r24, 0x81	; 129
    3b6e:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0xCF);
    3b72:	8f ec       	ldi	r24, 0xCF	; 207
    3b74:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
    3b78:	89 ed       	ldi	r24, 0xD9	; 217
    3b7a:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0xF1);
    3b7e:	81 ef       	ldi	r24, 0xF1	; 241
    3b80:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
    3b84:	8b ed       	ldi	r24, 0xDB	; 219
    3b86:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0x40);
    3b8a:	80 e4       	ldi	r24, 0x40	; 64
    3b8c:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    3b90:	84 ea       	ldi	r24, 0xA4	; 164
    3b92:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
    3b96:	86 ea       	ldi	r24, 0xA6	; 166
    3b98:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	
	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
    3b9c:	8f ea       	ldi	r24, 0xAF	; 175
    3b9e:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
}
    3ba2:	2e 96       	adiw	r28, 0x0e	; 14
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	f8 94       	cli
    3ba8:	de bf       	out	0x3e, r29	; 62
    3baa:	0f be       	out	0x3f, r0	; 63
    3bac:	cd bf       	out	0x3d, r28	; 61
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	1f 91       	pop	r17
    3bb4:	0f 91       	pop	r16
    3bb6:	08 95       	ret

00003bb8 <reset_display>:
//////////////////////////////
//

void reset_display(void)
{
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
	displayOff();
    3bc0:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <displayOff>
	clear_display();
    3bc4:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear_display>
	displayOn();
    3bc8:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <displayOn>
}
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	08 95       	ret

00003bd2 <displayOn>:


//==========================================================//
// Turns display on.
void displayOn(void)
{
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
	ssd1306_command(0xaf);        //display on
    3bda:	8f ea       	ldi	r24, 0xAF	; 175
    3bdc:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
}
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	08 95       	ret

00003be6 <displayOff>:

//==========================================================//
// Turns display off.
void displayOff(void)
{
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
	ssd1306_command(0xae);		//display off
    3bee:	8e ea       	ldi	r24, 0xAE	; 174
    3bf0:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
}
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    3bf8:	08 95       	ret

00003bfa <clear_display>:

//==========================================================//
// Clears the display by sending 0 to all the screen map.
void clear_display(void)
{
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	00 d0       	rcall	.+0      	; 0x3c00 <clear_display+0x6>
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,k;
	for(k=0;k<8;k++)
    3c04:	1a 82       	std	Y+2, r1	; 0x02
    3c06:	12 c0       	rjmp	.+36     	; 0x3c2c <clear_display+0x32>
	{
		setXY(k,0);
    3c08:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0a:	60 e0       	ldi	r22, 0x00	; 0
    3c0c:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <setXY>
		{
			for(i=0;i<128;i++)     //clear all COL
    3c10:	19 82       	std	Y+1, r1	; 0x01
    3c12:	06 c0       	rjmp	.+12     	; 0x3c20 <clear_display+0x26>
			{
				SendChar(0);         //clear all COL
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <SendChar>
	unsigned char i,k;
	for(k=0;k<8;k++)
	{
		setXY(k,0);
		{
			for(i=0;i<128;i++)     //clear all COL
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	8f 5f       	subi	r24, 0xFF	; 255
    3c1e:	89 83       	std	Y+1, r24	; 0x01
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	88 23       	and	r24, r24
    3c24:	bc f7       	brge	.-18     	; 0x3c14 <clear_display+0x1a>
//==========================================================//
// Clears the display by sending 0 to all the screen map.
void clear_display(void)
{
	unsigned char i,k;
	for(k=0;k<8;k++)
    3c26:	8a 81       	ldd	r24, Y+2	; 0x02
    3c28:	8f 5f       	subi	r24, 0xFF	; 255
    3c2a:	8a 83       	std	Y+2, r24	; 0x02
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	88 30       	cpi	r24, 0x08	; 8
    3c30:	58 f3       	brcs	.-42     	; 0x3c08 <clear_display+0xe>
				SendChar(0);         //clear all COL
				//delay(10);
			}
		}
	}
}
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	08 95       	ret

00003c3c <SendChar>:
//==========================================================//
// Actually this sends a byte, not a char to draw in the display.
// Display's chars uses 8 byte font the small ones and 96 bytes
// for the big number font.
void SendChar(unsigned char data)
{
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	0f 92       	push	r0
    3c42:	cd b7       	in	r28, 0x3d	; 61
    3c44:	de b7       	in	r29, 0x3e	; 62
    3c46:	89 83       	std	Y+1, r24	; 0x01
	I2C_start(); // begin transmitting
    3c48:	0e 94 fe 07 	call	0xffc	; 0xffc <I2C_start>
	I2C_write_address(_i2c_address);
    3c4c:	80 91 b5 00 	lds	r24, 0x00B5
    3c50:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_write_address>
	I2C_write_data(0x40);//data mode
    3c54:	80 e4       	ldi	r24, 0x40	; 64
    3c56:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_write_data(data);
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_stop();    // stop transmitting
    3c60:	0e 94 92 08 	call	0x1124	; 0x1124 <I2C_stop>
}
    3c64:	0f 90       	pop	r0
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	08 95       	ret

00003c6c <sendCharXY>:
//==========================================================//
// Prints a display char (not just a byte) in coordinates X Y,
// being multiples of 8. This means we have 16 COLS (0-15)
// and 8 ROWS (0-7).
void sendCharXY(unsigned char data, int X, int Y)
{
    3c6c:	1f 93       	push	r17
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
    3c72:	cd b7       	in	r28, 0x3d	; 61
    3c74:	de b7       	in	r29, 0x3e	; 62
    3c76:	2a 97       	sbiw	r28, 0x0a	; 10
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	de bf       	out	0x3e, r29	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	cd bf       	out	0x3d, r28	; 61
    3c82:	8e 83       	std	Y+6, r24	; 0x06
    3c84:	78 87       	std	Y+8, r23	; 0x08
    3c86:	6f 83       	std	Y+7, r22	; 0x07
    3c88:	5a 87       	std	Y+10, r21	; 0x0a
    3c8a:	49 87       	std	Y+9, r20	; 0x09
	setXY(X, Y);
    3c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c8e:	99 85       	ldd	r25, Y+9	; 0x09
    3c90:	69 2f       	mov	r22, r25
    3c92:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <setXY>
	I2C_start(); // begin transmitting
    3c96:	0e 94 fe 07 	call	0xffc	; 0xffc <I2C_start>
	I2C_write_address(_i2c_address);
    3c9a:	80 91 b5 00 	lds	r24, 0x00B5
    3c9e:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_write_address>
	I2C_write_data(0x40);//data mode
    3ca2:	80 e4       	ldi	r24, 0x40	; 64
    3ca4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	
	for(int i=0;i<8;i++)
    3ca8:	1a 82       	std	Y+2, r1	; 0x02
    3caa:	19 82       	std	Y+1, r1	; 0x01
    3cac:	20 c0       	rjmp	.+64     	; 0x3cee <sendCharXY+0x82>
	I2C_write_data(pgm_read_byte(myFont[data-0x20]+i)); /*change to I2C_write_data(pgm_read_byte(myFont[*string-0x20]+i));
    3cae:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb0:	88 2f       	mov	r24, r24
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	80 97       	sbiw	r24, 0x20	; 32
    3cb6:	9c 01       	movw	r18, r24
    3cb8:	22 0f       	add	r18, r18
    3cba:	33 1f       	adc	r19, r19
    3cbc:	22 0f       	add	r18, r18
    3cbe:	33 1f       	adc	r19, r19
    3cc0:	22 0f       	add	r18, r18
    3cc2:	33 1f       	adc	r19, r19
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc8:	82 0f       	add	r24, r18
    3cca:	93 1f       	adc	r25, r19
    3ccc:	8c 5a       	subi	r24, 0xAC	; 172
    3cce:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd0:	9c 83       	std	Y+4, r25	; 0x04
    3cd2:	8b 83       	std	Y+3, r24	; 0x03
    3cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd8:	fc 01       	movw	r30, r24
    3cda:	14 91       	lpm	r17, Z
    3cdc:	1d 83       	std	Y+5, r17	; 0x05
    3cde:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	setXY(X, Y);
	I2C_start(); // begin transmitting
	I2C_write_address(_i2c_address);
	I2C_write_data(0x40);//data mode
	
	for(int i=0;i<8;i++)
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce8:	01 96       	adiw	r24, 0x01	; 1
    3cea:	9a 83       	std	Y+2, r25	; 0x02
    3cec:	89 83       	std	Y+1, r24	; 0x01
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf2:	88 30       	cpi	r24, 0x08	; 8
    3cf4:	91 05       	cpc	r25, r1
    3cf6:	dc f2       	brlt	.-74     	; 0x3cae <sendCharXY+0x42>
	I2C_write_data(pgm_read_byte(myFont[data-0x20]+i)); /*change to I2C_write_data(pgm_read_byte(myFont[*string-0x20]+i));
			                                                 if you are using program memory to store my font array*/
	
	I2C_stop();    // stop transmitting
    3cf8:	0e 94 92 08 	call	0x1124	; 0x1124 <I2C_stop>
}
    3cfc:	2a 96       	adiw	r28, 0x0a	; 10
    3cfe:	0f b6       	in	r0, 0x3f	; 63
    3d00:	f8 94       	cli
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	0f be       	out	0x3f, r0	; 63
    3d06:	cd bf       	out	0x3d, r28	; 61
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	1f 91       	pop	r17
    3d0e:	08 95       	ret

00003d10 <setXY>:

//==========================================================//
// Set the cursor position in a 16 COL * 8 ROW map.
void setXY(unsigned char row,unsigned char col)
{
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	00 d0       	rcall	.+0      	; 0x3d16 <setXY+0x6>
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
    3d1a:	89 83       	std	Y+1, r24	; 0x01
    3d1c:	6a 83       	std	Y+2, r22	; 0x02
	ssd1306_command(0xb0+row);                //set page address
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	80 55       	subi	r24, 0x50	; 80
    3d22:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0x00+(8*col&0x0f));       //set low col address
    3d26:	8a 81       	ldd	r24, Y+2	; 0x02
    3d28:	88 0f       	add	r24, r24
    3d2a:	88 0f       	add	r24, r24
    3d2c:	88 0f       	add	r24, r24
    3d2e:	8f 70       	andi	r24, 0x0F	; 15
    3d30:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
	ssd1306_command(0x10+((8*col>>4)&0x0f));  //set high col address
    3d34:	8a 81       	ldd	r24, Y+2	; 0x02
    3d36:	88 2f       	mov	r24, r24
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	88 0f       	add	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	88 0f       	add	r24, r24
    3d40:	99 1f       	adc	r25, r25
    3d42:	88 0f       	add	r24, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	95 95       	asr	r25
    3d48:	87 95       	ror	r24
    3d4a:	95 95       	asr	r25
    3d4c:	87 95       	ror	r24
    3d4e:	95 95       	asr	r25
    3d50:	87 95       	ror	r24
    3d52:	95 95       	asr	r25
    3d54:	87 95       	ror	r24
    3d56:	8f 70       	andi	r24, 0x0F	; 15
    3d58:	80 5f       	subi	r24, 0xF0	; 240
    3d5a:	0e 94 9c 1c 	call	0x3938	; 0x3938 <ssd1306_command>
}
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	08 95       	ret

00003d68 <sendStr>:


//==========================================================//
// Prints a string regardless the cursor position.
void sendStr(char *string)
{
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
    3d6e:	00 d0       	rcall	.+0      	; 0x3d70 <sendStr+0x8>
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <sendStr+0xa>
    3d72:	00 d0       	rcall	.+0      	; 0x3d74 <sendStr+0xc>
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
    3d78:	9e 83       	std	Y+6, r25	; 0x06
    3d7a:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char i=0;
    3d7c:	19 82       	std	Y+1, r1	; 0x01
	while(*string != NULL)
    3d7e:	2c c0       	rjmp	.+88     	; 0x3dd8 <sendStr+0x70>
	{
		for(i=0;i<8;i++)
    3d80:	19 82       	std	Y+1, r1	; 0x01
    3d82:	22 c0       	rjmp	.+68     	; 0x3dc8 <sendStr+0x60>
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i)); /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	9e 81       	ldd	r25, Y+6	; 0x06
    3d88:	fc 01       	movw	r30, r24
    3d8a:	80 81       	ld	r24, Z
    3d8c:	88 2f       	mov	r24, r24
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	80 97       	sbiw	r24, 0x20	; 32
    3d92:	9c 01       	movw	r18, r24
    3d94:	22 0f       	add	r18, r18
    3d96:	33 1f       	adc	r19, r19
    3d98:	22 0f       	add	r18, r18
    3d9a:	33 1f       	adc	r19, r19
    3d9c:	22 0f       	add	r18, r18
    3d9e:	33 1f       	adc	r19, r19
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	88 2f       	mov	r24, r24
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	82 0f       	add	r24, r18
    3da8:	93 1f       	adc	r25, r19
    3daa:	8c 5a       	subi	r24, 0xAC	; 172
    3dac:	9f 4f       	sbci	r25, 0xFF	; 255
    3dae:	9b 83       	std	Y+3, r25	; 0x03
    3db0:	8a 83       	std	Y+2, r24	; 0x02
    3db2:	8a 81       	ldd	r24, Y+2	; 0x02
    3db4:	9b 81       	ldd	r25, Y+3	; 0x03
    3db6:	fc 01       	movw	r30, r24
    3db8:	14 91       	lpm	r17, Z
    3dba:	1c 83       	std	Y+4, r17	; 0x04
    3dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3dbe:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <SendChar>
void sendStr(char *string)
{
	unsigned char i=0;
	while(*string != NULL)
	{
		for(i=0;i<8;i++)
    3dc2:	89 81       	ldd	r24, Y+1	; 0x01
    3dc4:	8f 5f       	subi	r24, 0xFF	; 255
    3dc6:	89 83       	std	Y+1, r24	; 0x01
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	88 30       	cpi	r24, 0x08	; 8
    3dcc:	d8 f2       	brcs	.-74     	; 0x3d84 <sendStr+0x1c>
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i)); /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
			                                                 if you are using program memory to store my font array*/
		}
		string++;
    3dce:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd2:	01 96       	adiw	r24, 0x01	; 1
    3dd4:	9e 83       	std	Y+6, r25	; 0x06
    3dd6:	8d 83       	std	Y+5, r24	; 0x05
//==========================================================//
// Prints a string regardless the cursor position.
void sendStr(char *string)
{
	unsigned char i=0;
	while(*string != NULL)
    3dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dda:	9e 81       	ldd	r25, Y+6	; 0x06
    3ddc:	fc 01       	movw	r30, r24
    3dde:	80 81       	ld	r24, Z
    3de0:	88 2f       	mov	r24, r24
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	61 f6       	brne	.-104    	; 0x3d80 <sendStr+0x18>
			SendChar(pgm_read_byte(myFont[*string-0x20]+i)); /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
			                                                 if you are using program memory to store my font array*/
		}
		string++;
	}
}
    3de8:	26 96       	adiw	r28, 0x06	; 6
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	08 95       	ret

00003dfc <sendStrXY>:

//==========================================================//
// Prints a string in coordinates X Y, being multiples of 8.
// This means we have 16 COLS (0-15) and 8 ROWS (0-7).
void sendStrXY( char *string, int X, int Y)
{
    3dfc:	1f 93       	push	r17
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
    3e06:	2a 97       	sbiw	r28, 0x0a	; 10
    3e08:	0f b6       	in	r0, 0x3f	; 63
    3e0a:	f8 94       	cli
    3e0c:	de bf       	out	0x3e, r29	; 62
    3e0e:	0f be       	out	0x3f, r0	; 63
    3e10:	cd bf       	out	0x3d, r28	; 61
    3e12:	9e 83       	std	Y+6, r25	; 0x06
    3e14:	8d 83       	std	Y+5, r24	; 0x05
    3e16:	78 87       	std	Y+8, r23	; 0x08
    3e18:	6f 83       	std	Y+7, r22	; 0x07
    3e1a:	5a 87       	std	Y+10, r21	; 0x0a
    3e1c:	49 87       	std	Y+9, r20	; 0x09
	setXY(X,Y);
    3e1e:	8f 81       	ldd	r24, Y+7	; 0x07
    3e20:	99 85       	ldd	r25, Y+9	; 0x09
    3e22:	69 2f       	mov	r22, r25
    3e24:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <setXY>
	unsigned char i=0;
    3e28:	19 82       	std	Y+1, r1	; 0x01
	while(*string)
    3e2a:	2c c0       	rjmp	.+88     	; 0x3e84 <sendStrXY+0x88>
	{
		for(i=0;i<8;i++)
    3e2c:	19 82       	std	Y+1, r1	; 0x01
    3e2e:	22 c0       	rjmp	.+68     	; 0x3e74 <sendStrXY+0x78>
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i));          /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
    3e30:	8d 81       	ldd	r24, Y+5	; 0x05
    3e32:	9e 81       	ldd	r25, Y+6	; 0x06
    3e34:	fc 01       	movw	r30, r24
    3e36:	80 81       	ld	r24, Z
    3e38:	88 2f       	mov	r24, r24
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	80 97       	sbiw	r24, 0x20	; 32
    3e3e:	9c 01       	movw	r18, r24
    3e40:	22 0f       	add	r18, r18
    3e42:	33 1f       	adc	r19, r19
    3e44:	22 0f       	add	r18, r18
    3e46:	33 1f       	adc	r19, r19
    3e48:	22 0f       	add	r18, r18
    3e4a:	33 1f       	adc	r19, r19
    3e4c:	89 81       	ldd	r24, Y+1	; 0x01
    3e4e:	88 2f       	mov	r24, r24
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	82 0f       	add	r24, r18
    3e54:	93 1f       	adc	r25, r19
    3e56:	8c 5a       	subi	r24, 0xAC	; 172
    3e58:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5a:	9b 83       	std	Y+3, r25	; 0x03
    3e5c:	8a 83       	std	Y+2, r24	; 0x02
    3e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e60:	9b 81       	ldd	r25, Y+3	; 0x03
    3e62:	fc 01       	movw	r30, r24
    3e64:	14 91       	lpm	r17, Z
    3e66:	1c 83       	std	Y+4, r17	; 0x04
    3e68:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <SendChar>
{
	setXY(X,Y);
	unsigned char i=0;
	while(*string)
	{
		for(i=0;i<8;i++)
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	8f 5f       	subi	r24, 0xFF	; 255
    3e72:	89 83       	std	Y+1, r24	; 0x01
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	88 30       	cpi	r24, 0x08	; 8
    3e78:	d8 f2       	brcs	.-74     	; 0x3e30 <sendStrXY+0x34>
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i));          /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
			                                                             if you are using program memory to store my font array*/
		}
		string++;
    3e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7e:	01 96       	adiw	r24, 0x01	; 1
    3e80:	9e 83       	std	Y+6, r25	; 0x06
    3e82:	8d 83       	std	Y+5, r24	; 0x05
// This means we have 16 COLS (0-15) and 8 ROWS (0-7).
void sendStrXY( char *string, int X, int Y)
{
	setXY(X,Y);
	unsigned char i=0;
	while(*string)
    3e84:	8d 81       	ldd	r24, Y+5	; 0x05
    3e86:	9e 81       	ldd	r25, Y+6	; 0x06
    3e88:	fc 01       	movw	r30, r24
    3e8a:	80 81       	ld	r24, Z
    3e8c:	88 23       	and	r24, r24
    3e8e:	71 f6       	brne	.-100    	; 0x3e2c <sendStrXY+0x30>
			SendChar(pgm_read_byte(myFont[*string-0x20]+i));          /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
			                                                             if you are using program memory to store my font array*/
		}
		string++;
	}
    3e90:	2a 96       	adiw	r28, 0x0a	; 10
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	f8 94       	cli
    3e96:	de bf       	out	0x3e, r29	; 62
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	cd bf       	out	0x3d, r28	; 61
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	1f 91       	pop	r17
    3ea2:	08 95       	ret

00003ea4 <timer2_overflow_init_interrupt>:
#include "std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer2_overflow_init_interrupt(void)
{
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
	/* select timer clock */
	SET_BIT(ASSR,AS2);
    3eac:	82 e4       	ldi	r24, 0x42	; 66
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	22 e4       	ldi	r18, 0x42	; 66
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	f9 01       	movw	r30, r18
    3eb6:	20 81       	ld	r18, Z
    3eb8:	28 60       	ori	r18, 0x08	; 8
    3eba:	fc 01       	movw	r30, r24
    3ebc:	20 83       	st	Z, r18
	/* select timer pre scalar */
	SET_BIT(TCCR2,CS20);
    3ebe:	85 e4       	ldi	r24, 0x45	; 69
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	25 e4       	ldi	r18, 0x45	; 69
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	f9 01       	movw	r30, r18
    3ec8:	20 81       	ld	r18, Z
    3eca:	21 60       	ori	r18, 0x01	; 1
    3ecc:	fc 01       	movw	r30, r24
    3ece:	20 83       	st	Z, r18
	SET_BIT(TCCR2,CS22);
    3ed0:	85 e4       	ldi	r24, 0x45	; 69
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	25 e4       	ldi	r18, 0x45	; 69
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	f9 01       	movw	r30, r18
    3eda:	20 81       	ld	r18, Z
    3edc:	24 60       	ori	r18, 0x04	; 4
    3ede:	fc 01       	movw	r30, r24
    3ee0:	20 83       	st	Z, r18
	/* enable interrupt*/
	sei();
    3ee2:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
    3ee4:	89 e5       	ldi	r24, 0x59	; 89
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	29 e5       	ldi	r18, 0x59	; 89
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	f9 01       	movw	r30, r18
    3eee:	20 81       	ld	r18, Z
    3ef0:	20 64       	ori	r18, 0x40	; 64
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	20 83       	st	Z, r18
}
    3ef6:	df 91       	pop	r29
    3ef8:	cf 91       	pop	r28
    3efa:	08 95       	ret

00003efc <timer_CTC_init_interrupt>:
void timer_CTC_init_interrupt(void)
{
    3efc:	cf 93       	push	r28
    3efe:	df 93       	push	r29
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    3f04:	83 e5       	ldi	r24, 0x53	; 83
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	23 e5       	ldi	r18, 0x53	; 83
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	f9 01       	movw	r30, r18
    3f0e:	20 81       	ld	r18, Z
    3f10:	28 60       	ori	r18, 0x08	; 8
    3f12:	fc 01       	movw	r30, r24
    3f14:	20 83       	st	Z, r18
	/* load a value in OCR0 */
	OCR0=80;
    3f16:	8c e5       	ldi	r24, 0x5C	; 92
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	20 e5       	ldi	r18, 0x50	; 80
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	20 83       	st	Z, r18
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
    3f20:	83 e5       	ldi	r24, 0x53	; 83
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	23 e5       	ldi	r18, 0x53	; 83
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	f9 01       	movw	r30, r18
    3f2a:	20 81       	ld	r18, Z
    3f2c:	21 60       	ori	r18, 0x01	; 1
    3f2e:	fc 01       	movw	r30, r24
    3f30:	20 83       	st	Z, r18
	SET_BIT(TCCR0,CS02);
    3f32:	83 e5       	ldi	r24, 0x53	; 83
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	23 e5       	ldi	r18, 0x53	; 83
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	f9 01       	movw	r30, r18
    3f3c:	20 81       	ld	r18, Z
    3f3e:	24 60       	ori	r18, 0x04	; 4
    3f40:	fc 01       	movw	r30, r24
    3f42:	20 83       	st	Z, r18
	/* enable interrupt*/
	sei();
    3f44:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
    3f46:	89 e5       	ldi	r24, 0x59	; 89
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	29 e5       	ldi	r18, 0x59	; 89
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	f9 01       	movw	r30, r18
    3f50:	20 81       	ld	r18, Z
    3f52:	22 60       	ori	r18, 0x02	; 2
    3f54:	fc 01       	movw	r30, r24
    3f56:	20 83       	st	Z, r18
}
    3f58:	df 91       	pop	r29
    3f5a:	cf 91       	pop	r28
    3f5c:	08 95       	ret

00003f5e <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
    3f5e:	cf 93       	push	r28
    3f60:	df 93       	push	r29
    3f62:	cd b7       	in	r28, 0x3d	; 61
    3f64:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    3f66:	87 e3       	ldi	r24, 0x37	; 55
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	27 e3       	ldi	r18, 0x37	; 55
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	f9 01       	movw	r30, r18
    3f70:	20 81       	ld	r18, Z
    3f72:	28 60       	ori	r18, 0x08	; 8
    3f74:	fc 01       	movw	r30, r24
    3f76:	20 83       	st	Z, r18
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    3f78:	83 e5       	ldi	r24, 0x53	; 83
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	23 e5       	ldi	r18, 0x53	; 83
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	f9 01       	movw	r30, r18
    3f82:	20 81       	ld	r18, Z
    3f84:	28 60       	ori	r18, 0x08	; 8
    3f86:	fc 01       	movw	r30, r24
    3f88:	20 83       	st	Z, r18
	/* load a value in OCR0 */
	OCR0=64;
    3f8a:	8c e5       	ldi	r24, 0x5C	; 92
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	20 e4       	ldi	r18, 0x40	; 64
    3f90:	fc 01       	movw	r30, r24
    3f92:	20 83       	st	Z, r18
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    3f94:	83 e5       	ldi	r24, 0x53	; 83
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	23 e5       	ldi	r18, 0x53	; 83
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	f9 01       	movw	r30, r18
    3f9e:	20 81       	ld	r18, Z
    3fa0:	21 60       	ori	r18, 0x01	; 1
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	20 83       	st	Z, r18
	SET_BIT(TCCR0,CS02);
    3fa6:	83 e5       	ldi	r24, 0x53	; 83
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	23 e5       	ldi	r18, 0x53	; 83
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	f9 01       	movw	r30, r18
    3fb0:	20 81       	ld	r18, Z
    3fb2:	24 60       	ori	r18, 0x04	; 4
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	20 83       	st	Z, r18
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
    3fb8:	83 e5       	ldi	r24, 0x53	; 83
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	23 e5       	ldi	r18, 0x53	; 83
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	f9 01       	movw	r30, r18
    3fc2:	20 81       	ld	r18, Z
    3fc4:	20 61       	ori	r18, 0x10	; 16
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	20 83       	st	Z, r18
}
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	08 95       	ret

00003fd0 <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
    3fd0:	cf 93       	push	r28
    3fd2:	df 93       	push	r29
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    3fd8:	87 e3       	ldi	r24, 0x37	; 55
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	27 e3       	ldi	r18, 0x37	; 55
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	f9 01       	movw	r30, r18
    3fe2:	20 81       	ld	r18, Z
    3fe4:	28 60       	ori	r18, 0x08	; 8
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	20 83       	st	Z, r18
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
    3fea:	83 e5       	ldi	r24, 0x53	; 83
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	23 e5       	ldi	r18, 0x53	; 83
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	f9 01       	movw	r30, r18
    3ff4:	20 81       	ld	r18, Z
    3ff6:	20 64       	ori	r18, 0x40	; 64
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	20 83       	st	Z, r18
	SET_BIT(TCCR0,WGM01);
    3ffc:	83 e5       	ldi	r24, 0x53	; 83
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	23 e5       	ldi	r18, 0x53	; 83
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	f9 01       	movw	r30, r18
    4006:	20 81       	ld	r18, Z
    4008:	28 60       	ori	r18, 0x08	; 8
    400a:	fc 01       	movw	r30, r24
    400c:	20 83       	st	Z, r18
	/* load a value in OCR0 */
	OCR0=64;
    400e:	8c e5       	ldi	r24, 0x5C	; 92
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	20 e4       	ldi	r18, 0x40	; 64
    4014:	fc 01       	movw	r30, r24
    4016:	20 83       	st	Z, r18
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    4018:	83 e5       	ldi	r24, 0x53	; 83
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	23 e5       	ldi	r18, 0x53	; 83
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	f9 01       	movw	r30, r18
    4022:	20 81       	ld	r18, Z
    4024:	21 60       	ori	r18, 0x01	; 1
    4026:	fc 01       	movw	r30, r24
    4028:	20 83       	st	Z, r18
	SET_BIT(TCCR0,CS02);
    402a:	83 e5       	ldi	r24, 0x53	; 83
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	23 e5       	ldi	r18, 0x53	; 83
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	f9 01       	movw	r30, r18
    4034:	20 81       	ld	r18, Z
    4036:	24 60       	ori	r18, 0x04	; 4
    4038:	fc 01       	movw	r30, r24
    403a:	20 83       	st	Z, r18
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
    403c:	83 e5       	ldi	r24, 0x53	; 83
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	23 e5       	ldi	r18, 0x53	; 83
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	f9 01       	movw	r30, r18
    4046:	20 81       	ld	r18, Z
    4048:	20 61       	ori	r18, 0x10	; 16
    404a:	fc 01       	movw	r30, r24
    404c:	20 83       	st	Z, r18
	SET_BIT(TCCR0,COM01);
    404e:	83 e5       	ldi	r24, 0x53	; 83
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	23 e5       	ldi	r18, 0x53	; 83
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	f9 01       	movw	r30, r18
    4058:	20 81       	ld	r18, Z
    405a:	20 62       	ori	r18, 0x20	; 32
    405c:	fc 01       	movw	r30, r24
    405e:	20 83       	st	Z, r18
}
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	08 95       	ret

00004066 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
    4066:	cf 93       	push	r28
    4068:	df 93       	push	r29
    406a:	cd b7       	in	r28, 0x3d	; 61
    406c:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    406e:	87 e3       	ldi	r24, 0x37	; 55
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	27 e3       	ldi	r18, 0x37	; 55
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	f9 01       	movw	r30, r18
    4078:	20 81       	ld	r18, Z
    407a:	28 60       	ori	r18, 0x08	; 8
    407c:	fc 01       	movw	r30, r24
    407e:	20 83       	st	Z, r18
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
    4080:	83 e5       	ldi	r24, 0x53	; 83
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	23 e5       	ldi	r18, 0x53	; 83
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	f9 01       	movw	r30, r18
    408a:	20 81       	ld	r18, Z
    408c:	20 64       	ori	r18, 0x40	; 64
    408e:	fc 01       	movw	r30, r24
    4090:	20 83       	st	Z, r18
	/* load a value in OCR0 */
	OCR0=64;
    4092:	8c e5       	ldi	r24, 0x5C	; 92
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	20 e4       	ldi	r18, 0x40	; 64
    4098:	fc 01       	movw	r30, r24
    409a:	20 83       	st	Z, r18
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    409c:	83 e5       	ldi	r24, 0x53	; 83
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	23 e5       	ldi	r18, 0x53	; 83
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	f9 01       	movw	r30, r18
    40a6:	20 81       	ld	r18, Z
    40a8:	21 60       	ori	r18, 0x01	; 1
    40aa:	fc 01       	movw	r30, r24
    40ac:	20 83       	st	Z, r18
	SET_BIT(TCCR0,CS02);
    40ae:	83 e5       	ldi	r24, 0x53	; 83
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	23 e5       	ldi	r18, 0x53	; 83
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	f9 01       	movw	r30, r18
    40b8:	20 81       	ld	r18, Z
    40ba:	24 60       	ori	r18, 0x04	; 4
    40bc:	fc 01       	movw	r30, r24
    40be:	20 83       	st	Z, r18
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
    40c0:	83 e5       	ldi	r24, 0x53	; 83
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	23 e5       	ldi	r18, 0x53	; 83
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	f9 01       	movw	r30, r18
    40ca:	20 81       	ld	r18, Z
    40cc:	20 61       	ori	r18, 0x10	; 16
    40ce:	fc 01       	movw	r30, r24
    40d0:	20 83       	st	Z, r18
	SET_BIT(TCCR0,COM01);
    40d2:	83 e5       	ldi	r24, 0x53	; 83
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	23 e5       	ldi	r18, 0x53	; 83
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	f9 01       	movw	r30, r18
    40dc:	20 81       	ld	r18, Z
    40de:	20 62       	ori	r18, 0x20	; 32
    40e0:	fc 01       	movw	r30, r24
    40e2:	20 83       	st	Z, r18
}
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
    40e8:	08 95       	ret

000040ea <__cmpsf2>:
    40ea:	6c d0       	rcall	.+216    	; 0x41c4 <__fp_cmp>
    40ec:	08 f4       	brcc	.+2      	; 0x40f0 <__cmpsf2+0x6>
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	08 95       	ret

000040f2 <__fixunssfsi>:
    40f2:	94 d0       	rcall	.+296    	; 0x421c <__fp_splitA>
    40f4:	88 f0       	brcs	.+34     	; 0x4118 <__fixunssfsi+0x26>
    40f6:	9f 57       	subi	r25, 0x7F	; 127
    40f8:	90 f0       	brcs	.+36     	; 0x411e <__fixunssfsi+0x2c>
    40fa:	b9 2f       	mov	r27, r25
    40fc:	99 27       	eor	r25, r25
    40fe:	b7 51       	subi	r27, 0x17	; 23
    4100:	a0 f0       	brcs	.+40     	; 0x412a <__fixunssfsi+0x38>
    4102:	d1 f0       	breq	.+52     	; 0x4138 <__fixunssfsi+0x46>
    4104:	66 0f       	add	r22, r22
    4106:	77 1f       	adc	r23, r23
    4108:	88 1f       	adc	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	1a f0       	brmi	.+6      	; 0x4114 <__fixunssfsi+0x22>
    410e:	ba 95       	dec	r27
    4110:	c9 f7       	brne	.-14     	; 0x4104 <__fixunssfsi+0x12>
    4112:	12 c0       	rjmp	.+36     	; 0x4138 <__fixunssfsi+0x46>
    4114:	b1 30       	cpi	r27, 0x01	; 1
    4116:	81 f0       	breq	.+32     	; 0x4138 <__fixunssfsi+0x46>
    4118:	9b d0       	rcall	.+310    	; 0x4250 <__fp_zero>
    411a:	b1 e0       	ldi	r27, 0x01	; 1
    411c:	08 95       	ret
    411e:	98 c0       	rjmp	.+304    	; 0x4250 <__fp_zero>
    4120:	67 2f       	mov	r22, r23
    4122:	78 2f       	mov	r23, r24
    4124:	88 27       	eor	r24, r24
    4126:	b8 5f       	subi	r27, 0xF8	; 248
    4128:	39 f0       	breq	.+14     	; 0x4138 <__fixunssfsi+0x46>
    412a:	b9 3f       	cpi	r27, 0xF9	; 249
    412c:	cc f3       	brlt	.-14     	; 0x4120 <__fixunssfsi+0x2e>
    412e:	86 95       	lsr	r24
    4130:	77 95       	ror	r23
    4132:	67 95       	ror	r22
    4134:	b3 95       	inc	r27
    4136:	d9 f7       	brne	.-10     	; 0x412e <__fixunssfsi+0x3c>
    4138:	3e f4       	brtc	.+14     	; 0x4148 <__fixunssfsi+0x56>
    413a:	90 95       	com	r25
    413c:	80 95       	com	r24
    413e:	70 95       	com	r23
    4140:	61 95       	neg	r22
    4142:	7f 4f       	sbci	r23, 0xFF	; 255
    4144:	8f 4f       	sbci	r24, 0xFF	; 255
    4146:	9f 4f       	sbci	r25, 0xFF	; 255
    4148:	08 95       	ret

0000414a <__floatunsisf>:
    414a:	e8 94       	clt
    414c:	09 c0       	rjmp	.+18     	; 0x4160 <__floatsisf+0x12>

0000414e <__floatsisf>:
    414e:	97 fb       	bst	r25, 7
    4150:	3e f4       	brtc	.+14     	; 0x4160 <__floatsisf+0x12>
    4152:	90 95       	com	r25
    4154:	80 95       	com	r24
    4156:	70 95       	com	r23
    4158:	61 95       	neg	r22
    415a:	7f 4f       	sbci	r23, 0xFF	; 255
    415c:	8f 4f       	sbci	r24, 0xFF	; 255
    415e:	9f 4f       	sbci	r25, 0xFF	; 255
    4160:	99 23       	and	r25, r25
    4162:	a9 f0       	breq	.+42     	; 0x418e <__floatsisf+0x40>
    4164:	f9 2f       	mov	r31, r25
    4166:	96 e9       	ldi	r25, 0x96	; 150
    4168:	bb 27       	eor	r27, r27
    416a:	93 95       	inc	r25
    416c:	f6 95       	lsr	r31
    416e:	87 95       	ror	r24
    4170:	77 95       	ror	r23
    4172:	67 95       	ror	r22
    4174:	b7 95       	ror	r27
    4176:	f1 11       	cpse	r31, r1
    4178:	f8 cf       	rjmp	.-16     	; 0x416a <__floatsisf+0x1c>
    417a:	fa f4       	brpl	.+62     	; 0x41ba <__floatsisf+0x6c>
    417c:	bb 0f       	add	r27, r27
    417e:	11 f4       	brne	.+4      	; 0x4184 <__floatsisf+0x36>
    4180:	60 ff       	sbrs	r22, 0
    4182:	1b c0       	rjmp	.+54     	; 0x41ba <__floatsisf+0x6c>
    4184:	6f 5f       	subi	r22, 0xFF	; 255
    4186:	7f 4f       	sbci	r23, 0xFF	; 255
    4188:	8f 4f       	sbci	r24, 0xFF	; 255
    418a:	9f 4f       	sbci	r25, 0xFF	; 255
    418c:	16 c0       	rjmp	.+44     	; 0x41ba <__floatsisf+0x6c>
    418e:	88 23       	and	r24, r24
    4190:	11 f0       	breq	.+4      	; 0x4196 <__floatsisf+0x48>
    4192:	96 e9       	ldi	r25, 0x96	; 150
    4194:	11 c0       	rjmp	.+34     	; 0x41b8 <__floatsisf+0x6a>
    4196:	77 23       	and	r23, r23
    4198:	21 f0       	breq	.+8      	; 0x41a2 <__floatsisf+0x54>
    419a:	9e e8       	ldi	r25, 0x8E	; 142
    419c:	87 2f       	mov	r24, r23
    419e:	76 2f       	mov	r23, r22
    41a0:	05 c0       	rjmp	.+10     	; 0x41ac <__floatsisf+0x5e>
    41a2:	66 23       	and	r22, r22
    41a4:	71 f0       	breq	.+28     	; 0x41c2 <__floatsisf+0x74>
    41a6:	96 e8       	ldi	r25, 0x86	; 134
    41a8:	86 2f       	mov	r24, r22
    41aa:	70 e0       	ldi	r23, 0x00	; 0
    41ac:	60 e0       	ldi	r22, 0x00	; 0
    41ae:	2a f0       	brmi	.+10     	; 0x41ba <__floatsisf+0x6c>
    41b0:	9a 95       	dec	r25
    41b2:	66 0f       	add	r22, r22
    41b4:	77 1f       	adc	r23, r23
    41b6:	88 1f       	adc	r24, r24
    41b8:	da f7       	brpl	.-10     	; 0x41b0 <__floatsisf+0x62>
    41ba:	88 0f       	add	r24, r24
    41bc:	96 95       	lsr	r25
    41be:	87 95       	ror	r24
    41c0:	97 f9       	bld	r25, 7
    41c2:	08 95       	ret

000041c4 <__fp_cmp>:
    41c4:	99 0f       	add	r25, r25
    41c6:	00 08       	sbc	r0, r0
    41c8:	55 0f       	add	r21, r21
    41ca:	aa 0b       	sbc	r26, r26
    41cc:	e0 e8       	ldi	r30, 0x80	; 128
    41ce:	fe ef       	ldi	r31, 0xFE	; 254
    41d0:	16 16       	cp	r1, r22
    41d2:	17 06       	cpc	r1, r23
    41d4:	e8 07       	cpc	r30, r24
    41d6:	f9 07       	cpc	r31, r25
    41d8:	c0 f0       	brcs	.+48     	; 0x420a <__fp_cmp+0x46>
    41da:	12 16       	cp	r1, r18
    41dc:	13 06       	cpc	r1, r19
    41de:	e4 07       	cpc	r30, r20
    41e0:	f5 07       	cpc	r31, r21
    41e2:	98 f0       	brcs	.+38     	; 0x420a <__fp_cmp+0x46>
    41e4:	62 1b       	sub	r22, r18
    41e6:	73 0b       	sbc	r23, r19
    41e8:	84 0b       	sbc	r24, r20
    41ea:	95 0b       	sbc	r25, r21
    41ec:	39 f4       	brne	.+14     	; 0x41fc <__fp_cmp+0x38>
    41ee:	0a 26       	eor	r0, r26
    41f0:	61 f0       	breq	.+24     	; 0x420a <__fp_cmp+0x46>
    41f2:	23 2b       	or	r18, r19
    41f4:	24 2b       	or	r18, r20
    41f6:	25 2b       	or	r18, r21
    41f8:	21 f4       	brne	.+8      	; 0x4202 <__fp_cmp+0x3e>
    41fa:	08 95       	ret
    41fc:	0a 26       	eor	r0, r26
    41fe:	09 f4       	brne	.+2      	; 0x4202 <__fp_cmp+0x3e>
    4200:	a1 40       	sbci	r26, 0x01	; 1
    4202:	a6 95       	lsr	r26
    4204:	8f ef       	ldi	r24, 0xFF	; 255
    4206:	81 1d       	adc	r24, r1
    4208:	81 1d       	adc	r24, r1
    420a:	08 95       	ret

0000420c <__fp_split3>:
    420c:	57 fd       	sbrc	r21, 7
    420e:	90 58       	subi	r25, 0x80	; 128
    4210:	44 0f       	add	r20, r20
    4212:	55 1f       	adc	r21, r21
    4214:	59 f0       	breq	.+22     	; 0x422c <__fp_splitA+0x10>
    4216:	5f 3f       	cpi	r21, 0xFF	; 255
    4218:	71 f0       	breq	.+28     	; 0x4236 <__fp_splitA+0x1a>
    421a:	47 95       	ror	r20

0000421c <__fp_splitA>:
    421c:	88 0f       	add	r24, r24
    421e:	97 fb       	bst	r25, 7
    4220:	99 1f       	adc	r25, r25
    4222:	61 f0       	breq	.+24     	; 0x423c <__fp_splitA+0x20>
    4224:	9f 3f       	cpi	r25, 0xFF	; 255
    4226:	79 f0       	breq	.+30     	; 0x4246 <__fp_splitA+0x2a>
    4228:	87 95       	ror	r24
    422a:	08 95       	ret
    422c:	12 16       	cp	r1, r18
    422e:	13 06       	cpc	r1, r19
    4230:	14 06       	cpc	r1, r20
    4232:	55 1f       	adc	r21, r21
    4234:	f2 cf       	rjmp	.-28     	; 0x421a <__fp_split3+0xe>
    4236:	46 95       	lsr	r20
    4238:	f1 df       	rcall	.-30     	; 0x421c <__fp_splitA>
    423a:	08 c0       	rjmp	.+16     	; 0x424c <__fp_splitA+0x30>
    423c:	16 16       	cp	r1, r22
    423e:	17 06       	cpc	r1, r23
    4240:	18 06       	cpc	r1, r24
    4242:	99 1f       	adc	r25, r25
    4244:	f1 cf       	rjmp	.-30     	; 0x4228 <__fp_splitA+0xc>
    4246:	86 95       	lsr	r24
    4248:	71 05       	cpc	r23, r1
    424a:	61 05       	cpc	r22, r1
    424c:	08 94       	sec
    424e:	08 95       	ret

00004250 <__fp_zero>:
    4250:	e8 94       	clt

00004252 <__fp_szero>:
    4252:	bb 27       	eor	r27, r27
    4254:	66 27       	eor	r22, r22
    4256:	77 27       	eor	r23, r23
    4258:	cb 01       	movw	r24, r22
    425a:	97 f9       	bld	r25, 7
    425c:	08 95       	ret

0000425e <__gesf2>:
    425e:	b2 df       	rcall	.-156    	; 0x41c4 <__fp_cmp>
    4260:	08 f4       	brcc	.+2      	; 0x4264 <__gesf2+0x6>
    4262:	8f ef       	ldi	r24, 0xFF	; 255
    4264:	08 95       	ret

00004266 <__mulsf3>:
    4266:	0b d0       	rcall	.+22     	; 0x427e <__mulsf3x>
    4268:	78 c0       	rjmp	.+240    	; 0x435a <__fp_round>
    426a:	69 d0       	rcall	.+210    	; 0x433e <__fp_pscA>
    426c:	28 f0       	brcs	.+10     	; 0x4278 <__mulsf3+0x12>
    426e:	6e d0       	rcall	.+220    	; 0x434c <__fp_pscB>
    4270:	18 f0       	brcs	.+6      	; 0x4278 <__mulsf3+0x12>
    4272:	95 23       	and	r25, r21
    4274:	09 f0       	breq	.+2      	; 0x4278 <__mulsf3+0x12>
    4276:	5a c0       	rjmp	.+180    	; 0x432c <__fp_inf>
    4278:	5f c0       	rjmp	.+190    	; 0x4338 <__fp_nan>
    427a:	11 24       	eor	r1, r1
    427c:	ea cf       	rjmp	.-44     	; 0x4252 <__fp_szero>

0000427e <__mulsf3x>:
    427e:	c6 df       	rcall	.-116    	; 0x420c <__fp_split3>
    4280:	a0 f3       	brcs	.-24     	; 0x426a <__mulsf3+0x4>

00004282 <__mulsf3_pse>:
    4282:	95 9f       	mul	r25, r21
    4284:	d1 f3       	breq	.-12     	; 0x427a <__mulsf3+0x14>
    4286:	95 0f       	add	r25, r21
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	55 1f       	adc	r21, r21
    428c:	62 9f       	mul	r22, r18
    428e:	f0 01       	movw	r30, r0
    4290:	72 9f       	mul	r23, r18
    4292:	bb 27       	eor	r27, r27
    4294:	f0 0d       	add	r31, r0
    4296:	b1 1d       	adc	r27, r1
    4298:	63 9f       	mul	r22, r19
    429a:	aa 27       	eor	r26, r26
    429c:	f0 0d       	add	r31, r0
    429e:	b1 1d       	adc	r27, r1
    42a0:	aa 1f       	adc	r26, r26
    42a2:	64 9f       	mul	r22, r20
    42a4:	66 27       	eor	r22, r22
    42a6:	b0 0d       	add	r27, r0
    42a8:	a1 1d       	adc	r26, r1
    42aa:	66 1f       	adc	r22, r22
    42ac:	82 9f       	mul	r24, r18
    42ae:	22 27       	eor	r18, r18
    42b0:	b0 0d       	add	r27, r0
    42b2:	a1 1d       	adc	r26, r1
    42b4:	62 1f       	adc	r22, r18
    42b6:	73 9f       	mul	r23, r19
    42b8:	b0 0d       	add	r27, r0
    42ba:	a1 1d       	adc	r26, r1
    42bc:	62 1f       	adc	r22, r18
    42be:	83 9f       	mul	r24, r19
    42c0:	a0 0d       	add	r26, r0
    42c2:	61 1d       	adc	r22, r1
    42c4:	22 1f       	adc	r18, r18
    42c6:	74 9f       	mul	r23, r20
    42c8:	33 27       	eor	r19, r19
    42ca:	a0 0d       	add	r26, r0
    42cc:	61 1d       	adc	r22, r1
    42ce:	23 1f       	adc	r18, r19
    42d0:	84 9f       	mul	r24, r20
    42d2:	60 0d       	add	r22, r0
    42d4:	21 1d       	adc	r18, r1
    42d6:	82 2f       	mov	r24, r18
    42d8:	76 2f       	mov	r23, r22
    42da:	6a 2f       	mov	r22, r26
    42dc:	11 24       	eor	r1, r1
    42de:	9f 57       	subi	r25, 0x7F	; 127
    42e0:	50 40       	sbci	r21, 0x00	; 0
    42e2:	8a f0       	brmi	.+34     	; 0x4306 <__mulsf3_pse+0x84>
    42e4:	e1 f0       	breq	.+56     	; 0x431e <__mulsf3_pse+0x9c>
    42e6:	88 23       	and	r24, r24
    42e8:	4a f0       	brmi	.+18     	; 0x42fc <__mulsf3_pse+0x7a>
    42ea:	ee 0f       	add	r30, r30
    42ec:	ff 1f       	adc	r31, r31
    42ee:	bb 1f       	adc	r27, r27
    42f0:	66 1f       	adc	r22, r22
    42f2:	77 1f       	adc	r23, r23
    42f4:	88 1f       	adc	r24, r24
    42f6:	91 50       	subi	r25, 0x01	; 1
    42f8:	50 40       	sbci	r21, 0x00	; 0
    42fa:	a9 f7       	brne	.-22     	; 0x42e6 <__mulsf3_pse+0x64>
    42fc:	9e 3f       	cpi	r25, 0xFE	; 254
    42fe:	51 05       	cpc	r21, r1
    4300:	70 f0       	brcs	.+28     	; 0x431e <__mulsf3_pse+0x9c>
    4302:	14 c0       	rjmp	.+40     	; 0x432c <__fp_inf>
    4304:	a6 cf       	rjmp	.-180    	; 0x4252 <__fp_szero>
    4306:	5f 3f       	cpi	r21, 0xFF	; 255
    4308:	ec f3       	brlt	.-6      	; 0x4304 <__mulsf3_pse+0x82>
    430a:	98 3e       	cpi	r25, 0xE8	; 232
    430c:	dc f3       	brlt	.-10     	; 0x4304 <__mulsf3_pse+0x82>
    430e:	86 95       	lsr	r24
    4310:	77 95       	ror	r23
    4312:	67 95       	ror	r22
    4314:	b7 95       	ror	r27
    4316:	f7 95       	ror	r31
    4318:	e7 95       	ror	r30
    431a:	9f 5f       	subi	r25, 0xFF	; 255
    431c:	c1 f7       	brne	.-16     	; 0x430e <__mulsf3_pse+0x8c>
    431e:	fe 2b       	or	r31, r30
    4320:	88 0f       	add	r24, r24
    4322:	91 1d       	adc	r25, r1
    4324:	96 95       	lsr	r25
    4326:	87 95       	ror	r24
    4328:	97 f9       	bld	r25, 7
    432a:	08 95       	ret

0000432c <__fp_inf>:
    432c:	97 f9       	bld	r25, 7
    432e:	9f 67       	ori	r25, 0x7F	; 127
    4330:	80 e8       	ldi	r24, 0x80	; 128
    4332:	70 e0       	ldi	r23, 0x00	; 0
    4334:	60 e0       	ldi	r22, 0x00	; 0
    4336:	08 95       	ret

00004338 <__fp_nan>:
    4338:	9f ef       	ldi	r25, 0xFF	; 255
    433a:	80 ec       	ldi	r24, 0xC0	; 192
    433c:	08 95       	ret

0000433e <__fp_pscA>:
    433e:	00 24       	eor	r0, r0
    4340:	0a 94       	dec	r0
    4342:	16 16       	cp	r1, r22
    4344:	17 06       	cpc	r1, r23
    4346:	18 06       	cpc	r1, r24
    4348:	09 06       	cpc	r0, r25
    434a:	08 95       	ret

0000434c <__fp_pscB>:
    434c:	00 24       	eor	r0, r0
    434e:	0a 94       	dec	r0
    4350:	12 16       	cp	r1, r18
    4352:	13 06       	cpc	r1, r19
    4354:	14 06       	cpc	r1, r20
    4356:	05 06       	cpc	r0, r21
    4358:	08 95       	ret

0000435a <__fp_round>:
    435a:	09 2e       	mov	r0, r25
    435c:	03 94       	inc	r0
    435e:	00 0c       	add	r0, r0
    4360:	11 f4       	brne	.+4      	; 0x4366 <__fp_round+0xc>
    4362:	88 23       	and	r24, r24
    4364:	52 f0       	brmi	.+20     	; 0x437a <__fp_round+0x20>
    4366:	bb 0f       	add	r27, r27
    4368:	40 f4       	brcc	.+16     	; 0x437a <__fp_round+0x20>
    436a:	bf 2b       	or	r27, r31
    436c:	11 f4       	brne	.+4      	; 0x4372 <__fp_round+0x18>
    436e:	60 ff       	sbrs	r22, 0
    4370:	04 c0       	rjmp	.+8      	; 0x437a <__fp_round+0x20>
    4372:	6f 5f       	subi	r22, 0xFF	; 255
    4374:	7f 4f       	sbci	r23, 0xFF	; 255
    4376:	8f 4f       	sbci	r24, 0xFF	; 255
    4378:	9f 4f       	sbci	r25, 0xFF	; 255
    437a:	08 95       	ret

0000437c <__udivmodqi4>:
    437c:	99 1b       	sub	r25, r25
    437e:	79 e0       	ldi	r23, 0x09	; 9
    4380:	04 c0       	rjmp	.+8      	; 0x438a <__udivmodqi4_ep>

00004382 <__udivmodqi4_loop>:
    4382:	99 1f       	adc	r25, r25
    4384:	96 17       	cp	r25, r22
    4386:	08 f0       	brcs	.+2      	; 0x438a <__udivmodqi4_ep>
    4388:	96 1b       	sub	r25, r22

0000438a <__udivmodqi4_ep>:
    438a:	88 1f       	adc	r24, r24
    438c:	7a 95       	dec	r23
    438e:	c9 f7       	brne	.-14     	; 0x4382 <__udivmodqi4_loop>
    4390:	80 95       	com	r24
    4392:	08 95       	ret

00004394 <__udivmodhi4>:
    4394:	aa 1b       	sub	r26, r26
    4396:	bb 1b       	sub	r27, r27
    4398:	51 e1       	ldi	r21, 0x11	; 17
    439a:	07 c0       	rjmp	.+14     	; 0x43aa <__udivmodhi4_ep>

0000439c <__udivmodhi4_loop>:
    439c:	aa 1f       	adc	r26, r26
    439e:	bb 1f       	adc	r27, r27
    43a0:	a6 17       	cp	r26, r22
    43a2:	b7 07       	cpc	r27, r23
    43a4:	10 f0       	brcs	.+4      	; 0x43aa <__udivmodhi4_ep>
    43a6:	a6 1b       	sub	r26, r22
    43a8:	b7 0b       	sbc	r27, r23

000043aa <__udivmodhi4_ep>:
    43aa:	88 1f       	adc	r24, r24
    43ac:	99 1f       	adc	r25, r25
    43ae:	5a 95       	dec	r21
    43b0:	a9 f7       	brne	.-22     	; 0x439c <__udivmodhi4_loop>
    43b2:	80 95       	com	r24
    43b4:	90 95       	com	r25
    43b6:	bc 01       	movw	r22, r24
    43b8:	cd 01       	movw	r24, r26
    43ba:	08 95       	ret

000043bc <__udivmodsi4>:
    43bc:	a1 e2       	ldi	r26, 0x21	; 33
    43be:	1a 2e       	mov	r1, r26
    43c0:	aa 1b       	sub	r26, r26
    43c2:	bb 1b       	sub	r27, r27
    43c4:	fd 01       	movw	r30, r26
    43c6:	0d c0       	rjmp	.+26     	; 0x43e2 <__udivmodsi4_ep>

000043c8 <__udivmodsi4_loop>:
    43c8:	aa 1f       	adc	r26, r26
    43ca:	bb 1f       	adc	r27, r27
    43cc:	ee 1f       	adc	r30, r30
    43ce:	ff 1f       	adc	r31, r31
    43d0:	a2 17       	cp	r26, r18
    43d2:	b3 07       	cpc	r27, r19
    43d4:	e4 07       	cpc	r30, r20
    43d6:	f5 07       	cpc	r31, r21
    43d8:	20 f0       	brcs	.+8      	; 0x43e2 <__udivmodsi4_ep>
    43da:	a2 1b       	sub	r26, r18
    43dc:	b3 0b       	sbc	r27, r19
    43de:	e4 0b       	sbc	r30, r20
    43e0:	f5 0b       	sbc	r31, r21

000043e2 <__udivmodsi4_ep>:
    43e2:	66 1f       	adc	r22, r22
    43e4:	77 1f       	adc	r23, r23
    43e6:	88 1f       	adc	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	1a 94       	dec	r1
    43ec:	69 f7       	brne	.-38     	; 0x43c8 <__udivmodsi4_loop>
    43ee:	60 95       	com	r22
    43f0:	70 95       	com	r23
    43f2:	80 95       	com	r24
    43f4:	90 95       	com	r25
    43f6:	9b 01       	movw	r18, r22
    43f8:	ac 01       	movw	r20, r24
    43fa:	bd 01       	movw	r22, r26
    43fc:	cf 01       	movw	r24, r30
    43fe:	08 95       	ret

00004400 <_exit>:
    4400:	f8 94       	cli

00004402 <__stop_program>:
    4402:	ff cf       	rjmp	.-2      	; 0x4402 <__stop_program>
