
Smart Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000422a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  0000422a  000042be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000c0  008000c0  0000431e  2**0
                  ALLOC
  3 .stab         00001e84  00000000  00000000  00004320  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a5  00000000  00000000  000061a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006850  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d60  00000000  00000000  000069f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d0  00000000  00000000  00008750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012d9  00000000  00000000  00008d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  00009ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068e  00000000  00000000  0000a680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6f  00000000  00000000  0000ad0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__vector_5>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      34:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      38:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      40:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>

00000054 <myFont>:
	...
      5c:	00 00 5f 00 00 00 00 00 00 00 07 00 07 00 00 00     .._.............
      6c:	00 14 7f 14 7f 14 00 00 00 24 2a 7f 2a 12 00 00     .........$*.*...
      7c:	00 23 13 08 64 62 00 00 00 36 49 55 22 50 00 00     .#..db...6IU"P..
      8c:	00 00 05 03 00 00 00 00 00 1c 22 41 00 00 00 00     .........."A....
      9c:	00 41 22 1c 00 00 00 00 00 08 2a 1c 2a 08 00 00     .A".......*.*...
      ac:	00 08 08 3e 08 08 00 00 00 a0 60 00 00 00 00 00     ...>......`.....
      bc:	00 08 08 08 08 08 00 00 00 60 60 00 00 00 00 00     .........``.....
      cc:	00 20 10 08 04 02 00 00 00 3e 51 49 45 3e 00 00     . .......>QIE>..
      dc:	00 00 42 7f 40 00 00 00 00 62 51 49 49 46 00 00     ..B.@....bQIIF..
      ec:	00 22 41 49 49 36 00 00 00 18 14 12 7f 10 00 00     ."AII6..........
      fc:	00 27 45 45 45 39 00 00 00 3c 4a 49 49 30 00 00     .'EEE9...<JII0..
     10c:	00 01 71 09 05 03 00 00 00 36 49 49 49 36 00 00     ..q......6III6..
     11c:	00 06 49 49 29 1e 00 00 00 00 36 36 00 00 00 00     ..II).....66....
     12c:	00 00 ac 6c 00 00 00 00 00 08 14 22 41 00 00 00     ...l......."A...
     13c:	00 14 14 14 14 14 00 00 00 41 22 14 08 00 00 00     .........A".....
     14c:	00 02 01 51 09 06 00 00 00 32 49 79 41 3e 00 00     ...Q.....2IyA>..
     15c:	00 7e 09 09 09 7e 00 00 00 7f 49 49 49 36 00 00     .~...~....III6..
     16c:	00 3e 41 41 41 22 00 00 00 7f 41 41 22 1c 00 00     .>AAA"....AA"...
     17c:	00 7f 49 49 49 41 00 00 00 7f 09 09 09 01 00 00     ..IIIA..........
     18c:	00 3e 41 41 51 72 00 00 00 7f 08 08 08 7f 00 00     .>AAQr..........
     19c:	00 41 7f 41 00 00 00 00 00 20 40 41 3f 01 00 00     .A.A..... @A?...
     1ac:	00 7f 08 14 22 41 00 00 00 7f 40 40 40 40 00 00     ...."A....@@@@..
     1bc:	00 7f 02 0c 02 7f 00 00 00 7f 04 08 10 7f 00 00     ................
     1cc:	00 3e 41 41 41 3e 00 00 00 7f 09 09 09 06 00 00     .>AAA>..........
     1dc:	00 3e 41 51 21 5e 00 00 00 7f 09 19 29 46 00 00     .>AQ!^......)F..
     1ec:	00 26 49 49 49 32 00 00 00 01 01 7f 01 01 00 00     .&III2..........
     1fc:	00 3f 40 40 40 3f 00 00 00 1f 20 40 20 1f 00 00     .?@@@?.... @ ...
     20c:	00 3f 40 38 40 3f 00 00 00 63 14 08 14 63 00 00     .?@8@?...c...c..
     21c:	00 03 04 78 04 03 00 00 00 61 51 49 45 43 00 00     ...x.....aQIEC..
     22c:	00 7f 41 41 00 00 00 00 00 02 04 08 10 20 00 00     ..AA......... ..
     23c:	00 41 41 7f 00 00 00 00 00 04 02 01 02 04 00 00     .AA.............
     24c:	00 80 80 80 80 80 00 00 00 01 02 04 00 00 00 00     ................
     25c:	00 20 54 54 54 78 00 00 00 7f 48 44 44 38 00 00     . TTTx....HDD8..
     26c:	00 38 44 44 28 00 00 00 00 38 44 44 48 7f 00 00     .8DD(....8DDH...
     27c:	00 38 54 54 54 18 00 00 00 08 7e 09 02 00 00 00     .8TTT.....~.....
     28c:	00 18 a4 a4 a4 7c 00 00 00 7f 08 04 04 78 00 00     .....|.......x..
     29c:	00 00 7d 00 00 00 00 00 00 80 84 7d 00 00 00 00     ..}........}....
     2ac:	00 7f 10 28 44 00 00 00 00 41 7f 40 00 00 00 00     ...(D....A.@....
     2bc:	00 7c 04 18 04 78 00 00 00 7c 08 04 7c 00 00 00     .|...x...|..|...
     2cc:	00 38 44 44 38 00 00 00 00 fc 24 24 18 00 00 00     .8DD8.....$$....
     2dc:	00 18 24 24 fc 00 00 00 00 00 7c 08 04 00 00 00     ..$$......|.....
     2ec:	00 48 54 54 24 00 00 00 00 04 7f 44 00 00 00 00     .HTT$......D....
     2fc:	00 3c 40 40 7c 00 00 00 00 1c 20 40 20 1c 00 00     .<@@|..... @ ...
     30c:	00 3c 40 30 40 3c 00 00 00 44 28 10 28 44 00 00     .<@0@<...D(.(D..
     31c:	00 1c a0 a0 7c 00 00 00 00 44 64 54 4c 44 00 00     ....|....DdTLD..
     32c:	00 08 36 41 00 00 00 00 00 00 7f 00 00 00 00 00     ..6A............
     33c:	00 41 36 08 00 00 00 00 00 02 01 01 02 01 00 00     .A6.............
     34c:	00 02 05 05 02 00 00 00                             ........

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf e5       	ldi	r28, 0x5F	; 95
     35a:	d8 e0       	ldi	r29, 0x08	; 8
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	10 e0       	ldi	r17, 0x00	; 0
     362:	a0 e6       	ldi	r26, 0x60	; 96
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	ea e2       	ldi	r30, 0x2A	; 42
     368:	f2 e4       	ldi	r31, 0x42	; 66
     36a:	02 c0       	rjmp	.+4      	; 0x370 <__do_copy_data+0x10>
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0
     370:	a0 3c       	cpi	r26, 0xC0	; 192
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <__do_copy_data+0xc>

00000376 <__do_clear_bss>:
     376:	10 e0       	ldi	r17, 0x00	; 0
     378:	a0 ec       	ldi	r26, 0xC0	; 192
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	ab 3c       	cpi	r26, 0xCB	; 203
     382:	b1 07       	cpc	r27, r17
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 53 09 	call	0x12a6	; 0x12a6 <main>
     38a:	0c 94 13 21 	jmp	0x4226	; 0x4226 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <ADC_init>:
#include"DIO.h"
#include"std_macros.h"
#include<avr/io.h>

void ADC_init(void)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
	DIO_vsetPINDir('A',0,0);
     39a:	81 e4       	ldi	r24, 0x41	; 65
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
	SET_BIT(ADCSRA,ADEN);
     3a4:	86 e2       	ldi	r24, 0x26	; 38
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	26 e2       	ldi	r18, 0x26	; 38
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	f9 01       	movw	r30, r18
     3ae:	20 81       	ld	r18, Z
     3b0:	20 68       	ori	r18, 0x80	; 128
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
	
	SET_BIT(ADCSRA,ADPS1);
     3b6:	86 e2       	ldi	r24, 0x26	; 38
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	26 e2       	ldi	r18, 0x26	; 38
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	f9 01       	movw	r30, r18
     3c0:	20 81       	ld	r18, Z
     3c2:	22 60       	ori	r18, 0x02	; 2
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADPS2);
     3c8:	86 e2       	ldi	r24, 0x26	; 38
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	26 e2       	ldi	r18, 0x26	; 38
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	24 60       	ori	r18, 0x04	; 4
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
	
	SET_BIT(ADMUX,REFS0);
     3da:	87 e2       	ldi	r24, 0x27	; 39
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	27 e2       	ldi	r18, 0x27	; 39
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	f9 01       	movw	r30, r18
     3e4:	20 81       	ld	r18, Z
     3e6:	20 64       	ori	r18, 0x40	; 64
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
	SET_BIT(ADMUX,REFS1);
     3ec:	87 e2       	ldi	r24, 0x27	; 39
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	27 e2       	ldi	r18, 0x27	; 39
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	f9 01       	movw	r30, r18
     3f6:	20 81       	ld	r18, Z
     3f8:	20 68       	ori	r18, 0x80	; 128
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
	
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <ADC_read>:
unsigned short ADC_read(void)
{
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	00 d0       	rcall	.+0      	; 0x40a <ADC_read+0x6>
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
     40e:	86 e2       	ldi	r24, 0x26	; 38
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	26 e2       	ldi	r18, 0x26	; 38
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	20 64       	ori	r18, 0x40	; 64
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
	while(1 == READ_BIT(ADCSRA,ADIF));
     420:	00 00       	nop
     422:	86 e2       	ldi	r24, 0x26	; 38
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	80 71       	andi	r24, 0x10	; 16
     430:	90 70       	andi	r25, 0x00	; 0
     432:	95 95       	asr	r25
     434:	87 95       	ror	r24
     436:	95 95       	asr	r25
     438:	87 95       	ror	r24
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	95 95       	asr	r25
     440:	87 95       	ror	r24
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	91 05       	cpc	r25, r1
     446:	69 f3       	breq	.-38     	; 0x422 <ADC_read+0x1e>
	unsigned short return_value = ADCL;
     448:	84 e2       	ldi	r24, 0x24	; 36
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	fc 01       	movw	r30, r24
     44e:	80 81       	ld	r24, Z
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9a 83       	std	Y+2, r25	; 0x02
     456:	89 83       	std	Y+1, r24	; 0x01
	return_value |= ADCH<<8;
     458:	85 e2       	ldi	r24, 0x25	; 37
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	fc 01       	movw	r30, r24
     45e:	80 81       	ld	r24, Z
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	98 2f       	mov	r25, r24
     466:	88 27       	eor	r24, r24
     468:	29 81       	ldd	r18, Y+1	; 0x01
     46a:	3a 81       	ldd	r19, Y+2	; 0x02
     46c:	82 2b       	or	r24, r18
     46e:	93 2b       	or	r25, r19
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,ADIF);
     474:	86 e2       	ldi	r24, 0x26	; 38
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	26 e2       	ldi	r18, 0x26	; 38
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	20 61       	ori	r18, 0x10	; 16
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
	
	return return_value;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <button_init>:
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	00 d0       	rcall	.+0      	; 0x49a <button_init+0x6>
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	6a 83       	std	Y+2, r22	; 0x02
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	6a 81       	ldd	r22, Y+2	; 0x02
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_vsetPINDir>
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <button_read>:
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <button_read+0x6>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	6a 83       	std	Y+2, r22	; 0x02
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	6a 81       	ldd	r22, Y+2	; 0x02
     4c8:	0e 94 39 04 	call	0x872	; 0x872 <DIO_u8read>
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	00 d0       	rcall	.+0      	; 0x4dc <DIO_vsetPINDir+0x6>
     4dc:	0f 92       	push	r0
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	89 83       	std	Y+1, r24	; 0x01
     4e4:	6a 83       	std	Y+2, r22	; 0x02
     4e6:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	82 34       	cpi	r24, 0x42	; 66
     4f0:	91 05       	cpc	r25, r1
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <DIO_vsetPINDir+0x20>
     4f4:	40 c0       	rjmp	.+128    	; 0x576 <DIO_vsetPINDir+0xa0>
     4f6:	83 34       	cpi	r24, 0x43	; 67
     4f8:	91 05       	cpc	r25, r1
     4fa:	24 f4       	brge	.+8      	; 0x504 <DIO_vsetPINDir+0x2e>
     4fc:	81 34       	cpi	r24, 0x41	; 65
     4fe:	91 05       	cpc	r25, r1
     500:	51 f0       	breq	.+20     	; 0x516 <DIO_vsetPINDir+0x40>
     502:	c9 c0       	rjmp	.+402    	; 0x696 <DIO_vsetPINDir+0x1c0>
     504:	83 34       	cpi	r24, 0x43	; 67
     506:	91 05       	cpc	r25, r1
     508:	09 f4       	brne	.+2      	; 0x50c <DIO_vsetPINDir+0x36>
     50a:	65 c0       	rjmp	.+202    	; 0x5d6 <DIO_vsetPINDir+0x100>
     50c:	84 34       	cpi	r24, 0x44	; 68
     50e:	91 05       	cpc	r25, r1
     510:	09 f4       	brne	.+2      	; 0x514 <DIO_vsetPINDir+0x3e>
     512:	91 c0       	rjmp	.+290    	; 0x636 <DIO_vsetPINDir+0x160>
     514:	c0 c0       	rjmp	.+384    	; 0x696 <DIO_vsetPINDir+0x1c0>
	{
		
		
		case 'A':
		if(direction==1)
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	b1 f4       	brne	.+44     	; 0x548 <DIO_vsetPINDir+0x72>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     51c:	8a e3       	ldi	r24, 0x3A	; 58
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	2a e3       	ldi	r18, 0x3A	; 58
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	f9 01       	movw	r30, r18
     526:	20 81       	ld	r18, Z
     528:	62 2f       	mov	r22, r18
     52a:	2a 81       	ldd	r18, Y+2	; 0x02
     52c:	42 2f       	mov	r20, r18
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	21 e0       	ldi	r18, 0x01	; 1
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	04 2e       	mov	r0, r20
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_vsetPINDir+0x66>
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	0a 94       	dec	r0
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_vsetPINDir+0x62>
     540:	26 2b       	or	r18, r22
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
		}
		break;
     546:	a8 c0       	rjmp	.+336    	; 0x698 <DIO_vsetPINDir+0x1c2>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     548:	8a e3       	ldi	r24, 0x3A	; 58
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	2a e3       	ldi	r18, 0x3A	; 58
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	f9 01       	movw	r30, r18
     552:	20 81       	ld	r18, Z
     554:	62 2f       	mov	r22, r18
     556:	2a 81       	ldd	r18, Y+2	; 0x02
     558:	42 2f       	mov	r20, r18
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	04 2e       	mov	r0, r20
     562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_vsetPINDir+0x92>
     564:	22 0f       	add	r18, r18
     566:	33 1f       	adc	r19, r19
     568:	0a 94       	dec	r0
     56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_vsetPINDir+0x8e>
     56c:	20 95       	com	r18
     56e:	26 23       	and	r18, r22
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
		}
		break;
     574:	91 c0       	rjmp	.+290    	; 0x698 <DIO_vsetPINDir+0x1c2>
		case 'B':
		if(direction==1)
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	b1 f4       	brne	.+44     	; 0x5a8 <DIO_vsetPINDir+0xd2>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     57c:	87 e3       	ldi	r24, 0x37	; 55
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	27 e3       	ldi	r18, 0x37	; 55
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	62 2f       	mov	r22, r18
     58a:	2a 81       	ldd	r18, Y+2	; 0x02
     58c:	42 2f       	mov	r20, r18
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	04 2e       	mov	r0, r20
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_vsetPINDir+0xc6>
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_vsetPINDir+0xc2>
     5a0:	26 2b       	or	r18, r22
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
		}
		break;
     5a6:	78 c0       	rjmp	.+240    	; 0x698 <DIO_vsetPINDir+0x1c2>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     5a8:	87 e3       	ldi	r24, 0x37	; 55
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	27 e3       	ldi	r18, 0x37	; 55
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	62 2f       	mov	r22, r18
     5b6:	2a 81       	ldd	r18, Y+2	; 0x02
     5b8:	42 2f       	mov	r20, r18
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	04 2e       	mov	r0, r20
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_vsetPINDir+0xf2>
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	0a 94       	dec	r0
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_vsetPINDir+0xee>
     5cc:	20 95       	com	r18
     5ce:	26 23       	and	r18, r22
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
		}
		break;
     5d4:	61 c0       	rjmp	.+194    	; 0x698 <DIO_vsetPINDir+0x1c2>
		case 'C':
		if(direction==1)
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	b1 f4       	brne	.+44     	; 0x608 <DIO_vsetPINDir+0x132>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     5dc:	84 e3       	ldi	r24, 0x34	; 52
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	24 e3       	ldi	r18, 0x34	; 52
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	62 2f       	mov	r22, r18
     5ea:	2a 81       	ldd	r18, Y+2	; 0x02
     5ec:	42 2f       	mov	r20, r18
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	04 2e       	mov	r0, r20
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_vsetPINDir+0x126>
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	0a 94       	dec	r0
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_vsetPINDir+0x122>
     600:	26 2b       	or	r18, r22
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
		}
		break;
     606:	48 c0       	rjmp	.+144    	; 0x698 <DIO_vsetPINDir+0x1c2>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     608:	84 e3       	ldi	r24, 0x34	; 52
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	24 e3       	ldi	r18, 0x34	; 52
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	f9 01       	movw	r30, r18
     612:	20 81       	ld	r18, Z
     614:	62 2f       	mov	r22, r18
     616:	2a 81       	ldd	r18, Y+2	; 0x02
     618:	42 2f       	mov	r20, r18
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	04 2e       	mov	r0, r20
     622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_vsetPINDir+0x152>
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	0a 94       	dec	r0
     62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_vsetPINDir+0x14e>
     62c:	20 95       	com	r18
     62e:	26 23       	and	r18, r22
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
		}
		break;
     634:	31 c0       	rjmp	.+98     	; 0x698 <DIO_vsetPINDir+0x1c2>
		case 'D':
		if(direction==1)
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	b1 f4       	brne	.+44     	; 0x668 <DIO_vsetPINDir+0x192>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     63c:	81 e3       	ldi	r24, 0x31	; 49
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	21 e3       	ldi	r18, 0x31	; 49
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	f9 01       	movw	r30, r18
     646:	20 81       	ld	r18, Z
     648:	62 2f       	mov	r22, r18
     64a:	2a 81       	ldd	r18, Y+2	; 0x02
     64c:	42 2f       	mov	r20, r18
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	21 e0       	ldi	r18, 0x01	; 1
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	04 2e       	mov	r0, r20
     656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_vsetPINDir+0x186>
     658:	22 0f       	add	r18, r18
     65a:	33 1f       	adc	r19, r19
     65c:	0a 94       	dec	r0
     65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_vsetPINDir+0x182>
     660:	26 2b       	or	r18, r22
     662:	fc 01       	movw	r30, r24
     664:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
		}
		break;
     666:	18 c0       	rjmp	.+48     	; 0x698 <DIO_vsetPINDir+0x1c2>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     668:	81 e3       	ldi	r24, 0x31	; 49
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	21 e3       	ldi	r18, 0x31	; 49
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	62 2f       	mov	r22, r18
     676:	2a 81       	ldd	r18, Y+2	; 0x02
     678:	42 2f       	mov	r20, r18
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	04 2e       	mov	r0, r20
     682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_vsetPINDir+0x1b2>
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_vsetPINDir+0x1ae>
     68c:	20 95       	com	r18
     68e:	26 23       	and	r18, r22
     690:	fc 01       	movw	r30, r24
     692:	20 83       	st	Z, r18
		}
		break;
     694:	01 c0       	rjmp	.+2      	; 0x698 <DIO_vsetPINDir+0x1c2>
		default: 
		break;
     696:	00 00       	nop
	}
}
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <DIO_write+0x6>
     6aa:	0f 92       	push	r0
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	6a 83       	std	Y+2, r22	; 0x02
     6b4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	82 34       	cpi	r24, 0x42	; 66
     6be:	91 05       	cpc	r25, r1
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <DIO_write+0x20>
     6c2:	40 c0       	rjmp	.+128    	; 0x744 <DIO_write+0xa0>
     6c4:	83 34       	cpi	r24, 0x43	; 67
     6c6:	91 05       	cpc	r25, r1
     6c8:	24 f4       	brge	.+8      	; 0x6d2 <DIO_write+0x2e>
     6ca:	81 34       	cpi	r24, 0x41	; 65
     6cc:	91 05       	cpc	r25, r1
     6ce:	51 f0       	breq	.+20     	; 0x6e4 <DIO_write+0x40>
     6d0:	c9 c0       	rjmp	.+402    	; 0x864 <__stack+0x5>
     6d2:	83 34       	cpi	r24, 0x43	; 67
     6d4:	91 05       	cpc	r25, r1
     6d6:	09 f4       	brne	.+2      	; 0x6da <DIO_write+0x36>
     6d8:	65 c0       	rjmp	.+202    	; 0x7a4 <DIO_write+0x100>
     6da:	84 34       	cpi	r24, 0x44	; 68
     6dc:	91 05       	cpc	r25, r1
     6de:	09 f4       	brne	.+2      	; 0x6e2 <DIO_write+0x3e>
     6e0:	91 c0       	rjmp	.+290    	; 0x804 <DIO_write+0x160>
     6e2:	c0 c0       	rjmp	.+384    	; 0x864 <__stack+0x5>
	{
		case 'A' :
		
		if(outputvalue==1)
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	b1 f4       	brne	.+44     	; 0x716 <DIO_write+0x72>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     6ea:	8b e3       	ldi	r24, 0x3B	; 59
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	2b e3       	ldi	r18, 0x3B	; 59
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	62 2f       	mov	r22, r18
     6f8:	2a 81       	ldd	r18, Y+2	; 0x02
     6fa:	42 2f       	mov	r20, r18
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	04 2e       	mov	r0, r20
     704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_write+0x66>
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_write+0x62>
     70e:	26 2b       	or	r18, r22
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
		}
		break ;
     714:	a8 c0       	rjmp	.+336    	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     716:	8b e3       	ldi	r24, 0x3B	; 59
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	2b e3       	ldi	r18, 0x3B	; 59
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	62 2f       	mov	r22, r18
     724:	2a 81       	ldd	r18, Y+2	; 0x02
     726:	42 2f       	mov	r20, r18
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	04 2e       	mov	r0, r20
     730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_write+0x92>
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	0a 94       	dec	r0
     738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_write+0x8e>
     73a:	20 95       	com	r18
     73c:	26 23       	and	r18, r22
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
		}
		break ;
     742:	91 c0       	rjmp	.+290    	; 0x866 <__stack+0x7>
		case 'B':
		
		if(outputvalue==1)
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	b1 f4       	brne	.+44     	; 0x776 <DIO_write+0xd2>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     74a:	88 e3       	ldi	r24, 0x38	; 56
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	28 e3       	ldi	r18, 0x38	; 56
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	f9 01       	movw	r30, r18
     754:	20 81       	ld	r18, Z
     756:	62 2f       	mov	r22, r18
     758:	2a 81       	ldd	r18, Y+2	; 0x02
     75a:	42 2f       	mov	r20, r18
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	04 2e       	mov	r0, r20
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_write+0xc6>
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	0a 94       	dec	r0
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_write+0xc2>
     76e:	26 2b       	or	r18, r22
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
		}
		break ;
     774:	78 c0       	rjmp	.+240    	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     776:	88 e3       	ldi	r24, 0x38	; 56
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	28 e3       	ldi	r18, 0x38	; 56
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	f9 01       	movw	r30, r18
     780:	20 81       	ld	r18, Z
     782:	62 2f       	mov	r22, r18
     784:	2a 81       	ldd	r18, Y+2	; 0x02
     786:	42 2f       	mov	r20, r18
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	04 2e       	mov	r0, r20
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_write+0xf2>
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	0a 94       	dec	r0
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_write+0xee>
     79a:	20 95       	com	r18
     79c:	26 23       	and	r18, r22
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
		}
		break ;
     7a2:	61 c0       	rjmp	.+194    	; 0x866 <__stack+0x7>
		case 'C' :
		
		if(outputvalue==1)
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	b1 f4       	brne	.+44     	; 0x7d6 <DIO_write+0x132>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     7aa:	85 e3       	ldi	r24, 0x35	; 53
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	25 e3       	ldi	r18, 0x35	; 53
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	f9 01       	movw	r30, r18
     7b4:	20 81       	ld	r18, Z
     7b6:	62 2f       	mov	r22, r18
     7b8:	2a 81       	ldd	r18, Y+2	; 0x02
     7ba:	42 2f       	mov	r20, r18
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	04 2e       	mov	r0, r20
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_write+0x126>
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_write+0x122>
     7ce:	26 2b       	or	r18, r22
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
		}
		break ;
     7d4:	48 c0       	rjmp	.+144    	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     7d6:	85 e3       	ldi	r24, 0x35	; 53
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	25 e3       	ldi	r18, 0x35	; 53
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	f9 01       	movw	r30, r18
     7e0:	20 81       	ld	r18, Z
     7e2:	62 2f       	mov	r22, r18
     7e4:	2a 81       	ldd	r18, Y+2	; 0x02
     7e6:	42 2f       	mov	r20, r18
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	04 2e       	mov	r0, r20
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_write+0x152>
     7f2:	22 0f       	add	r18, r18
     7f4:	33 1f       	adc	r19, r19
     7f6:	0a 94       	dec	r0
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_write+0x14e>
     7fa:	20 95       	com	r18
     7fc:	26 23       	and	r18, r22
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
		}
		break ;
     802:	31 c0       	rjmp	.+98     	; 0x866 <__stack+0x7>
		case 'D':
		
		if(outputvalue==1)
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	b1 f4       	brne	.+44     	; 0x836 <DIO_write+0x192>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     80a:	82 e3       	ldi	r24, 0x32	; 50
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	22 e3       	ldi	r18, 0x32	; 50
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	20 81       	ld	r18, Z
     816:	62 2f       	mov	r22, r18
     818:	2a 81       	ldd	r18, Y+2	; 0x02
     81a:	42 2f       	mov	r20, r18
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	21 e0       	ldi	r18, 0x01	; 1
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	04 2e       	mov	r0, r20
     824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_write+0x186>
     826:	22 0f       	add	r18, r18
     828:	33 1f       	adc	r19, r19
     82a:	0a 94       	dec	r0
     82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_write+0x182>
     82e:	26 2b       	or	r18, r22
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
		}
		break ;
     834:	18 c0       	rjmp	.+48     	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     836:	82 e3       	ldi	r24, 0x32	; 50
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	22 e3       	ldi	r18, 0x32	; 50
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	62 2f       	mov	r22, r18
     844:	2a 81       	ldd	r18, Y+2	; 0x02
     846:	42 2f       	mov	r20, r18
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	04 2e       	mov	r0, r20
     850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_write+0x1b2>
     852:	22 0f       	add	r18, r18
     854:	33 1f       	adc	r19, r19
     856:	0a 94       	dec	r0
     858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_write+0x1ae>
     85a:	20 95       	com	r18
     85c:	26 23       	and	r18, r22
     85e:	fc 01       	movw	r30, r24
     860:	20 83       	st	Z, r18
		}
		break ;
     862:	01 c0       	rjmp	.+2      	; 0x866 <__stack+0x7>
		default: break ;
     864:	00 00       	nop
	}
}
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	00 d0       	rcall	.+0      	; 0x878 <DIO_u8read+0x6>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	8a 83       	std	Y+2, r24	; 0x02
     880:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
     882:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	82 34       	cpi	r24, 0x42	; 66
     88c:	91 05       	cpc	r25, r1
     88e:	71 f1       	breq	.+92     	; 0x8ec <DIO_u8read+0x7a>
     890:	83 34       	cpi	r24, 0x43	; 67
     892:	91 05       	cpc	r25, r1
     894:	24 f4       	brge	.+8      	; 0x89e <DIO_u8read+0x2c>
     896:	81 34       	cpi	r24, 0x41	; 65
     898:	91 05       	cpc	r25, r1
     89a:	51 f0       	breq	.+20     	; 0x8b0 <DIO_u8read+0x3e>
     89c:	81 c0       	rjmp	.+258    	; 0x9a0 <DIO_u8read+0x12e>
     89e:	83 34       	cpi	r24, 0x43	; 67
     8a0:	91 05       	cpc	r25, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <DIO_u8read+0x34>
     8a4:	41 c0       	rjmp	.+130    	; 0x928 <DIO_u8read+0xb6>
     8a6:	84 34       	cpi	r24, 0x44	; 68
     8a8:	91 05       	cpc	r25, r1
     8aa:	09 f4       	brne	.+2      	; 0x8ae <DIO_u8read+0x3c>
     8ac:	5b c0       	rjmp	.+182    	; 0x964 <DIO_u8read+0xf2>
     8ae:	78 c0       	rjmp	.+240    	; 0x9a0 <DIO_u8read+0x12e>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     8b0:	89 e3       	ldi	r24, 0x39	; 57
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	28 2f       	mov	r18, r24
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	8b 81       	ldd	r24, Y+3	; 0x03
     8be:	48 2f       	mov	r20, r24
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	04 2e       	mov	r0, r20
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <DIO_u8read+0x5c>
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <DIO_u8read+0x58>
     8d2:	82 23       	and	r24, r18
     8d4:	93 23       	and	r25, r19
     8d6:	2b 81       	ldd	r18, Y+3	; 0x03
     8d8:	22 2f       	mov	r18, r18
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	02 2e       	mov	r0, r18
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <DIO_u8read+0x72>
     8e0:	95 95       	asr	r25
     8e2:	87 95       	ror	r24
     8e4:	0a 94       	dec	r0
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <DIO_u8read+0x6e>
     8e8:	89 83       	std	Y+1, r24	; 0x01
		break;
     8ea:	5b c0       	rjmp	.+182    	; 0x9a2 <DIO_u8read+0x130>
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     8ec:	86 e3       	ldi	r24, 0x36	; 54
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	80 81       	ld	r24, Z
     8f4:	28 2f       	mov	r18, r24
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	48 2f       	mov	r20, r24
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	04 2e       	mov	r0, r20
     904:	02 c0       	rjmp	.+4      	; 0x90a <DIO_u8read+0x98>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	0a 94       	dec	r0
     90c:	e2 f7       	brpl	.-8      	; 0x906 <DIO_u8read+0x94>
     90e:	82 23       	and	r24, r18
     910:	93 23       	and	r25, r19
     912:	2b 81       	ldd	r18, Y+3	; 0x03
     914:	22 2f       	mov	r18, r18
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	02 2e       	mov	r0, r18
     91a:	02 c0       	rjmp	.+4      	; 0x920 <DIO_u8read+0xae>
     91c:	95 95       	asr	r25
     91e:	87 95       	ror	r24
     920:	0a 94       	dec	r0
     922:	e2 f7       	brpl	.-8      	; 0x91c <DIO_u8read+0xaa>
     924:	89 83       	std	Y+1, r24	; 0x01
		break;
     926:	3d c0       	rjmp	.+122    	; 0x9a2 <DIO_u8read+0x130>
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     928:	83 e3       	ldi	r24, 0x33	; 51
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	fc 01       	movw	r30, r24
     92e:	80 81       	ld	r24, Z
     930:	28 2f       	mov	r18, r24
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	48 2f       	mov	r20, r24
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	04 2e       	mov	r0, r20
     940:	02 c0       	rjmp	.+4      	; 0x946 <DIO_u8read+0xd4>
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	0a 94       	dec	r0
     948:	e2 f7       	brpl	.-8      	; 0x942 <DIO_u8read+0xd0>
     94a:	82 23       	and	r24, r18
     94c:	93 23       	and	r25, r19
     94e:	2b 81       	ldd	r18, Y+3	; 0x03
     950:	22 2f       	mov	r18, r18
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	02 2e       	mov	r0, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_u8read+0xea>
     958:	95 95       	asr	r25
     95a:	87 95       	ror	r24
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_u8read+0xe6>
     960:	89 83       	std	Y+1, r24	; 0x01
		break;
     962:	1f c0       	rjmp	.+62     	; 0x9a2 <DIO_u8read+0x130>
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     964:	80 e3       	ldi	r24, 0x30	; 48
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	28 2f       	mov	r18, r24
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	48 2f       	mov	r20, r24
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	04 2e       	mov	r0, r20
     97c:	02 c0       	rjmp	.+4      	; 0x982 <DIO_u8read+0x110>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	0a 94       	dec	r0
     984:	e2 f7       	brpl	.-8      	; 0x97e <DIO_u8read+0x10c>
     986:	82 23       	and	r24, r18
     988:	93 23       	and	r25, r19
     98a:	2b 81       	ldd	r18, Y+3	; 0x03
     98c:	22 2f       	mov	r18, r18
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	02 2e       	mov	r0, r18
     992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_u8read+0x126>
     994:	95 95       	asr	r25
     996:	87 95       	ror	r24
     998:	0a 94       	dec	r0
     99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_u8read+0x122>
     99c:	89 83       	std	Y+1, r24	; 0x01
		break;
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <DIO_u8read+0x130>
		default: 
		break;
     9a0:	00 00       	nop
	}
	return return_value ;
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <DIO_toggle+0x6>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	82 34       	cpi	r24, 0x42	; 66
     9c6:	91 05       	cpc	r25, r1
     9c8:	29 f1       	breq	.+74     	; 0xa14 <DIO_toggle+0x64>
     9ca:	83 34       	cpi	r24, 0x43	; 67
     9cc:	91 05       	cpc	r25, r1
     9ce:	24 f4       	brge	.+8      	; 0x9d8 <DIO_toggle+0x28>
     9d0:	81 34       	cpi	r24, 0x41	; 65
     9d2:	91 05       	cpc	r25, r1
     9d4:	49 f0       	breq	.+18     	; 0x9e8 <DIO_toggle+0x38>
     9d6:	60 c0       	rjmp	.+192    	; 0xa98 <DIO_toggle+0xe8>
     9d8:	83 34       	cpi	r24, 0x43	; 67
     9da:	91 05       	cpc	r25, r1
     9dc:	89 f1       	breq	.+98     	; 0xa40 <DIO_toggle+0x90>
     9de:	84 34       	cpi	r24, 0x44	; 68
     9e0:	91 05       	cpc	r25, r1
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <DIO_toggle+0x36>
     9e4:	43 c0       	rjmp	.+134    	; 0xa6c <DIO_toggle+0xbc>
     9e6:	58 c0       	rjmp	.+176    	; 0xa98 <DIO_toggle+0xe8>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
     9e8:	8b e3       	ldi	r24, 0x3B	; 59
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	2b e3       	ldi	r18, 0x3B	; 59
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	20 81       	ld	r18, Z
     9f4:	62 2f       	mov	r22, r18
     9f6:	2a 81       	ldd	r18, Y+2	; 0x02
     9f8:	42 2f       	mov	r20, r18
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	04 2e       	mov	r0, r20
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_toggle+0x58>
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	0a 94       	dec	r0
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_toggle+0x54>
     a0c:	26 27       	eor	r18, r22
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
		break;
     a12:	43 c0       	rjmp	.+134    	; 0xa9a <DIO_toggle+0xea>
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
     a14:	88 e3       	ldi	r24, 0x38	; 56
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	28 e3       	ldi	r18, 0x38	; 56
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	f9 01       	movw	r30, r18
     a1e:	20 81       	ld	r18, Z
     a20:	62 2f       	mov	r22, r18
     a22:	2a 81       	ldd	r18, Y+2	; 0x02
     a24:	42 2f       	mov	r20, r18
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	04 2e       	mov	r0, r20
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_toggle+0x84>
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	0a 94       	dec	r0
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_toggle+0x80>
     a38:	26 27       	eor	r18, r22
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
		break;
     a3e:	2d c0       	rjmp	.+90     	; 0xa9a <DIO_toggle+0xea>
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
     a40:	85 e3       	ldi	r24, 0x35	; 53
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	25 e3       	ldi	r18, 0x35	; 53
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	f9 01       	movw	r30, r18
     a4a:	20 81       	ld	r18, Z
     a4c:	62 2f       	mov	r22, r18
     a4e:	2a 81       	ldd	r18, Y+2	; 0x02
     a50:	42 2f       	mov	r20, r18
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	04 2e       	mov	r0, r20
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_toggle+0xb0>
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	0a 94       	dec	r0
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_toggle+0xac>
     a64:	26 27       	eor	r18, r22
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
		break;
     a6a:	17 c0       	rjmp	.+46     	; 0xa9a <DIO_toggle+0xea>
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
     a6c:	82 e3       	ldi	r24, 0x32	; 50
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	22 e3       	ldi	r18, 0x32	; 50
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	62 2f       	mov	r22, r18
     a7a:	2a 81       	ldd	r18, Y+2	; 0x02
     a7c:	42 2f       	mov	r20, r18
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	21 e0       	ldi	r18, 0x01	; 1
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	04 2e       	mov	r0, r20
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_toggle+0xdc>
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	0a 94       	dec	r0
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <DIO_toggle+0xd8>
     a90:	26 27       	eor	r18, r22
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
		break;
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <DIO_toggle+0xea>
		default: break;
     a98:	00 00       	nop
	}
}
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <DIO_set_port_direction+0x6>
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	82 34       	cpi	r24, 0x42	; 66
     aba:	91 05       	cpc	r25, r1
     abc:	a1 f0       	breq	.+40     	; 0xae6 <DIO_set_port_direction+0x42>
     abe:	83 34       	cpi	r24, 0x43	; 67
     ac0:	91 05       	cpc	r25, r1
     ac2:	24 f4       	brge	.+8      	; 0xacc <DIO_set_port_direction+0x28>
     ac4:	81 34       	cpi	r24, 0x41	; 65
     ac6:	91 05       	cpc	r25, r1
     ac8:	41 f0       	breq	.+16     	; 0xada <DIO_set_port_direction+0x36>
     aca:	1f c0       	rjmp	.+62     	; 0xb0a <DIO_set_port_direction+0x66>
     acc:	83 34       	cpi	r24, 0x43	; 67
     ace:	91 05       	cpc	r25, r1
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <DIO_set_port_direction+0x4e>
     ad2:	84 34       	cpi	r24, 0x44	; 68
     ad4:	91 05       	cpc	r25, r1
     ad6:	99 f0       	breq	.+38     	; 0xafe <DIO_set_port_direction+0x5a>
     ad8:	18 c0       	rjmp	.+48     	; 0xb0a <DIO_set_port_direction+0x66>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
     ada:	8a e3       	ldi	r24, 0x3A	; 58
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	2a 81       	ldd	r18, Y+2	; 0x02
     ae0:	fc 01       	movw	r30, r24
     ae2:	20 83       	st	Z, r18
		break ;
     ae4:	13 c0       	rjmp	.+38     	; 0xb0c <DIO_set_port_direction+0x68>
		case 'B':
		DDRB=direction; //set the direction of port B
     ae6:	87 e3       	ldi	r24, 0x37	; 55
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	2a 81       	ldd	r18, Y+2	; 0x02
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18
		break ;
     af0:	0d c0       	rjmp	.+26     	; 0xb0c <DIO_set_port_direction+0x68>
		case 'C' :
		DDRC=direction; //set the direction of port C
     af2:	84 e3       	ldi	r24, 0x34	; 52
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	2a 81       	ldd	r18, Y+2	; 0x02
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
		break ;
     afc:	07 c0       	rjmp	.+14     	; 0xb0c <DIO_set_port_direction+0x68>
		case 'D':
		DDRD=direction; //set the direction of port D
     afe:	81 e3       	ldi	r24, 0x31	; 49
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	2a 81       	ldd	r18, Y+2	; 0x02
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
		break ;
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <DIO_set_port_direction+0x68>
		default:
		break ;
     b0a:	00 00       	nop
	}
	
}
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <DIO_write_port+0x6>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	88 2f       	mov	r24, r24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	82 34       	cpi	r24, 0x42	; 66
     b2c:	91 05       	cpc	r25, r1
     b2e:	a1 f0       	breq	.+40     	; 0xb58 <DIO_write_port+0x42>
     b30:	83 34       	cpi	r24, 0x43	; 67
     b32:	91 05       	cpc	r25, r1
     b34:	24 f4       	brge	.+8      	; 0xb3e <DIO_write_port+0x28>
     b36:	81 34       	cpi	r24, 0x41	; 65
     b38:	91 05       	cpc	r25, r1
     b3a:	41 f0       	breq	.+16     	; 0xb4c <DIO_write_port+0x36>
     b3c:	1f c0       	rjmp	.+62     	; 0xb7c <DIO_write_port+0x66>
     b3e:	83 34       	cpi	r24, 0x43	; 67
     b40:	91 05       	cpc	r25, r1
     b42:	81 f0       	breq	.+32     	; 0xb64 <DIO_write_port+0x4e>
     b44:	84 34       	cpi	r24, 0x44	; 68
     b46:	91 05       	cpc	r25, r1
     b48:	99 f0       	breq	.+38     	; 0xb70 <DIO_write_port+0x5a>
     b4a:	18 c0       	rjmp	.+48     	; 0xb7c <DIO_write_port+0x66>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     b4c:	8b e3       	ldi	r24, 0x3B	; 59
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	2a 81       	ldd	r18, Y+2	; 0x02
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
		break ;
     b56:	13 c0       	rjmp	.+38     	; 0xb7e <DIO_write_port+0x68>
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     b58:	88 e3       	ldi	r24, 0x38	; 56
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	2a 81       	ldd	r18, Y+2	; 0x02
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
		break ;
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <DIO_write_port+0x68>
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     b64:	85 e3       	ldi	r24, 0x35	; 53
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	2a 81       	ldd	r18, Y+2	; 0x02
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
		break ;
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <DIO_write_port+0x68>
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     b70:	82 e3       	ldi	r24, 0x32	; 50
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	2a 81       	ldd	r18, Y+2	; 0x02
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
		break ;
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <DIO_write_port+0x68>
		default:
		 break ;
     b7c:	00 00       	nop
	}
}
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <DIO_read_port+0x6>
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
     b94:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	82 34       	cpi	r24, 0x42	; 66
     b9e:	91 05       	cpc	r25, r1
     ba0:	a1 f0       	breq	.+40     	; 0xbca <DIO_read_port+0x42>
     ba2:	83 34       	cpi	r24, 0x43	; 67
     ba4:	91 05       	cpc	r25, r1
     ba6:	24 f4       	brge	.+8      	; 0xbb0 <DIO_read_port+0x28>
     ba8:	81 34       	cpi	r24, 0x41	; 65
     baa:	91 05       	cpc	r25, r1
     bac:	41 f0       	breq	.+16     	; 0xbbe <DIO_read_port+0x36>
     bae:	1f c0       	rjmp	.+62     	; 0xbee <DIO_read_port+0x66>
     bb0:	83 34       	cpi	r24, 0x43	; 67
     bb2:	91 05       	cpc	r25, r1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <DIO_read_port+0x4e>
     bb6:	84 34       	cpi	r24, 0x44	; 68
     bb8:	91 05       	cpc	r25, r1
     bba:	99 f0       	breq	.+38     	; 0xbe2 <DIO_read_port+0x5a>
     bbc:	18 c0       	rjmp	.+48     	; 0xbee <DIO_read_port+0x66>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
     bbe:	89 e3       	ldi	r24, 0x39	; 57
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	fc 01       	movw	r30, r24
     bc4:	80 81       	ld	r24, Z
     bc6:	89 83       	std	Y+1, r24	; 0x01
		break ;
     bc8:	13 c0       	rjmp	.+38     	; 0xbf0 <DIO_read_port+0x68>
		case 'B':
		return_val=PINB; // read the value of port B 
     bca:	86 e3       	ldi	r24, 0x36	; 54
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	89 83       	std	Y+1, r24	; 0x01
		break ;
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <DIO_read_port+0x68>
		case 'C' :
		return_val=PINC; // read the value of port C 
     bd6:	83 e3       	ldi	r24, 0x33	; 51
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	fc 01       	movw	r30, r24
     bdc:	80 81       	ld	r24, Z
     bde:	89 83       	std	Y+1, r24	; 0x01
		break ;
     be0:	07 c0       	rjmp	.+14     	; 0xbf0 <DIO_read_port+0x68>
		case 'D':
		return_val=PIND; // read the value of port D 
     be2:	80 e3       	ldi	r24, 0x30	; 48
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	89 83       	std	Y+1, r24	; 0x01
		break ;
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <DIO_read_port+0x68>
		default:
		break ;
     bee:	00 00       	nop
	}
	return return_val;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	00 d0       	rcall	.+0      	; 0xc02 <DIO_vconnectpullup+0x6>
     c02:	0f 92       	push	r0
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	6a 83       	std	Y+2, r22	; 0x02
     c0c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	82 34       	cpi	r24, 0x42	; 66
     c16:	91 05       	cpc	r25, r1
     c18:	09 f4       	brne	.+2      	; 0xc1c <DIO_vconnectpullup+0x20>
     c1a:	40 c0       	rjmp	.+128    	; 0xc9c <DIO_vconnectpullup+0xa0>
     c1c:	83 34       	cpi	r24, 0x43	; 67
     c1e:	91 05       	cpc	r25, r1
     c20:	24 f4       	brge	.+8      	; 0xc2a <DIO_vconnectpullup+0x2e>
     c22:	81 34       	cpi	r24, 0x41	; 65
     c24:	91 05       	cpc	r25, r1
     c26:	51 f0       	breq	.+20     	; 0xc3c <DIO_vconnectpullup+0x40>
     c28:	c9 c0       	rjmp	.+402    	; 0xdbc <DIO_vconnectpullup+0x1c0>
     c2a:	83 34       	cpi	r24, 0x43	; 67
     c2c:	91 05       	cpc	r25, r1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <DIO_vconnectpullup+0x36>
     c30:	65 c0       	rjmp	.+202    	; 0xcfc <DIO_vconnectpullup+0x100>
     c32:	84 34       	cpi	r24, 0x44	; 68
     c34:	91 05       	cpc	r25, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <DIO_vconnectpullup+0x3e>
     c38:	91 c0       	rjmp	.+290    	; 0xd5c <DIO_vconnectpullup+0x160>
     c3a:	c0 c0       	rjmp	.+384    	; 0xdbc <DIO_vconnectpullup+0x1c0>
	{
		case 'A':
		if(connect_pullup==1)
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	b1 f4       	brne	.+44     	; 0xc6e <DIO_vconnectpullup+0x72>
		{
			SET_BIT(PORTA,pinnumber);
     c42:	8b e3       	ldi	r24, 0x3B	; 59
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	2b e3       	ldi	r18, 0x3B	; 59
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	f9 01       	movw	r30, r18
     c4c:	20 81       	ld	r18, Z
     c4e:	62 2f       	mov	r22, r18
     c50:	2a 81       	ldd	r18, Y+2	; 0x02
     c52:	42 2f       	mov	r20, r18
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	21 e0       	ldi	r18, 0x01	; 1
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	04 2e       	mov	r0, r20
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_vconnectpullup+0x66>
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_vconnectpullup+0x62>
     c66:	26 2b       	or	r18, r22
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
		}
		break;
     c6c:	a7 c0       	rjmp	.+334    	; 0xdbc <DIO_vconnectpullup+0x1c0>
		{
			SET_BIT(PORTA,pinnumber);
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     c6e:	8b e3       	ldi	r24, 0x3B	; 59
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	2b e3       	ldi	r18, 0x3B	; 59
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	f9 01       	movw	r30, r18
     c78:	20 81       	ld	r18, Z
     c7a:	62 2f       	mov	r22, r18
     c7c:	2a 81       	ldd	r18, Y+2	; 0x02
     c7e:	42 2f       	mov	r20, r18
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	04 2e       	mov	r0, r20
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_vconnectpullup+0x92>
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_vconnectpullup+0x8e>
     c92:	20 95       	com	r18
     c94:	26 23       	and	r18, r22
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18
		}
		break;
     c9a:	90 c0       	rjmp	.+288    	; 0xdbc <DIO_vconnectpullup+0x1c0>
		case 'B':
		if(connect_pullup==1)
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	b1 f4       	brne	.+44     	; 0xcce <DIO_vconnectpullup+0xd2>
		{
			SET_BIT(PORTB,pinnumber);
     ca2:	88 e3       	ldi	r24, 0x38	; 56
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	28 e3       	ldi	r18, 0x38	; 56
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	f9 01       	movw	r30, r18
     cac:	20 81       	ld	r18, Z
     cae:	62 2f       	mov	r22, r18
     cb0:	2a 81       	ldd	r18, Y+2	; 0x02
     cb2:	42 2f       	mov	r20, r18
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	04 2e       	mov	r0, r20
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_vconnectpullup+0xc6>
     cbe:	22 0f       	add	r18, r18
     cc0:	33 1f       	adc	r19, r19
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_vconnectpullup+0xc2>
     cc6:	26 2b       	or	r18, r22
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
		}
		break;
     ccc:	77 c0       	rjmp	.+238    	; 0xdbc <DIO_vconnectpullup+0x1c0>
		{
			SET_BIT(PORTB,pinnumber);
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     cce:	88 e3       	ldi	r24, 0x38	; 56
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	28 e3       	ldi	r18, 0x38	; 56
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	f9 01       	movw	r30, r18
     cd8:	20 81       	ld	r18, Z
     cda:	62 2f       	mov	r22, r18
     cdc:	2a 81       	ldd	r18, Y+2	; 0x02
     cde:	42 2f       	mov	r20, r18
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	21 e0       	ldi	r18, 0x01	; 1
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	04 2e       	mov	r0, r20
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_vconnectpullup+0xf2>
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_vconnectpullup+0xee>
     cf2:	20 95       	com	r18
     cf4:	26 23       	and	r18, r22
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18
		}
		break;
     cfa:	60 c0       	rjmp	.+192    	; 0xdbc <DIO_vconnectpullup+0x1c0>
		case 'C':
		if(connect_pullup==1)
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	b1 f4       	brne	.+44     	; 0xd2e <DIO_vconnectpullup+0x132>
		{
			SET_BIT(PORTC,pinnumber);
     d02:	85 e3       	ldi	r24, 0x35	; 53
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	25 e3       	ldi	r18, 0x35	; 53
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	62 2f       	mov	r22, r18
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	42 2f       	mov	r20, r18
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	04 2e       	mov	r0, r20
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_vconnectpullup+0x126>
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_vconnectpullup+0x122>
     d26:	26 2b       	or	r18, r22
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
		}
		break;
     d2c:	47 c0       	rjmp	.+142    	; 0xdbc <DIO_vconnectpullup+0x1c0>
			SET_BIT(PORTC,pinnumber);
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     d2e:	85 e3       	ldi	r24, 0x35	; 53
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	25 e3       	ldi	r18, 0x35	; 53
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	62 2f       	mov	r22, r18
     d3c:	2a 81       	ldd	r18, Y+2	; 0x02
     d3e:	42 2f       	mov	r20, r18
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	04 2e       	mov	r0, r20
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_vconnectpullup+0x152>
     d4a:	22 0f       	add	r18, r18
     d4c:	33 1f       	adc	r19, r19
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_vconnectpullup+0x14e>
     d52:	20 95       	com	r18
     d54:	26 23       	and	r18, r22
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
		}
		break;
     d5a:	30 c0       	rjmp	.+96     	; 0xdbc <DIO_vconnectpullup+0x1c0>
		case 'D':
		if(connect_pullup==1)
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	b1 f4       	brne	.+44     	; 0xd8e <DIO_vconnectpullup+0x192>
		{
			SET_BIT(PORTD,pinnumber);
     d62:	82 e3       	ldi	r24, 0x32	; 50
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	22 e3       	ldi	r18, 0x32	; 50
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	f9 01       	movw	r30, r18
     d6c:	20 81       	ld	r18, Z
     d6e:	62 2f       	mov	r22, r18
     d70:	2a 81       	ldd	r18, Y+2	; 0x02
     d72:	42 2f       	mov	r20, r18
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	21 e0       	ldi	r18, 0x01	; 1
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	04 2e       	mov	r0, r20
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_vconnectpullup+0x186>
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_vconnectpullup+0x182>
     d86:	26 2b       	or	r18, r22
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
		}
		break;
     d8c:	16 c0       	rjmp	.+44     	; 0xdba <DIO_vconnectpullup+0x1be>
			SET_BIT(PORTD,pinnumber);
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     d8e:	82 e3       	ldi	r24, 0x32	; 50
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	22 e3       	ldi	r18, 0x32	; 50
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	f9 01       	movw	r30, r18
     d98:	20 81       	ld	r18, Z
     d9a:	62 2f       	mov	r22, r18
     d9c:	2a 81       	ldd	r18, Y+2	; 0x02
     d9e:	42 2f       	mov	r20, r18
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	21 e0       	ldi	r18, 0x01	; 1
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	04 2e       	mov	r0, r20
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_vconnectpullup+0x1b2>
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_vconnectpullup+0x1ae>
     db2:	20 95       	com	r18
     db4:	26 23       	and	r18, r22
     db6:	fc 01       	movw	r30, r24
     db8:	20 83       	st	Z, r18
		}
		break;
     dba:	00 00       	nop
		
	}
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 d0       	rcall	.+0      	; 0xdce <write_low_nibble+0x6>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	8f 70       	andi	r24, 0x0F	; 15
     dda:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	82 34       	cpi	r24, 0x42	; 66
     de4:	91 05       	cpc	r25, r1
     de6:	09 f1       	breq	.+66     	; 0xe2a <write_low_nibble+0x62>
     de8:	83 34       	cpi	r24, 0x43	; 67
     dea:	91 05       	cpc	r25, r1
     dec:	24 f4       	brge	.+8      	; 0xdf6 <write_low_nibble+0x2e>
     dee:	81 34       	cpi	r24, 0x41	; 65
     df0:	91 05       	cpc	r25, r1
     df2:	41 f0       	breq	.+16     	; 0xe04 <write_low_nibble+0x3c>
     df4:	53 c0       	rjmp	.+166    	; 0xe9c <write_low_nibble+0xd4>
     df6:	83 34       	cpi	r24, 0x43	; 67
     df8:	91 05       	cpc	r25, r1
     dfa:	51 f1       	breq	.+84     	; 0xe50 <write_low_nibble+0x88>
     dfc:	84 34       	cpi	r24, 0x44	; 68
     dfe:	91 05       	cpc	r25, r1
     e00:	d1 f1       	breq	.+116    	; 0xe76 <write_low_nibble+0xae>
     e02:	4c c0       	rjmp	.+152    	; 0xe9c <write_low_nibble+0xd4>
	{
		case 'A':
		PORTA&=0xf0;
     e04:	8b e3       	ldi	r24, 0x3B	; 59
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	2b e3       	ldi	r18, 0x3B	; 59
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	f9 01       	movw	r30, r18
     e0e:	20 81       	ld	r18, Z
     e10:	20 7f       	andi	r18, 0xF0	; 240
     e12:	fc 01       	movw	r30, r24
     e14:	20 83       	st	Z, r18
		PORTA|=value;
     e16:	8b e3       	ldi	r24, 0x3B	; 59
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	2b e3       	ldi	r18, 0x3B	; 59
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	f9 01       	movw	r30, r18
     e20:	30 81       	ld	r19, Z
     e22:	2a 81       	ldd	r18, Y+2	; 0x02
     e24:	23 2b       	or	r18, r19
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
		case 'B':
		PORTB&=0xf0;
     e2a:	88 e3       	ldi	r24, 0x38	; 56
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	28 e3       	ldi	r18, 0x38	; 56
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	f9 01       	movw	r30, r18
     e34:	20 81       	ld	r18, Z
     e36:	20 7f       	andi	r18, 0xF0	; 240
     e38:	fc 01       	movw	r30, r24
     e3a:	20 83       	st	Z, r18
		PORTB|=value;
     e3c:	88 e3       	ldi	r24, 0x38	; 56
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	28 e3       	ldi	r18, 0x38	; 56
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	f9 01       	movw	r30, r18
     e46:	30 81       	ld	r19, Z
     e48:	2a 81       	ldd	r18, Y+2	; 0x02
     e4a:	23 2b       	or	r18, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18
		case 'C':
		PORTC&=0xf0;
     e50:	85 e3       	ldi	r24, 0x35	; 53
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	25 e3       	ldi	r18, 0x35	; 53
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	f9 01       	movw	r30, r18
     e5a:	20 81       	ld	r18, Z
     e5c:	20 7f       	andi	r18, 0xF0	; 240
     e5e:	fc 01       	movw	r30, r24
     e60:	20 83       	st	Z, r18
		PORTC|=value;
     e62:	85 e3       	ldi	r24, 0x35	; 53
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	25 e3       	ldi	r18, 0x35	; 53
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	f9 01       	movw	r30, r18
     e6c:	30 81       	ld	r19, Z
     e6e:	2a 81       	ldd	r18, Y+2	; 0x02
     e70:	23 2b       	or	r18, r19
     e72:	fc 01       	movw	r30, r24
     e74:	20 83       	st	Z, r18
		case 'D':
		PORTD&=0xf0;
     e76:	82 e3       	ldi	r24, 0x32	; 50
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	22 e3       	ldi	r18, 0x32	; 50
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	f9 01       	movw	r30, r18
     e80:	20 81       	ld	r18, Z
     e82:	20 7f       	andi	r18, 0xF0	; 240
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
		PORTD|=value;
     e88:	82 e3       	ldi	r24, 0x32	; 50
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	22 e3       	ldi	r18, 0x32	; 50
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	30 81       	ld	r19, Z
     e94:	2a 81       	ldd	r18, Y+2	; 0x02
     e96:	23 2b       	or	r18, r19
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
	}
}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	00 d0       	rcall	.+0      	; 0xeac <write_high_nibble+0x6>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	82 95       	swap	r24
     eb8:	80 7f       	andi	r24, 0xF0	; 240
     eba:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	82 34       	cpi	r24, 0x42	; 66
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f1       	breq	.+66     	; 0xf0a <write_high_nibble+0x64>
     ec8:	83 34       	cpi	r24, 0x43	; 67
     eca:	91 05       	cpc	r25, r1
     ecc:	24 f4       	brge	.+8      	; 0xed6 <write_high_nibble+0x30>
     ece:	81 34       	cpi	r24, 0x41	; 65
     ed0:	91 05       	cpc	r25, r1
     ed2:	41 f0       	breq	.+16     	; 0xee4 <write_high_nibble+0x3e>
     ed4:	53 c0       	rjmp	.+166    	; 0xf7c <write_high_nibble+0xd6>
     ed6:	83 34       	cpi	r24, 0x43	; 67
     ed8:	91 05       	cpc	r25, r1
     eda:	51 f1       	breq	.+84     	; 0xf30 <write_high_nibble+0x8a>
     edc:	84 34       	cpi	r24, 0x44	; 68
     ede:	91 05       	cpc	r25, r1
     ee0:	d1 f1       	breq	.+116    	; 0xf56 <write_high_nibble+0xb0>
     ee2:	4c c0       	rjmp	.+152    	; 0xf7c <write_high_nibble+0xd6>
	{
		case 'A':
		PORTA&=0x0f;
     ee4:	8b e3       	ldi	r24, 0x3B	; 59
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	2b e3       	ldi	r18, 0x3B	; 59
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	f9 01       	movw	r30, r18
     eee:	20 81       	ld	r18, Z
     ef0:	2f 70       	andi	r18, 0x0F	; 15
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
		PORTA|=value;
     ef6:	8b e3       	ldi	r24, 0x3B	; 59
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	2b e3       	ldi	r18, 0x3B	; 59
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	f9 01       	movw	r30, r18
     f00:	30 81       	ld	r19, Z
     f02:	2a 81       	ldd	r18, Y+2	; 0x02
     f04:	23 2b       	or	r18, r19
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
		case 'B':
		PORTB&=0x0f;
     f0a:	88 e3       	ldi	r24, 0x38	; 56
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	28 e3       	ldi	r18, 0x38	; 56
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	2f 70       	andi	r18, 0x0F	; 15
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
		PORTB|=value;
     f1c:	88 e3       	ldi	r24, 0x38	; 56
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	28 e3       	ldi	r18, 0x38	; 56
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	f9 01       	movw	r30, r18
     f26:	30 81       	ld	r19, Z
     f28:	2a 81       	ldd	r18, Y+2	; 0x02
     f2a:	23 2b       	or	r18, r19
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 83       	st	Z, r18
		case 'C':
		PORTC&=0x0f;
     f30:	85 e3       	ldi	r24, 0x35	; 53
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	25 e3       	ldi	r18, 0x35	; 53
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	f9 01       	movw	r30, r18
     f3a:	20 81       	ld	r18, Z
     f3c:	2f 70       	andi	r18, 0x0F	; 15
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
		PORTC|=value;
     f42:	85 e3       	ldi	r24, 0x35	; 53
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	25 e3       	ldi	r18, 0x35	; 53
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	f9 01       	movw	r30, r18
     f4c:	30 81       	ld	r19, Z
     f4e:	2a 81       	ldd	r18, Y+2	; 0x02
     f50:	23 2b       	or	r18, r19
     f52:	fc 01       	movw	r30, r24
     f54:	20 83       	st	Z, r18
		case 'D':
		PORTD&=0x0f;
     f56:	82 e3       	ldi	r24, 0x32	; 50
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	22 e3       	ldi	r18, 0x32	; 50
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	2f 70       	andi	r18, 0x0F	; 15
     f64:	fc 01       	movw	r30, r24
     f66:	20 83       	st	Z, r18
		PORTD|=value;
     f68:	82 e3       	ldi	r24, 0x32	; 50
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	22 e3       	ldi	r18, 0x32	; 50
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	f9 01       	movw	r30, r18
     f72:	30 81       	ld	r19, Z
     f74:	2a 81       	ldd	r18, Y+2	; 0x02
     f76:	23 2b       	or	r18, r19
     f78:	fc 01       	movw	r30, r24
     f7a:	20 83       	st	Z, r18
	}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <I2C_Master_init>:
	#include <avr/io.h>
	#include "std_macros.h"
	#define F_CPU 8000000UL
	#define prescalar 1
	void I2C_Master_init(unsigned long SCL_Clock)
	{
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <I2C_Master_init+0xa>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <I2C_Master_init+0xc>
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	69 83       	std	Y+1, r22	; 0x01
     f98:	7a 83       	std	Y+2, r23	; 0x02
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	9c 83       	std	Y+4, r25	; 0x04
		TWBR= (unsigned char) (((F_CPU/SCL_Clock)-16) / (2*prescalar));
     f9e:	00 e2       	ldi	r16, 0x20	; 32
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	92 e1       	ldi	r25, 0x12	; 18
     fa6:	aa e7       	ldi	r26, 0x7A	; 122
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	29 81       	ldd	r18, Y+1	; 0x01
     fac:	3a 81       	ldd	r19, Y+2	; 0x02
     fae:	4b 81       	ldd	r20, Y+3	; 0x03
     fb0:	5c 81       	ldd	r21, Y+4	; 0x04
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <__udivmodsi4>
     fba:	da 01       	movw	r26, r20
     fbc:	c9 01       	movw	r24, r18
     fbe:	40 97       	sbiw	r24, 0x10	; 16
     fc0:	a1 09       	sbc	r26, r1
     fc2:	b1 09       	sbc	r27, r1
     fc4:	b6 95       	lsr	r27
     fc6:	a7 95       	ror	r26
     fc8:	97 95       	ror	r25
     fca:	87 95       	ror	r24
     fcc:	f8 01       	movw	r30, r16
     fce:	80 83       	st	Z, r24
		if (prescalar==1)
		{
			TWSR=0;
     fd0:	81 e2       	ldi	r24, 0x21	; 33
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	10 82       	st	Z, r1
		}
		else if (prescalar==64)
		{
			TWSR=3;
		}
		SET_BIT(TWCR,TWEN);
     fd8:	86 e5       	ldi	r24, 0x56	; 86
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	26 e5       	ldi	r18, 0x56	; 86
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	f9 01       	movw	r30, r18
     fe2:	20 81       	ld	r18, Z
     fe4:	24 60       	ori	r18, 0x04	; 4
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
	}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <I2C_start>:
	
	void I2C_start(void)
	{
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TWCR,TWSTA);
    1004:	86 e5       	ldi	r24, 0x56	; 86
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	26 e5       	ldi	r18, 0x56	; 86
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	f9 01       	movw	r30, r18
    100e:	20 81       	ld	r18, Z
    1010:	20 62       	ori	r18, 0x20	; 32
    1012:	fc 01       	movw	r30, r24
    1014:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
    1016:	00 00       	nop
    1018:	86 e5       	ldi	r24, 0x56	; 86
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	88 1f       	adc	r24, r24
    1022:	88 27       	eor	r24, r24
    1024:	88 1f       	adc	r24, r24
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	a1 f3       	breq	.-24     	; 0x1018 <I2C_start+0x1c>
		if((TWSR & 0xf8) == 0x08) // start condition has been transmitted
    1030:	81 e2       	ldi	r24, 0x21	; 33
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	fc 01       	movw	r30, r24
    1036:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
	}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <I2C_repeated_start>:
	
	void I2C_repeated_start(void)
	{
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TWCR,TWSTA);
    1046:	86 e5       	ldi	r24, 0x56	; 86
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	26 e5       	ldi	r18, 0x56	; 86
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	20 62       	ori	r18, 0x20	; 32
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    1058:	00 00       	nop
    105a:	86 e5       	ldi	r24, 0x56	; 86
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	fc 01       	movw	r30, r24
    1060:	80 81       	ld	r24, Z
    1062:	88 1f       	adc	r24, r24
    1064:	88 27       	eor	r24, r24
    1066:	88 1f       	adc	r24, r24
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	90 70       	andi	r25, 0x00	; 0
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	a1 f3       	breq	.-24     	; 0x105a <I2C_repeated_start+0x1c>
		if ((TWSR & 0XF8) == 0x10) // repeated start condition has been transmitted
    1072:	81 e2       	ldi	r24, 0x21	; 33
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	fc 01       	movw	r30, r24
    1078:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
	}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <I2C_write_address>:
	
	void I2C_write_address(unsigned char address)
	{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	89 83       	std	Y+1, r24	; 0x01
		TWDR=address;
    108c:	83 e2       	ldi	r24, 0x23	; 35
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	29 81       	ldd	r18, Y+1	; 0x01
    1092:	fc 01       	movw	r30, r24
    1094:	20 83       	st	Z, r18
		SET_BIT(TWCR,TWINT);
    1096:	86 e5       	ldi	r24, 0x56	; 86
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	26 e5       	ldi	r18, 0x56	; 86
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	20 68       	ori	r18, 0x80	; 128
    10a4:	fc 01       	movw	r30, r24
    10a6:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
    10a8:	00 00       	nop
    10aa:	86 e5       	ldi	r24, 0x56	; 86
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	88 1f       	adc	r24, r24
    10b4:	88 27       	eor	r24, r24
    10b6:	88 1f       	adc	r24, r24
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	90 70       	andi	r25, 0x00	; 0
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	a1 f3       	breq	.-24     	; 0x10aa <I2C_write_address+0x2a>
		if ((TWSR & 0XF8) == 0x18) // SLA+write has been transmitted and ACK has been received 
    10c2:	81 e2       	ldi	r24, 0x21	; 33
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
	}
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <I2C_write_data>:
	
	void I2C_write_data(unsigned char data)
	{
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
		TWDR=data;
    10de:	83 e2       	ldi	r24, 0x23	; 35
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	29 81       	ldd	r18, Y+1	; 0x01
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18
		SET_BIT(TWCR,TWINT);
    10e8:	86 e5       	ldi	r24, 0x56	; 86
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	26 e5       	ldi	r18, 0x56	; 86
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	20 68       	ori	r18, 0x80	; 128
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    10fa:	00 00       	nop
    10fc:	86 e5       	ldi	r24, 0x56	; 86
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	88 1f       	adc	r24, r24
    1106:	88 27       	eor	r24, r24
    1108:	88 1f       	adc	r24, r24
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 70       	andi	r25, 0x00	; 0
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	a1 f3       	breq	.-24     	; 0x10fc <I2C_write_data+0x2a>
		if((TWSR & 0XF8) == 0x28) // data has been transmitted and ACK has been received
    1114:	81 e2       	ldi	r24, 0x21	; 33
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
	}
    111c:	0f 90       	pop	r0
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <I2C_stop>:
	
	void I2C_stop(void)
	{
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
    112c:	86 e5       	ldi	r24, 0x56	; 86
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	24 e9       	ldi	r18, 0x94	; 148
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
	}
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <I2C_set_address>:
	
	void I2C_set_address(unsigned char address)
	{
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
		TWAR=address;
    1148:	82 e2       	ldi	r24, 0x22	; 34
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	29 81       	ldd	r18, Y+1	; 0x01
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
	}
    1152:	0f 90       	pop	r0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <I2C_slave_read>:
	
	unsigned char I2C_slave_read(void)
	{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
		TWCR|=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1162:	86 e5       	ldi	r24, 0x56	; 86
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	26 e5       	ldi	r18, 0x56	; 86
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	24 6c       	ori	r18, 0xC4	; 196
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0);
    1174:	00 00       	nop
    1176:	86 e5       	ldi	r24, 0x56	; 86
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	fc 01       	movw	r30, r24
    117c:	80 81       	ld	r24, Z
    117e:	88 1f       	adc	r24, r24
    1180:	88 27       	eor	r24, r24
    1182:	88 1f       	adc	r24, r24
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	90 70       	andi	r25, 0x00	; 0
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	a1 f3       	breq	.-24     	; 0x1176 <I2C_slave_read+0x1c>
		if ((TWSR & 0XF8) == 0x60) // own SLA+W has been received and ACK has been returned
    118e:	81 e2       	ldi	r24, 0x21	; 33
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
		SET_BIT(TWCR,TWINT);
    1196:	86 e5       	ldi	r24, 0x56	; 86
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	26 e5       	ldi	r18, 0x56	; 86
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	f9 01       	movw	r30, r18
    11a0:	20 81       	ld	r18, Z
    11a2:	20 68       	ori	r18, 0x80	; 128
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
		while(READ_BIT(TWCR,TWINT)==0);
    11a8:	00 00       	nop
    11aa:	86 e5       	ldi	r24, 0x56	; 86
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 81       	ld	r24, Z
    11b2:	88 1f       	adc	r24, r24
    11b4:	88 27       	eor	r24, r24
    11b6:	88 1f       	adc	r24, r24
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	a1 f3       	breq	.-24     	; 0x11aa <I2C_slave_read+0x50>
		if ((TWSR & 0XF8) == 0x80) // previously addressed with own SLA+W : data has been received : ACK has been returned
    11c2:	81 e2       	ldi	r24, 0x21	; 33
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	fc 01       	movw	r30, r24
    11c8:	80 81       	ld	r24, Z
		}
		else
		{
			
		}
		return TWDR ;
    11ca:	83 e2       	ldi	r24, 0x23	; 35
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	fc 01       	movw	r30, r24
    11d0:	80 81       	ld	r24, Z
	}
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <I2C_write_address_and_read>:
	
void I2C_write_address_and_read(unsigned char address)
{
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
	TWDR=address;
    11e4:	83 e2       	ldi	r24, 0x23	; 35
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	29 81       	ldd	r18, Y+1	; 0x01
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18
	TWCR=(1<<TWINT)|(1<<TWEN);
    11ee:	86 e5       	ldi	r24, 0x56	; 86
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	24 e8       	ldi	r18, 0x84	; 132
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
	while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    11f8:	00 00       	nop
    11fa:	86 e5       	ldi	r24, 0x56	; 86
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	fc 01       	movw	r30, r24
    1200:	80 81       	ld	r24, Z
    1202:	88 1f       	adc	r24, r24
    1204:	88 27       	eor	r24, r24
    1206:	88 1f       	adc	r24, r24
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	90 70       	andi	r25, 0x00	; 0
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	a1 f3       	breq	.-24     	; 0x11fa <I2C_write_address_and_read+0x22>
	if ((TWSR & 0XF8) == 0x40) // SLA+read has been transmitted and ACK has been received
    1212:	81 e2       	ldi	r24, 0x21	; 33
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	fc 01       	movw	r30, r24
    1218:	80 81       	ld	r24, Z
	}
	else
	{
		
	}
}	
    121a:	0f 90       	pop	r0
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <I2C_read_with_NACK>:

unsigned char I2C_read_with_NACK(void)
{
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
    122a:	86 e5       	ldi	r24, 0x56	; 86
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	24 e8       	ldi	r18, 0x84	; 132
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
	while(READ_BIT(TWCR,TWINT)==0);
    1234:	00 00       	nop
    1236:	86 e5       	ldi	r24, 0x56	; 86
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	fc 01       	movw	r30, r24
    123c:	80 81       	ld	r24, Z
    123e:	88 1f       	adc	r24, r24
    1240:	88 27       	eor	r24, r24
    1242:	88 1f       	adc	r24, r24
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	90 70       	andi	r25, 0x00	; 0
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	a1 f3       	breq	.-24     	; 0x1236 <I2C_read_with_NACK+0x14>
	if ((TWSR & 0XF8) == 0x58) // data byte has been received and Not ACK has been returned
    124e:	81 e2       	ldi	r24, 0x21	; 33
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	fc 01       	movw	r30, r24
    1254:	80 81       	ld	r24, Z
	}
	else
	{
		
	}
	return TWDR ;
    1256:	83 e2       	ldi	r24, 0x23	; 35
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	fc 01       	movw	r30, r24
    125c:	80 81       	ld	r24, Z
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <I2C_read_with_ACK>:

unsigned char I2C_read_with_ACK(void)
{
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
    126c:	86 e5       	ldi	r24, 0x56	; 86
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	24 e8       	ldi	r18, 0x84	; 132
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
	while(READ_BIT(TWCR,TWINT)==0);
    1276:	00 00       	nop
    1278:	86 e5       	ldi	r24, 0x56	; 86
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	fc 01       	movw	r30, r24
    127e:	80 81       	ld	r24, Z
    1280:	88 1f       	adc	r24, r24
    1282:	88 27       	eor	r24, r24
    1284:	88 1f       	adc	r24, r24
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	90 70       	andi	r25, 0x00	; 0
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	a1 f3       	breq	.-24     	; 0x1278 <I2C_read_with_ACK+0x14>
	if ((TWSR & 0XF8) == 0x58) // data byte has been received and Not ACK has been returned// need to edit hex number
    1290:	81 e2       	ldi	r24, 0x21	; 33
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	fc 01       	movw	r30, r24
    1296:	80 81       	ld	r24, Z
	}
	else
	{
		
	}
	return TWDR ;
    1298:	83 e2       	ldi	r24, 0x23	; 35
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	80 81       	ld	r24, Z
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <main>:
button5 = NOTPRESSED,button6=NOTPRESSED, button7 = NOTPRESSED ,button8 = NOTPRESSED;

unsigned char _i2c_address;

int main()
{
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	c6 54       	subi	r28, 0x46	; 70
    12b4:	d0 40       	sbci	r29, 0x00	; 0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
	  
      
	    I2C_Master_init(100000); 
    12c0:	60 ea       	ldi	r22, 0xA0	; 160
    12c2:	76 e8       	ldi	r23, 0x86	; 134
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 c3 07 	call	0xf86	; 0xf86 <I2C_Master_init>
	    timer2_overflow_init_interrupt();
    12cc:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <timer2_overflow_init_interrupt>
	    _i2c_address = 0X78; // this works  or 0X3D does not
    12d0:	88 e7       	ldi	r24, 0x78	; 120
    12d2:	80 93 be 00 	sts	0x00BE, r24
        ADC_init();
    12d6:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_init>
		button_init('B',0);
    12da:	82 e4       	ldi	r24, 0x42	; 66
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		button_init('B',1);
    12e6:	82 e4       	ldi	r24, 0x42	; 66
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		button_init('B',2);
    12f2:	82 e4       	ldi	r24, 0x42	; 66
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	62 e0       	ldi	r22, 0x02	; 2
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		button_init('B',3);
    12fe:	82 e4       	ldi	r24, 0x42	; 66
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	63 e0       	ldi	r22, 0x03	; 3
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		
		button_init('B',6);
    130a:	82 e4       	ldi	r24, 0x42	; 66
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	66 e0       	ldi	r22, 0x06	; 6
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		
		DIO_vconnectpullup('B',0,1);
    1316:	82 e4       	ldi	r24, 0x42	; 66
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',1,1);
    1326:	82 e4       	ldi	r24, 0x42	; 66
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',2,1);
    1336:	82 e4       	ldi	r24, 0x42	; 66
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',3,1);
    1346:	82 e4       	ldi	r24, 0x42	; 66
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	63 e0       	ldi	r22, 0x03	; 3
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',6,1);
    1356:	82 e4       	ldi	r24, 0x42	; 66
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	66 e0       	ldi	r22, 0x06	; 6
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		
		InitializeDisplay();
    1366:	0e 94 9c 1b 	call	0x3738	; 0x3738 <InitializeDisplay>
		
		
		// commented because of memory overflow
		 
		button_init('B',4);        
    136a:	82 e4       	ldi	r24, 0x42	; 66
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	64 e0       	ldi	r22, 0x04	; 4
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		button_init('B',5);
    1376:	82 e4       	ldi	r24, 0x42	; 66
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	65 e0       	ldi	r22, 0x05	; 5
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		button_init('B',7);
    1382:	82 e4       	ldi	r24, 0x42	; 66
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	67 e0       	ldi	r22, 0x07	; 7
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	0e 94 4a 02 	call	0x494	; 0x494 <button_init>
		DIO_vconnectpullup('B',4,1);
    138e:	82 e4       	ldi	r24, 0x42	; 66
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',5,1);
    139e:	82 e4       	ldi	r24, 0x42	; 66
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	65 e0       	ldi	r22, 0x05	; 5
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		DIO_vconnectpullup('B',7,1); 
    13ae:	82 e4       	ldi	r24, 0x42	; 66
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	67 e0       	ldi	r22, 0x07	; 7
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	0e 94 fe 05 	call	0xbfc	; 0xbfc <DIO_vconnectpullup>
		//reset_display();
		//_delay_ms(10);
		
		
		tempchange:
		clear_display();
    13be:	0e 94 ab 1c 	call	0x3956	; 0x3956 <clear_display>
		sendStrXY("TEMP:",X_OF_TEMP,Y_OF_TEMP);
    13c2:	89 e7       	ldi	r24, 0x79	; 121
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	43 e0       	ldi	r20, 0x03	; 3
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <sendStrXY>
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <main+0x130>
					day_counter = (first_digit * 10) + second_digit;
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
			//		_delay_ms(250);
					goto tempchange;
				}
				}			 					
    13d4:	00 00       	nop
		sendStrXY("TEMP:",X_OF_TEMP,Y_OF_TEMP);
		while (1){
			do
			 {  
				 
				 if(tempcelsius == 1)
    13d6:	80 91 68 00 	lds	r24, 0x0068
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	09 f5       	brne	.+66     	; 0x1420 <main+0x17a>
				 {
					 temp = .25 * ADC_read();
    13de:	0e 94 02 02 	call	0x404	; 0x404 <ADC_read>
    13e2:	aa 27       	eor	r26, r26
    13e4:	97 fd       	sbrc	r25, 7
    13e6:	a0 95       	com	r26
    13e8:	ba 2f       	mov	r27, r26
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__floatsisf>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5e e3       	ldi	r21, 0x3E	; 62
    1402:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	bc 01       	movw	r22, r24
    140c:	cd 01       	movw	r24, r26
    140e:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	90 93 c1 00 	sts	0x00C1, r25
    141a:	80 93 c0 00 	sts	0x00C0, r24
    141e:	38 c0       	rjmp	.+112    	; 0x1490 <main+0x1ea>
				 }
				 else if(tempcelsius == 0)
    1420:	80 91 68 00 	lds	r24, 0x0068
    1424:	88 23       	and	r24, r24
    1426:	a1 f5       	brne	.+104    	; 0x1490 <main+0x1ea>
				 {
					 temp = .25 * ADC_read() * ((float)9/5) + 32;
    1428:	0e 94 02 02 	call	0x404	; 0x404 <ADC_read>
    142c:	aa 27       	eor	r26, r26
    142e:	97 fd       	sbrc	r25, 7
    1430:	a0 95       	com	r26
    1432:	ba 2f       	mov	r27, r26
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__floatsisf>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e8       	ldi	r20, 0x80	; 128
    144a:	5e e3       	ldi	r21, 0x3E	; 62
    144c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	26 e6       	ldi	r18, 0x66	; 102
    145a:	36 e6       	ldi	r19, 0x66	; 102
    145c:	46 ee       	ldi	r20, 0xE6	; 230
    145e:	5f e3       	ldi	r21, 0x3F	; 63
    1460:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	52 e4       	ldi	r21, 0x42	; 66
    1474:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__addsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	90 93 c1 00 	sts	0x00C1, r25
    148c:	80 93 c0 00 	sts	0x00C0, r24
				 else
				 {
					 
				 }
				 
				 if(temp < 10)
    1490:	80 91 c0 00 	lds	r24, 0x00C0
    1494:	90 91 c1 00 	lds	r25, 0x00C1
    1498:	8a 30       	cpi	r24, 0x0A	; 10
    149a:	91 05       	cpc	r25, r1
    149c:	38 f5       	brcc	.+78     	; 0x14ec <main+0x246>
				 {
					 sendCharXY(temp+48,X_OF_TEMP,Y_OF_TEMP+5);
    149e:	80 91 c0 00 	lds	r24, 0x00C0
    14a2:	90 91 c1 00 	lds	r25, 0x00C1
    14a6:	80 5d       	subi	r24, 0xD0	; 208
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	48 e0       	ldi	r20, 0x08	; 8
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 if(tempcelsius == 1)
    14b4:	80 91 68 00 	lds	r24, 0x0068
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	41 f4       	brne	.+16     	; 0x14cc <main+0x226>
					 {
						 sendCharXY('C',X_OF_TEMP,Y_OF_TEMP+6);
    14bc:	83 e4       	ldi	r24, 0x43	; 67
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	49 e0       	ldi	r20, 0x09	; 9
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <main+0x23c>
					 }
					 else if(tempcelsius == 0)
    14cc:	80 91 68 00 	lds	r24, 0x0068
    14d0:	88 23       	and	r24, r24
    14d2:	39 f4       	brne	.+14     	; 0x14e2 <main+0x23c>
					 {
						 sendCharXY('F',X_OF_TEMP,Y_OF_TEMP+6);
    14d4:	86 e4       	ldi	r24, 0x46	; 70
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	49 e0       	ldi	r20, 0x09	; 9
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 else
					 {
						 
					 }
					 
					 sendStr("   ");
    14e2:	8f e7       	ldi	r24, 0x7F	; 127
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <sendStr>
    14ea:	af c0       	rjmp	.+350    	; 0x164a <main+0x3a4>
				 }
				 else if(temp < 100 && temp >= 10)
    14ec:	80 91 c0 00 	lds	r24, 0x00C0
    14f0:	90 91 c1 00 	lds	r25, 0x00C1
    14f4:	84 36       	cpi	r24, 0x64	; 100
    14f6:	91 05       	cpc	r25, r1
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <main+0x256>
    14fa:	46 c0       	rjmp	.+140    	; 0x1588 <main+0x2e2>
    14fc:	80 91 c0 00 	lds	r24, 0x00C0
    1500:	90 91 c1 00 	lds	r25, 0x00C1
    1504:	8a 30       	cpi	r24, 0x0A	; 10
    1506:	91 05       	cpc	r25, r1
    1508:	08 f4       	brcc	.+2      	; 0x150c <main+0x266>
    150a:	3e c0       	rjmp	.+124    	; 0x1588 <main+0x2e2>
				 {
					 sendCharXY((temp/10)+48,X_OF_TEMP,Y_OF_TEMP + 5);
    150c:	80 91 c0 00 	lds	r24, 0x00C0
    1510:	90 91 c1 00 	lds	r25, 0x00C1
    1514:	2a e0       	ldi	r18, 0x0A	; 10
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	b9 01       	movw	r22, r18
    151a:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    151e:	9b 01       	movw	r18, r22
    1520:	c9 01       	movw	r24, r18
    1522:	80 5d       	subi	r24, 0xD0	; 208
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	48 e0       	ldi	r20, 0x08	; 8
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 sendCharXY((temp%10)+48,X_OF_TEMP,Y_OF_TEMP + 6);
    1530:	80 91 c0 00 	lds	r24, 0x00C0
    1534:	90 91 c1 00 	lds	r25, 0x00C1
    1538:	2a e0       	ldi	r18, 0x0A	; 10
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	b9 01       	movw	r22, r18
    153e:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    1542:	80 5d       	subi	r24, 0xD0	; 208
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	49 e0       	ldi	r20, 0x09	; 9
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					  if(tempcelsius == 1)
    1550:	80 91 68 00 	lds	r24, 0x0068
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	41 f4       	brne	.+16     	; 0x1568 <main+0x2c2>
					  {
						  sendCharXY('C',X_OF_TEMP,Y_OF_TEMP + 7);
    1558:	83 e4       	ldi	r24, 0x43	; 67
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	4a e0       	ldi	r20, 0x0A	; 10
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
    1566:	0b c0       	rjmp	.+22     	; 0x157e <main+0x2d8>
					  }
					  else if(tempcelsius == 0)
    1568:	80 91 68 00 	lds	r24, 0x0068
    156c:	88 23       	and	r24, r24
    156e:	39 f4       	brne	.+14     	; 0x157e <main+0x2d8>
					  {
						  sendCharXY('F',X_OF_TEMP,Y_OF_TEMP + 7);
    1570:	86 e4       	ldi	r24, 0x46	; 70
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	4a e0       	ldi	r20, 0x0A	; 10
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					  }
					 
					 sendStr(" ");
    157e:	83 e8       	ldi	r24, 0x83	; 131
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <sendStr>
    1586:	61 c0       	rjmp	.+194    	; 0x164a <main+0x3a4>
				 }
				 else if(temp<1000 && temp >= 100)
    1588:	80 91 c0 00 	lds	r24, 0x00C0
    158c:	90 91 c1 00 	lds	r25, 0x00C1
    1590:	23 e0       	ldi	r18, 0x03	; 3
    1592:	88 3e       	cpi	r24, 0xE8	; 232
    1594:	92 07       	cpc	r25, r18
    1596:	08 f0       	brcs	.+2      	; 0x159a <main+0x2f4>
    1598:	58 c0       	rjmp	.+176    	; 0x164a <main+0x3a4>
    159a:	80 91 c0 00 	lds	r24, 0x00C0
    159e:	90 91 c1 00 	lds	r25, 0x00C1
    15a2:	84 36       	cpi	r24, 0x64	; 100
    15a4:	91 05       	cpc	r25, r1
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <main+0x304>
    15a8:	50 c0       	rjmp	.+160    	; 0x164a <main+0x3a4>
				 {
					 
					 sendCharXY((temp/100)+48,X_OF_TEMP,Y_OF_TEMP + 5);
    15aa:	80 91 c0 00 	lds	r24, 0x00C0
    15ae:	90 91 c1 00 	lds	r25, 0x00C1
    15b2:	24 e6       	ldi	r18, 0x64	; 100
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	b9 01       	movw	r22, r18
    15b8:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    15bc:	9b 01       	movw	r18, r22
    15be:	c9 01       	movw	r24, r18
    15c0:	80 5d       	subi	r24, 0xD0	; 208
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	48 e0       	ldi	r20, 0x08	; 8
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 sendCharXY((temp / 10 % 10) + 48,X_OF_TEMP,Y_OF_TEMP + 6);
    15ce:	80 91 c0 00 	lds	r24, 0x00C0
    15d2:	90 91 c1 00 	lds	r25, 0x00C1
    15d6:	2a e0       	ldi	r18, 0x0A	; 10
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	b9 01       	movw	r22, r18
    15dc:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    15e0:	9b 01       	movw	r18, r22
    15e2:	c9 01       	movw	r24, r18
    15e4:	2a e0       	ldi	r18, 0x0A	; 10
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	b9 01       	movw	r22, r18
    15ea:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    15ee:	80 5d       	subi	r24, 0xD0	; 208
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	49 e0       	ldi	r20, 0x09	; 9
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 sendCharXY((temp % 10) + 48,X_OF_TEMP,Y_OF_TEMP + 7);
    15fc:	80 91 c0 00 	lds	r24, 0x00C0
    1600:	90 91 c1 00 	lds	r25, 0x00C1
    1604:	2a e0       	ldi	r18, 0x0A	; 10
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	b9 01       	movw	r22, r18
    160a:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    160e:	80 5d       	subi	r24, 0xD0	; 208
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	4a e0       	ldi	r20, 0x0A	; 10
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 if(tempcelsius == 1)
    161c:	80 91 68 00 	lds	r24, 0x0068
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	41 f4       	brne	.+16     	; 0x1634 <main+0x38e>
					 {
						 sendCharXY('C',X_OF_TEMP,Y_OF_TEMP + 8);
    1624:	83 e4       	ldi	r24, 0x43	; 67
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	4b e0       	ldi	r20, 0x0B	; 11
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
    1632:	0b c0       	rjmp	.+22     	; 0x164a <main+0x3a4>
					 }
					 else if(tempcelsius == 0)
    1634:	80 91 68 00 	lds	r24, 0x0068
    1638:	88 23       	and	r24, r24
    163a:	39 f4       	brne	.+14     	; 0x164a <main+0x3a4>
					 {
						 sendCharXY('F',X_OF_TEMP,Y_OF_TEMP + 8);
    163c:	86 e4       	ldi	r24, 0x46	; 70
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	4b e0       	ldi	r20, 0x0B	; 11
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 }
				 else
				 {
					 
				 }
				 if(60 <= seconds_counter)
    164a:	80 91 c3 00 	lds	r24, 0x00C3
    164e:	8c 33       	cpi	r24, 0x3C	; 60
    1650:	38 f0       	brcs	.+14     	; 0x1660 <main+0x3ba>
				 {
					 minutes_counter++;
    1652:	80 91 c4 00 	lds	r24, 0x00C4
    1656:	8f 5f       	subi	r24, 0xFF	; 255
    1658:	80 93 c4 00 	sts	0x00C4, r24
					 seconds_counter = 0;
    165c:	10 92 c3 00 	sts	0x00C3, r1
				 } 
				 if(60 <= minutes_counter)
    1660:	80 91 c4 00 	lds	r24, 0x00C4
    1664:	8c 33       	cpi	r24, 0x3C	; 60
    1666:	38 f0       	brcs	.+14     	; 0x1676 <main+0x3d0>
				 {
					 hours_counter++;
    1668:	80 91 c5 00 	lds	r24, 0x00C5
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	80 93 c5 00 	sts	0x00C5, r24
					 minutes_counter = 0;
    1672:	10 92 c4 00 	sts	0x00C4, r1
				 }
				 if(24 <= hours_counter)
    1676:	80 91 c5 00 	lds	r24, 0x00C5
    167a:	88 31       	cpi	r24, 0x18	; 24
    167c:	38 f0       	brcs	.+14     	; 0x168c <main+0x3e6>
				 {
					 hours_counter = 0;
    167e:	10 92 c5 00 	sts	0x00C5, r1
					 day_counter++;
    1682:	80 91 64 00 	lds	r24, 0x0064
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	80 93 64 00 	sts	0x0064, r24
				 }
				 if(day_counter >= 31 )
    168c:	80 91 64 00 	lds	r24, 0x0064
    1690:	8f 31       	cpi	r24, 0x1F	; 31
    1692:	40 f0       	brcs	.+16     	; 0x16a4 <main+0x3fe>
				 {
					 day_counter = 1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	80 93 64 00 	sts	0x0064, r24
					 month_counter++;
    169a:	80 91 65 00 	lds	r24, 0x0065
    169e:	8f 5f       	subi	r24, 0xFF	; 255
    16a0:	80 93 65 00 	sts	0x0065, r24
				 }
				 if(month_counter >= 12)
    16a4:	80 91 65 00 	lds	r24, 0x0065
    16a8:	8c 30       	cpi	r24, 0x0C	; 12
    16aa:	60 f0       	brcs	.+24     	; 0x16c4 <main+0x41e>
				 {
					 month_counter = 1;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 93 65 00 	sts	0x0065, r24
					 year_counter++;
    16b2:	80 91 66 00 	lds	r24, 0x0066
    16b6:	90 91 67 00 	lds	r25, 0x0067
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	90 93 67 00 	sts	0x0067, r25
    16c0:	80 93 66 00 	sts	0x0066, r24
				 }
				 
				 
				 // time displaying
				 sendCharXY((hours_counter/10) + 48,x_of_time,y_of_time);
    16c4:	80 91 c5 00 	lds	r24, 0x00C5
    16c8:	9a e0       	ldi	r25, 0x0A	; 10
    16ca:	69 2f       	mov	r22, r25
    16cc:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    16d0:	80 5d       	subi	r24, 0xD0	; 208
    16d2:	90 91 60 00 	lds	r25, 0x0060
    16d6:	49 2f       	mov	r20, r25
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	90 91 61 00 	lds	r25, 0x0061
    16de:	29 2f       	mov	r18, r25
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	ba 01       	movw	r22, r20
    16e4:	a9 01       	movw	r20, r18
    16e6:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((hours_counter%10) + 48,x_of_time,y_of_time+1);
    16ea:	80 91 c5 00 	lds	r24, 0x00C5
    16ee:	9a e0       	ldi	r25, 0x0A	; 10
    16f0:	69 2f       	mov	r22, r25
    16f2:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    16f6:	89 2f       	mov	r24, r25
    16f8:	68 2f       	mov	r22, r24
    16fa:	60 5d       	subi	r22, 0xD0	; 208
    16fc:	80 91 60 00 	lds	r24, 0x0060
    1700:	48 2f       	mov	r20, r24
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	80 91 61 00 	lds	r24, 0x0061
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9c 01       	movw	r18, r24
    170e:	2f 5f       	subi	r18, 0xFF	; 255
    1710:	3f 4f       	sbci	r19, 0xFF	; 255
    1712:	86 2f       	mov	r24, r22
    1714:	ba 01       	movw	r22, r20
    1716:	a9 01       	movw	r20, r18
    1718:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY(':',x_of_time,y_of_time+2);
    171c:	80 91 60 00 	lds	r24, 0x0060
    1720:	48 2f       	mov	r20, r24
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	80 91 61 00 	lds	r24, 0x0061
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 01       	movw	r18, r24
    172e:	2e 5f       	subi	r18, 0xFE	; 254
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	8a e3       	ldi	r24, 0x3A	; 58
    1734:	ba 01       	movw	r22, r20
    1736:	a9 01       	movw	r20, r18
    1738:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((minutes_counter/10) + 48,x_of_time,y_of_time + 3);
    173c:	80 91 c4 00 	lds	r24, 0x00C4
    1740:	9a e0       	ldi	r25, 0x0A	; 10
    1742:	69 2f       	mov	r22, r25
    1744:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    1748:	68 2f       	mov	r22, r24
    174a:	60 5d       	subi	r22, 0xD0	; 208
    174c:	80 91 60 00 	lds	r24, 0x0060
    1750:	48 2f       	mov	r20, r24
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	80 91 61 00 	lds	r24, 0x0061
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9c 01       	movw	r18, r24
    175e:	2d 5f       	subi	r18, 0xFD	; 253
    1760:	3f 4f       	sbci	r19, 0xFF	; 255
    1762:	86 2f       	mov	r24, r22
    1764:	ba 01       	movw	r22, r20
    1766:	a9 01       	movw	r20, r18
    1768:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((minutes_counter%10) + 48,x_of_time,y_of_time + 4);
    176c:	80 91 c4 00 	lds	r24, 0x00C4
    1770:	9a e0       	ldi	r25, 0x0A	; 10
    1772:	69 2f       	mov	r22, r25
    1774:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    1778:	89 2f       	mov	r24, r25
    177a:	68 2f       	mov	r22, r24
    177c:	60 5d       	subi	r22, 0xD0	; 208
    177e:	80 91 60 00 	lds	r24, 0x0060
    1782:	48 2f       	mov	r20, r24
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	80 91 61 00 	lds	r24, 0x0061
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9c 01       	movw	r18, r24
    1790:	2c 5f       	subi	r18, 0xFC	; 252
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	86 2f       	mov	r24, r22
    1796:	ba 01       	movw	r22, r20
    1798:	a9 01       	movw	r20, r18
    179a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY(':',x_of_time,y_of_time+5);
    179e:	80 91 60 00 	lds	r24, 0x0060
    17a2:	48 2f       	mov	r20, r24
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	80 91 61 00 	lds	r24, 0x0061
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c 01       	movw	r18, r24
    17b0:	2b 5f       	subi	r18, 0xFB	; 251
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	8a e3       	ldi	r24, 0x3A	; 58
    17b6:	ba 01       	movw	r22, r20
    17b8:	a9 01       	movw	r20, r18
    17ba:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((seconds_counter/10) + 48,x_of_time,y_of_time + 6);
    17be:	80 91 c3 00 	lds	r24, 0x00C3
    17c2:	9a e0       	ldi	r25, 0x0A	; 10
    17c4:	69 2f       	mov	r22, r25
    17c6:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    17ca:	68 2f       	mov	r22, r24
    17cc:	60 5d       	subi	r22, 0xD0	; 208
    17ce:	80 91 60 00 	lds	r24, 0x0060
    17d2:	48 2f       	mov	r20, r24
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	80 91 61 00 	lds	r24, 0x0061
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9c 01       	movw	r18, r24
    17e0:	2a 5f       	subi	r18, 0xFA	; 250
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	86 2f       	mov	r24, r22
    17e6:	ba 01       	movw	r22, r20
    17e8:	a9 01       	movw	r20, r18
    17ea:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((seconds_counter%10) + 48,x_of_time,y_of_time + 7);
    17ee:	80 91 c3 00 	lds	r24, 0x00C3
    17f2:	9a e0       	ldi	r25, 0x0A	; 10
    17f4:	69 2f       	mov	r22, r25
    17f6:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    17fa:	89 2f       	mov	r24, r25
    17fc:	68 2f       	mov	r22, r24
    17fe:	60 5d       	subi	r22, 0xD0	; 208
    1800:	80 91 60 00 	lds	r24, 0x0060
    1804:	48 2f       	mov	r20, r24
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	80 91 61 00 	lds	r24, 0x0061
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 01       	movw	r18, r24
    1812:	29 5f       	subi	r18, 0xF9	; 249
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	86 2f       	mov	r24, r22
    1818:	ba 01       	movw	r22, r20
    181a:	a9 01       	movw	r20, r18
    181c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 
				 // date displaying
				 sendCharXY((year_counter/1000) + 48,x_of_date,y_of_date);
    1820:	80 91 66 00 	lds	r24, 0x0066
    1824:	90 91 67 00 	lds	r25, 0x0067
    1828:	28 ee       	ldi	r18, 0xE8	; 232
    182a:	33 e0       	ldi	r19, 0x03	; 3
    182c:	b9 01       	movw	r22, r18
    182e:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    1832:	9b 01       	movw	r18, r22
    1834:	c9 01       	movw	r24, r18
    1836:	80 5d       	subi	r24, 0xD0	; 208
    1838:	90 91 62 00 	lds	r25, 0x0062
    183c:	49 2f       	mov	r20, r25
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	90 91 63 00 	lds	r25, 0x0063
    1844:	29 2f       	mov	r18, r25
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	ba 01       	movw	r22, r20
    184a:	a9 01       	movw	r20, r18
    184c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY(((year_counter/100) % 10) + 48,x_of_date,y_of_date+1);
    1850:	80 91 66 00 	lds	r24, 0x0066
    1854:	90 91 67 00 	lds	r25, 0x0067
    1858:	24 e6       	ldi	r18, 0x64	; 100
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	b9 01       	movw	r22, r18
    185e:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    1862:	9b 01       	movw	r18, r22
    1864:	c9 01       	movw	r24, r18
    1866:	2a e0       	ldi	r18, 0x0A	; 10
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	b9 01       	movw	r22, r18
    186c:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    1870:	68 2f       	mov	r22, r24
    1872:	60 5d       	subi	r22, 0xD0	; 208
    1874:	80 91 62 00 	lds	r24, 0x0062
    1878:	48 2f       	mov	r20, r24
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	80 91 63 00 	lds	r24, 0x0063
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9c 01       	movw	r18, r24
    1886:	2f 5f       	subi	r18, 0xFF	; 255
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	86 2f       	mov	r24, r22
    188c:	ba 01       	movw	r22, r20
    188e:	a9 01       	movw	r20, r18
    1890:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY(((year_counter/10) % 10) + 48,x_of_date,y_of_date+2);
    1894:	80 91 66 00 	lds	r24, 0x0066
    1898:	90 91 67 00 	lds	r25, 0x0067
    189c:	2a e0       	ldi	r18, 0x0A	; 10
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	b9 01       	movw	r22, r18
    18a2:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    18a6:	9b 01       	movw	r18, r22
    18a8:	c9 01       	movw	r24, r18
    18aa:	2a e0       	ldi	r18, 0x0A	; 10
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	b9 01       	movw	r22, r18
    18b0:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    18b4:	68 2f       	mov	r22, r24
    18b6:	60 5d       	subi	r22, 0xD0	; 208
    18b8:	80 91 62 00 	lds	r24, 0x0062
    18bc:	48 2f       	mov	r20, r24
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	80 91 63 00 	lds	r24, 0x0063
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9c 01       	movw	r18, r24
    18ca:	2e 5f       	subi	r18, 0xFE	; 254
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	86 2f       	mov	r24, r22
    18d0:	ba 01       	movw	r22, r20
    18d2:	a9 01       	movw	r20, r18
    18d4:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((year_counter % 10) + 48,x_of_date,y_of_date+3);
    18d8:	80 91 66 00 	lds	r24, 0x0066
    18dc:	90 91 67 00 	lds	r25, 0x0067
    18e0:	2a e0       	ldi	r18, 0x0A	; 10
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	b9 01       	movw	r22, r18
    18e6:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__udivmodhi4>
    18ea:	68 2f       	mov	r22, r24
    18ec:	60 5d       	subi	r22, 0xD0	; 208
    18ee:	80 91 62 00 	lds	r24, 0x0062
    18f2:	48 2f       	mov	r20, r24
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	80 91 63 00 	lds	r24, 0x0063
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9c 01       	movw	r18, r24
    1900:	2d 5f       	subi	r18, 0xFD	; 253
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	86 2f       	mov	r24, r22
    1906:	ba 01       	movw	r22, r20
    1908:	a9 01       	movw	r20, r18
    190a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY('/',x_of_date,y_of_date+4);
    190e:	80 91 62 00 	lds	r24, 0x0062
    1912:	48 2f       	mov	r20, r24
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	80 91 63 00 	lds	r24, 0x0063
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9c 01       	movw	r18, r24
    1920:	2c 5f       	subi	r18, 0xFC	; 252
    1922:	3f 4f       	sbci	r19, 0xFF	; 255
    1924:	8f e2       	ldi	r24, 0x2F	; 47
    1926:	ba 01       	movw	r22, r20
    1928:	a9 01       	movw	r20, r18
    192a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((month_counter/10) + 48,x_of_date,y_of_date + 5);
    192e:	80 91 65 00 	lds	r24, 0x0065
    1932:	9a e0       	ldi	r25, 0x0A	; 10
    1934:	69 2f       	mov	r22, r25
    1936:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    193a:	68 2f       	mov	r22, r24
    193c:	60 5d       	subi	r22, 0xD0	; 208
    193e:	80 91 62 00 	lds	r24, 0x0062
    1942:	48 2f       	mov	r20, r24
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	80 91 63 00 	lds	r24, 0x0063
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9c 01       	movw	r18, r24
    1950:	2b 5f       	subi	r18, 0xFB	; 251
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	86 2f       	mov	r24, r22
    1956:	ba 01       	movw	r22, r20
    1958:	a9 01       	movw	r20, r18
    195a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((month_counter%10) + 48,x_of_date,y_of_date + 6);
    195e:	80 91 65 00 	lds	r24, 0x0065
    1962:	9a e0       	ldi	r25, 0x0A	; 10
    1964:	69 2f       	mov	r22, r25
    1966:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    196a:	89 2f       	mov	r24, r25
    196c:	68 2f       	mov	r22, r24
    196e:	60 5d       	subi	r22, 0xD0	; 208
    1970:	80 91 62 00 	lds	r24, 0x0062
    1974:	48 2f       	mov	r20, r24
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	80 91 63 00 	lds	r24, 0x0063
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9c 01       	movw	r18, r24
    1982:	2a 5f       	subi	r18, 0xFA	; 250
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	86 2f       	mov	r24, r22
    1988:	ba 01       	movw	r22, r20
    198a:	a9 01       	movw	r20, r18
    198c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY('/',x_of_date,y_of_date+7);
    1990:	80 91 62 00 	lds	r24, 0x0062
    1994:	48 2f       	mov	r20, r24
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	80 91 63 00 	lds	r24, 0x0063
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9c 01       	movw	r18, r24
    19a2:	29 5f       	subi	r18, 0xF9	; 249
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	8f e2       	ldi	r24, 0x2F	; 47
    19a8:	ba 01       	movw	r22, r20
    19aa:	a9 01       	movw	r20, r18
    19ac:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((day_counter/10) + 48,x_of_date,y_of_date + 8);
    19b0:	80 91 64 00 	lds	r24, 0x0064
    19b4:	9a e0       	ldi	r25, 0x0A	; 10
    19b6:	69 2f       	mov	r22, r25
    19b8:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    19bc:	68 2f       	mov	r22, r24
    19be:	60 5d       	subi	r22, 0xD0	; 208
    19c0:	80 91 62 00 	lds	r24, 0x0062
    19c4:	48 2f       	mov	r20, r24
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	80 91 63 00 	lds	r24, 0x0063
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9c 01       	movw	r18, r24
    19d2:	28 5f       	subi	r18, 0xF8	; 248
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	86 2f       	mov	r24, r22
    19d8:	ba 01       	movw	r22, r20
    19da:	a9 01       	movw	r20, r18
    19dc:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 sendCharXY((day_counter%10) + 48,x_of_date,y_of_date + 9);
    19e0:	80 91 64 00 	lds	r24, 0x0064
    19e4:	9a e0       	ldi	r25, 0x0A	; 10
    19e6:	69 2f       	mov	r22, r25
    19e8:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__udivmodqi4>
    19ec:	89 2f       	mov	r24, r25
    19ee:	68 2f       	mov	r22, r24
    19f0:	60 5d       	subi	r22, 0xD0	; 208
    19f2:	80 91 62 00 	lds	r24, 0x0062
    19f6:	48 2f       	mov	r20, r24
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	80 91 63 00 	lds	r24, 0x0063
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9c 01       	movw	r18, r24
    1a04:	27 5f       	subi	r18, 0xF7	; 247
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	86 2f       	mov	r24, r22
    1a0a:	ba 01       	movw	r22, r20
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 
				 
				 button1 = button_read('B',0);
    1a12:	82 e4       	ldi	r24, 0x42	; 66
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1a1e:	90 93 6a 00 	sts	0x006A, r25
    1a22:	80 93 69 00 	sts	0x0069, r24
				 button2 = button_read('B',1);
    1a26:	82 e4       	ldi	r24, 0x42	; 66
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1a32:	90 93 6c 00 	sts	0x006C, r25
    1a36:	80 93 6b 00 	sts	0x006B, r24
				 button3 = button_read('B',2);
    1a3a:	82 e4       	ldi	r24, 0x42	; 66
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	62 e0       	ldi	r22, 0x02	; 2
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1a46:	90 93 6e 00 	sts	0x006E, r25
    1a4a:	80 93 6d 00 	sts	0x006D, r24
				 button4 = button_read('B',3);
    1a4e:	82 e4       	ldi	r24, 0x42	; 66
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	63 e0       	ldi	r22, 0x03	; 3
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1a5a:	90 93 70 00 	sts	0x0070, r25
    1a5e:	80 93 6f 00 	sts	0x006F, r24
				 button7 = button_read('B',6);
    1a62:	82 e4       	ldi	r24, 0x42	; 66
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	66 e0       	ldi	r22, 0x06	; 6
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1a6e:	90 93 76 00 	sts	0x0076, r25
    1a72:	80 93 75 00 	sts	0x0075, r24
				 
				 
				 // I decided to delete some feutures because of memory overflow
				
				 button5 = button_read('B',4);
    1a76:	82 e4       	ldi	r24, 0x42	; 66
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1a82:	90 93 72 00 	sts	0x0072, r25
    1a86:	80 93 71 00 	sts	0x0071, r24
				 button6 = button_read('B',5);
    1a8a:	82 e4       	ldi	r24, 0x42	; 66
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	65 e0       	ldi	r22, 0x05	; 5
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1a96:	90 93 74 00 	sts	0x0074, r25
    1a9a:	80 93 73 00 	sts	0x0073, r24
				 button8 = button_read('B',7);
    1a9e:	82 e4       	ldi	r24, 0x42	; 66
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	67 e0       	ldi	r22, 0x07	; 7
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1aaa:	90 93 78 00 	sts	0x0078, r25
    1aae:	80 93 77 00 	sts	0x0077, r24
				 
				while (button_read('B',4) == PRESSED && button_read('B',5) == PRESSED && button_read('B',7) == PRESSED);
    1ab2:	00 00       	nop
    1ab4:	82 e4       	ldi	r24, 0x42	; 66
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	64 e0       	ldi	r22, 0x04	; 4
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	81 f4       	brne	.+32     	; 0x1ae4 <main+0x83e>
    1ac4:	82 e4       	ldi	r24, 0x42	; 66
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	65 e0       	ldi	r22, 0x05	; 5
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	41 f4       	brne	.+16     	; 0x1ae4 <main+0x83e>
    1ad4:	82 e4       	ldi	r24, 0x42	; 66
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	67 e0       	ldi	r22, 0x07	; 7
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	41 f3       	breq	.-48     	; 0x1ab4 <main+0x80e>
				
				if(button5 == PRESSED && tempcelsius == 1)
    1ae4:	80 91 71 00 	lds	r24, 0x0071
    1ae8:	90 91 72 00 	lds	r25, 0x0072
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	39 f4       	brne	.+14     	; 0x1afe <main+0x858>
    1af0:	80 91 68 00 	lds	r24, 0x0068
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	19 f4       	brne	.+6      	; 0x1afe <main+0x858>
				{
					tempcelsius = 0;
    1af8:	10 92 68 00 	sts	0x0068, r1
    1afc:	0d c0       	rjmp	.+26     	; 0x1b18 <main+0x872>
				}
				else if(button5 == PRESSED && tempcelsius == 0)
    1afe:	80 91 71 00 	lds	r24, 0x0071
    1b02:	90 91 72 00 	lds	r25, 0x0072
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	39 f4       	brne	.+14     	; 0x1b18 <main+0x872>
    1b0a:	80 91 68 00 	lds	r24, 0x0068
    1b0e:	88 23       	and	r24, r24
    1b10:	19 f4       	brne	.+6      	; 0x1b18 <main+0x872>
				{
					tempcelsius = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	80 93 68 00 	sts	0x0068, r24
				}
				
				
				 if(button8 == PRESSED && changeplace == 0)
    1b18:	80 91 77 00 	lds	r24, 0x0077
    1b1c:	90 91 78 00 	lds	r25, 0x0078
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	41 f4       	brne	.+16     	; 0x1b34 <main+0x88e>
    1b24:	80 91 ca 00 	lds	r24, 0x00CA
    1b28:	88 23       	and	r24, r24
    1b2a:	21 f4       	brne	.+8      	; 0x1b34 <main+0x88e>
				 {
					changeplace = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 93 ca 00 	sts	0x00CA, r24
    1b32:	0c c0       	rjmp	.+24     	; 0x1b4c <main+0x8a6>
				 }
				 else if(button8 = PRESSED && changeplace == 1)
    1b34:	10 92 78 00 	sts	0x0078, r1
    1b38:	10 92 77 00 	sts	0x0077, r1
    1b3c:	80 91 77 00 	lds	r24, 0x0077
    1b40:	90 91 78 00 	lds	r25, 0x0078
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <main+0x8a6>
				 {
					 changeplace = 0;
    1b48:	10 92 ca 00 	sts	0x00CA, r1
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a6 e9       	ldi	r26, 0x96	; 150
    1b52:	b3 e4       	ldi	r27, 0x43	; 67
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	ab 83       	std	Y+3, r26	; 0x03
    1b5a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	69 81       	ldd	r22, Y+1	; 0x01
    1b5e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a ef       	ldi	r20, 0xFA	; 250
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	af 83       	std	Y+7, r26	; 0x07
    1b7a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1b7c:	11 e0       	ldi	r17, 0x01	; 1
    1b7e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b80:	7e 81       	ldd	r23, Y+6	; 0x06
    1b82:	8f 81       	ldd	r24, Y+7	; 0x07
    1b84:	98 85       	ldd	r25, Y+8	; 0x08
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	0c f0       	brlt	.+2      	; 0x1b98 <main+0x8f2>
    1b96:	10 e0       	ldi	r17, 0x00	; 0
    1b98:	11 23       	and	r17, r17
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <main+0x900>
		__ticks = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9a 87       	std	Y+10, r25	; 0x0a
    1ba2:	89 87       	std	Y+9, r24	; 0x09
    1ba4:	46 c0       	rjmp	.+140    	; 0x1c32 <main+0x98c>
	else if (__tmp > 65535)
    1ba6:	11 e0       	ldi	r17, 0x01	; 1
    1ba8:	6d 81       	ldd	r22, Y+5	; 0x05
    1baa:	7e 81       	ldd	r23, Y+6	; 0x06
    1bac:	8f 81       	ldd	r24, Y+7	; 0x07
    1bae:	98 85       	ldd	r25, Y+8	; 0x08
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__gesf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	0c f0       	brlt	.+2      	; 0x1bc2 <main+0x91c>
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	11 23       	and	r17, r17
    1bc4:	61 f1       	breq	.+88     	; 0x1c1e <main+0x978>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc6:	69 81       	ldd	r22, Y+1	; 0x01
    1bc8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9a 87       	std	Y+10, r25	; 0x0a
    1bec:	89 87       	std	Y+9, r24	; 0x09
    1bee:	12 c0       	rjmp	.+36     	; 0x1c14 <main+0x96e>
    1bf0:	88 ec       	ldi	r24, 0xC8	; 200
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9c 87       	std	Y+12, r25	; 0x0c
    1bf6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bfa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bfc:	8c 01       	movw	r16, r24
    1bfe:	c8 01       	movw	r24, r16
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <main+0x95a>
    1c04:	8c 01       	movw	r16, r24
    1c06:	1c 87       	std	Y+12, r17	; 0x0c
    1c08:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	9a 87       	std	Y+10, r25	; 0x0a
    1c12:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	51 f7       	brne	.-44     	; 0x1bf0 <main+0x94a>
    1c1c:	17 c0       	rjmp	.+46     	; 0x1c4c <main+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c20:	7e 81       	ldd	r23, Y+6	; 0x06
    1c22:	8f 81       	ldd	r24, Y+7	; 0x07
    1c24:	98 85       	ldd	r25, Y+8	; 0x08
    1c26:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9a 87       	std	Y+10, r25	; 0x0a
    1c30:	89 87       	std	Y+9, r24	; 0x09
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	9e 87       	std	Y+14, r25	; 0x0e
    1c38:	8d 87       	std	Y+13, r24	; 0x0d
    1c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3e:	8c 01       	movw	r16, r24
    1c40:	f8 01       	movw	r30, r16
    1c42:	31 97       	sbiw	r30, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <main+0x99c>
    1c46:	8f 01       	movw	r16, r30
    1c48:	1e 87       	std	Y+14, r17	; 0x0e
    1c4a:	0d 87       	std	Y+13, r16	; 0x0d
				 }
				 _delay_ms(300);
				 if(button_read('B',6) == PRESSED && y_of_time > 0 && y_of_date > 0 && changeplace == 1)
    1c4c:	82 e4       	ldi	r24, 0x42	; 66
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	66 e0       	ldi	r22, 0x06	; 6
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <main+0x9b8>
    1c5c:	c2 c0       	rjmp	.+388    	; 0x1de2 <main+0xb3c>
    1c5e:	80 91 61 00 	lds	r24, 0x0061
    1c62:	88 23       	and	r24, r24
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <main+0x9c2>
    1c66:	bd c0       	rjmp	.+378    	; 0x1de2 <main+0xb3c>
    1c68:	80 91 63 00 	lds	r24, 0x0063
    1c6c:	88 23       	and	r24, r24
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <main+0x9cc>
    1c70:	b8 c0       	rjmp	.+368    	; 0x1de2 <main+0xb3c>
    1c72:	80 91 ca 00 	lds	r24, 0x00CA
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <main+0x9d6>
    1c7a:	b3 c0       	rjmp	.+358    	; 0x1de2 <main+0xb3c>
				 {
					 while(button_read('B',6) == PRESSED);
    1c7c:	00 00       	nop
    1c7e:	82 e4       	ldi	r24, 0x42	; 66
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	66 e0       	ldi	r22, 0x06	; 6
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	c1 f3       	breq	.-16     	; 0x1c7e <main+0x9d8>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	aa e7       	ldi	r26, 0x7A	; 122
    1c94:	b3 e4       	ldi	r27, 0x43	; 67
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
    1c98:	98 8b       	std	Y+16, r25	; 0x10
    1c9a:	a9 8b       	std	Y+17, r26	; 0x11
    1c9c:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ca0:	78 89       	ldd	r23, Y+16	; 0x10
    1ca2:	89 89       	ldd	r24, Y+17	; 0x11
    1ca4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8b 8b       	std	Y+19, r24	; 0x13
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	ad 8b       	std	Y+21, r26	; 0x15
    1cbc:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1cbe:	11 e0       	ldi	r17, 0x01	; 1
    1cc0:	6b 89       	ldd	r22, Y+19	; 0x13
    1cc2:	7c 89       	ldd	r23, Y+20	; 0x14
    1cc4:	8d 89       	ldd	r24, Y+21	; 0x15
    1cc6:	9e 89       	ldd	r25, Y+22	; 0x16
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	0c f0       	brlt	.+2      	; 0x1cda <main+0xa34>
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
    1cda:	11 23       	and	r17, r17
    1cdc:	29 f0       	breq	.+10     	; 0x1ce8 <main+0xa42>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	98 8f       	std	Y+24, r25	; 0x18
    1ce4:	8f 8b       	std	Y+23, r24	; 0x17
    1ce6:	46 c0       	rjmp	.+140    	; 0x1d74 <main+0xace>
	else if (__tmp > 65535)
    1ce8:	11 e0       	ldi	r17, 0x01	; 1
    1cea:	6b 89       	ldd	r22, Y+19	; 0x13
    1cec:	7c 89       	ldd	r23, Y+20	; 0x14
    1cee:	8d 89       	ldd	r24, Y+21	; 0x15
    1cf0:	9e 89       	ldd	r25, Y+22	; 0x16
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__gesf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <main+0xa5e>
    1d02:	10 e0       	ldi	r17, 0x00	; 0
    1d04:	11 23       	and	r17, r17
    1d06:	61 f1       	breq	.+88     	; 0x1d60 <main+0xaba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d0a:	78 89       	ldd	r23, Y+16	; 0x10
    1d0c:	89 89       	ldd	r24, Y+17	; 0x11
    1d0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	98 8f       	std	Y+24, r25	; 0x18
    1d2e:	8f 8b       	std	Y+23, r24	; 0x17
    1d30:	12 c0       	rjmp	.+36     	; 0x1d56 <main+0xab0>
    1d32:	88 ec       	ldi	r24, 0xC8	; 200
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9a 8f       	std	Y+26, r25	; 0x1a
    1d38:	89 8f       	std	Y+25, r24	; 0x19
    1d3a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d3e:	8c 01       	movw	r16, r24
    1d40:	c8 01       	movw	r24, r16
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <main+0xa9c>
    1d46:	8c 01       	movw	r16, r24
    1d48:	1a 8f       	std	Y+26, r17	; 0x1a
    1d4a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	98 8f       	std	Y+24, r25	; 0x18
    1d54:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	51 f7       	brne	.-44     	; 0x1d32 <main+0xa8c>
    1d5e:	17 c0       	rjmp	.+46     	; 0x1d8e <main+0xae8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d60:	6b 89       	ldd	r22, Y+19	; 0x13
    1d62:	7c 89       	ldd	r23, Y+20	; 0x14
    1d64:	8d 89       	ldd	r24, Y+21	; 0x15
    1d66:	9e 89       	ldd	r25, Y+22	; 0x16
    1d68:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	98 8f       	std	Y+24, r25	; 0x18
    1d72:	8f 8b       	std	Y+23, r24	; 0x17
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	9c 8f       	std	Y+28, r25	; 0x1c
    1d7a:	8b 8f       	std	Y+27, r24	; 0x1b
    1d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d80:	8c 01       	movw	r16, r24
    1d82:	f8 01       	movw	r30, r16
    1d84:	31 97       	sbiw	r30, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <main+0xade>
    1d88:	8f 01       	movw	r16, r30
    1d8a:	1c 8f       	std	Y+28, r17	; 0x1c
    1d8c:	0b 8f       	std	Y+27, r16	; 0x1b
					 _delay_ms(250);
					 sendCharXY(' ',x_of_time,y_of_time+7);
    1d8e:	80 91 60 00 	lds	r24, 0x0060
    1d92:	48 2f       	mov	r20, r24
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	80 91 61 00 	lds	r24, 0x0061
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 01       	movw	r18, r24
    1da0:	29 5f       	subi	r18, 0xF9	; 249
    1da2:	3f 4f       	sbci	r19, 0xFF	; 255
    1da4:	80 e2       	ldi	r24, 0x20	; 32
    1da6:	ba 01       	movw	r22, r20
    1da8:	a9 01       	movw	r20, r18
    1daa:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 sendCharXY(' ',x_of_date,y_of_date+9);
    1dae:	80 91 62 00 	lds	r24, 0x0062
    1db2:	48 2f       	mov	r20, r24
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	80 91 63 00 	lds	r24, 0x0063
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	27 5f       	subi	r18, 0xF7	; 247
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	ba 01       	movw	r22, r20
    1dc8:	a9 01       	movw	r20, r18
    1dca:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 y_of_time--;
    1dce:	80 91 61 00 	lds	r24, 0x0061
    1dd2:	81 50       	subi	r24, 0x01	; 1
    1dd4:	80 93 61 00 	sts	0x0061, r24
					 y_of_date--;
    1dd8:	80 91 63 00 	lds	r24, 0x0063
    1ddc:	81 50       	subi	r24, 0x01	; 1
    1dde:	80 93 63 00 	sts	0x0063, r24
				 }
				 if(button_read('B',5) == PRESSED && y_of_time < 7 && y_of_date < 7 && changeplace == 1)
    1de2:	82 e4       	ldi	r24, 0x42	; 66
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	65 e0       	ldi	r22, 0x05	; 5
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <main+0xb4e>
    1df2:	bc c0       	rjmp	.+376    	; 0x1f6c <main+0xcc6>
    1df4:	80 91 61 00 	lds	r24, 0x0061
    1df8:	87 30       	cpi	r24, 0x07	; 7
    1dfa:	08 f0       	brcs	.+2      	; 0x1dfe <main+0xb58>
    1dfc:	b7 c0       	rjmp	.+366    	; 0x1f6c <main+0xcc6>
    1dfe:	80 91 63 00 	lds	r24, 0x0063
    1e02:	87 30       	cpi	r24, 0x07	; 7
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <main+0xb62>
    1e06:	b2 c0       	rjmp	.+356    	; 0x1f6c <main+0xcc6>
    1e08:	80 91 ca 00 	lds	r24, 0x00CA
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <main+0xb6c>
    1e10:	ad c0       	rjmp	.+346    	; 0x1f6c <main+0xcc6>
				 {
					 while(button_read('B',5) == PRESSED);
    1e12:	00 00       	nop
    1e14:	82 e4       	ldi	r24, 0x42	; 66
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	65 e0       	ldi	r22, 0x05	; 5
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	c1 f3       	breq	.-16     	; 0x1e14 <main+0xb6e>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	aa e7       	ldi	r26, 0x7A	; 122
    1e2a:	b3 e4       	ldi	r27, 0x43	; 67
    1e2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e30:	af 8f       	std	Y+31, r26	; 0x1f
    1e32:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e34:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e36:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e3a:	98 a1       	lds	r25, 0x48
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a ef       	ldi	r20, 0xFA	; 250
    1e42:	54 e4       	ldi	r21, 0x44	; 68
    1e44:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	89 a3       	lds	r24, 0x59
    1e4e:	9a a3       	lds	r25, 0x5a
    1e50:	ab a3       	lds	r26, 0x5b
    1e52:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    1e54:	11 e0       	ldi	r17, 0x01	; 1
    1e56:	69 a1       	lds	r22, 0x49
    1e58:	7a a1       	lds	r23, 0x4a
    1e5a:	8b a1       	lds	r24, 0x4b
    1e5c:	9c a1       	lds	r25, 0x4c
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	0c f0       	brlt	.+2      	; 0x1e70 <main+0xbca>
    1e6e:	10 e0       	ldi	r17, 0x00	; 0
    1e70:	11 23       	and	r17, r17
    1e72:	29 f0       	breq	.+10     	; 0x1e7e <main+0xbd8>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9e a3       	lds	r25, 0x5e
    1e7a:	8d a3       	lds	r24, 0x5d
    1e7c:	46 c0       	rjmp	.+140    	; 0x1f0a <main+0xc64>
	else if (__tmp > 65535)
    1e7e:	11 e0       	ldi	r17, 0x01	; 1
    1e80:	69 a1       	lds	r22, 0x49
    1e82:	7a a1       	lds	r23, 0x4a
    1e84:	8b a1       	lds	r24, 0x4b
    1e86:	9c a1       	lds	r25, 0x4c
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__gesf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	0c f0       	brlt	.+2      	; 0x1e9a <main+0xbf4>
    1e98:	10 e0       	ldi	r17, 0x00	; 0
    1e9a:	11 23       	and	r17, r17
    1e9c:	61 f1       	breq	.+88     	; 0x1ef6 <main+0xc50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ea0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ea4:	98 a1       	lds	r25, 0x48
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9e a3       	lds	r25, 0x5e
    1ec4:	8d a3       	lds	r24, 0x5d
    1ec6:	12 c0       	rjmp	.+36     	; 0x1eec <main+0xc46>
    1ec8:	88 ec       	ldi	r24, 0xC8	; 200
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	98 a7       	lds	r25, 0x78
    1ece:	8f a3       	lds	r24, 0x5f
    1ed0:	8f a1       	lds	r24, 0x4f
    1ed2:	98 a5       	lds	r25, 0x68
    1ed4:	8c 01       	movw	r16, r24
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <main+0xc32>
    1edc:	8c 01       	movw	r16, r24
    1ede:	18 a7       	lds	r17, 0x78
    1ee0:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	8d a1       	lds	r24, 0x4d
    1ee4:	9e a1       	lds	r25, 0x4e
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	9e a3       	lds	r25, 0x5e
    1eea:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	8d a1       	lds	r24, 0x4d
    1eee:	9e a1       	lds	r25, 0x4e
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	51 f7       	brne	.-44     	; 0x1ec8 <main+0xc22>
    1ef4:	17 c0       	rjmp	.+46     	; 0x1f24 <main+0xc7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	69 a1       	lds	r22, 0x49
    1ef8:	7a a1       	lds	r23, 0x4a
    1efa:	8b a1       	lds	r24, 0x4b
    1efc:	9c a1       	lds	r25, 0x4c
    1efe:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9e a3       	lds	r25, 0x5e
    1f08:	8d a3       	lds	r24, 0x5d
    1f0a:	8d a1       	lds	r24, 0x4d
    1f0c:	9e a1       	lds	r25, 0x4e
    1f0e:	9a a7       	lds	r25, 0x7a
    1f10:	89 a7       	lds	r24, 0x79
    1f12:	89 a5       	lds	r24, 0x69
    1f14:	9a a5       	lds	r25, 0x6a
    1f16:	8c 01       	movw	r16, r24
    1f18:	f8 01       	movw	r30, r16
    1f1a:	31 97       	sbiw	r30, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <main+0xc74>
    1f1e:	8f 01       	movw	r16, r30
    1f20:	1a a7       	lds	r17, 0x7a
    1f22:	09 a7       	lds	r16, 0x79
					 _delay_ms(250);
					 
					 sendCharXY(' ',x_of_time,y_of_time);
    1f24:	80 91 60 00 	lds	r24, 0x0060
    1f28:	48 2f       	mov	r20, r24
    1f2a:	50 e0       	ldi	r21, 0x00	; 0
    1f2c:	80 91 61 00 	lds	r24, 0x0061
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	80 e2       	ldi	r24, 0x20	; 32
    1f36:	ba 01       	movw	r22, r20
    1f38:	a9 01       	movw	r20, r18
    1f3a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 sendCharXY(' ',x_of_date,y_of_date);
    1f3e:	80 91 62 00 	lds	r24, 0x0062
    1f42:	48 2f       	mov	r20, r24
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	80 91 63 00 	lds	r24, 0x0063
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	80 e2       	ldi	r24, 0x20	; 32
    1f50:	ba 01       	movw	r22, r20
    1f52:	a9 01       	movw	r20, r18
    1f54:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 y_of_time++;
    1f58:	80 91 61 00 	lds	r24, 0x0061
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	80 93 61 00 	sts	0x0061, r24
					 y_of_date++;
    1f62:	80 91 63 00 	lds	r24, 0x0063
    1f66:	8f 5f       	subi	r24, 0xFF	; 255
    1f68:	80 93 63 00 	sts	0x0063, r24
				 }
				 if(button_read('B',2) == PRESSED && x_of_time > 1 && x_of_date > 1 && changeplace == 1)
    1f6c:	82 e4       	ldi	r24, 0x42	; 66
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	62 e0       	ldi	r22, 0x02	; 2
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <main+0xcd8>
    1f7c:	d2 c0       	rjmp	.+420    	; 0x2122 <main+0xe7c>
    1f7e:	80 91 60 00 	lds	r24, 0x0060
    1f82:	82 30       	cpi	r24, 0x02	; 2
    1f84:	08 f4       	brcc	.+2      	; 0x1f88 <main+0xce2>
    1f86:	cd c0       	rjmp	.+410    	; 0x2122 <main+0xe7c>
    1f88:	80 91 62 00 	lds	r24, 0x0062
    1f8c:	82 30       	cpi	r24, 0x02	; 2
    1f8e:	08 f4       	brcc	.+2      	; 0x1f92 <main+0xcec>
    1f90:	c8 c0       	rjmp	.+400    	; 0x2122 <main+0xe7c>
    1f92:	80 91 ca 00 	lds	r24, 0x00CA
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <main+0xcf6>
    1f9a:	c3 c0       	rjmp	.+390    	; 0x2122 <main+0xe7c>
				 {
					 while(button_read('B',2) == PRESSED);
    1f9c:	00 00       	nop
    1f9e:	82 e4       	ldi	r24, 0x42	; 66
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	62 e0       	ldi	r22, 0x02	; 2
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	c1 f3       	breq	.-16     	; 0x1f9e <main+0xcf8>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	aa e7       	ldi	r26, 0x7A	; 122
    1fb4:	b3 e4       	ldi	r27, 0x43	; 67
    1fb6:	8b a7       	lds	r24, 0x7b
    1fb8:	9c a7       	lds	r25, 0x7c
    1fba:	ad a7       	lds	r26, 0x7d
    1fbc:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6b a5       	lds	r22, 0x6b
    1fc0:	7c a5       	lds	r23, 0x6c
    1fc2:	8d a5       	lds	r24, 0x6d
    1fc4:	9e a5       	lds	r25, 0x6e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8f a7       	lds	r24, 0x7f
    1fd8:	98 ab       	sts	0x58, r25
    1fda:	a9 ab       	sts	0x59, r26
    1fdc:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    1fde:	11 e0       	ldi	r17, 0x01	; 1
    1fe0:	6f a5       	lds	r22, 0x6f
    1fe2:	78 a9       	sts	0x48, r23
    1fe4:	89 a9       	sts	0x49, r24
    1fe6:	9a a9       	sts	0x4a, r25
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	0c f0       	brlt	.+2      	; 0x1ffa <main+0xd54>
    1ff8:	10 e0       	ldi	r17, 0x00	; 0
    1ffa:	11 23       	and	r17, r17
    1ffc:	29 f0       	breq	.+10     	; 0x2008 <main+0xd62>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c ab       	sts	0x5c, r25
    2004:	8b ab       	sts	0x5b, r24
    2006:	46 c0       	rjmp	.+140    	; 0x2094 <main+0xdee>
	else if (__tmp > 65535)
    2008:	11 e0       	ldi	r17, 0x01	; 1
    200a:	6f a5       	lds	r22, 0x6f
    200c:	78 a9       	sts	0x48, r23
    200e:	89 a9       	sts	0x49, r24
    2010:	9a a9       	sts	0x4a, r25
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__gesf2>
    201e:	18 16       	cp	r1, r24
    2020:	0c f0       	brlt	.+2      	; 0x2024 <main+0xd7e>
    2022:	10 e0       	ldi	r17, 0x00	; 0
    2024:	11 23       	and	r17, r17
    2026:	61 f1       	breq	.+88     	; 0x2080 <main+0xdda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	6b a5       	lds	r22, 0x6b
    202a:	7c a5       	lds	r23, 0x6c
    202c:	8d a5       	lds	r24, 0x6d
    202e:	9e a5       	lds	r25, 0x6e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9c ab       	sts	0x5c, r25
    204e:	8b ab       	sts	0x5b, r24
    2050:	12 c0       	rjmp	.+36     	; 0x2076 <main+0xdd0>
    2052:	88 ec       	ldi	r24, 0xC8	; 200
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9e ab       	sts	0x5e, r25
    2058:	8d ab       	sts	0x5d, r24
    205a:	8d a9       	sts	0x4d, r24
    205c:	9e a9       	sts	0x4e, r25
    205e:	8c 01       	movw	r16, r24
    2060:	c8 01       	movw	r24, r16
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <main+0xdbc>
    2066:	8c 01       	movw	r16, r24
    2068:	1e ab       	sts	0x5e, r17
    206a:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	8b a9       	sts	0x4b, r24
    206e:	9c a9       	sts	0x4c, r25
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	9c ab       	sts	0x5c, r25
    2074:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	8b a9       	sts	0x4b, r24
    2078:	9c a9       	sts	0x4c, r25
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	51 f7       	brne	.-44     	; 0x2052 <main+0xdac>
    207e:	17 c0       	rjmp	.+46     	; 0x20ae <main+0xe08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2080:	6f a5       	lds	r22, 0x6f
    2082:	78 a9       	sts	0x48, r23
    2084:	89 a9       	sts	0x49, r24
    2086:	9a a9       	sts	0x4a, r25
    2088:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9c ab       	sts	0x5c, r25
    2092:	8b ab       	sts	0x5b, r24
    2094:	8b a9       	sts	0x4b, r24
    2096:	9c a9       	sts	0x4c, r25
    2098:	98 af       	sts	0x78, r25
    209a:	8f ab       	sts	0x5f, r24
    209c:	8f a9       	sts	0x4f, r24
    209e:	98 ad       	sts	0x68, r25
    20a0:	8c 01       	movw	r16, r24
    20a2:	f8 01       	movw	r30, r16
    20a4:	31 97       	sbiw	r30, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <main+0xdfe>
    20a8:	8f 01       	movw	r16, r30
    20aa:	18 af       	sts	0x78, r17
    20ac:	0f ab       	sts	0x5f, r16
					 _delay_ms(250);
					 // add loops here
					 for(i = y_of_date; i <= y_of_date + 9;i++)
    20ae:	80 91 63 00 	lds	r24, 0x0063
    20b2:	80 93 c2 00 	sts	0x00C2, r24
    20b6:	1f c0       	rjmp	.+62     	; 0x20f6 <main+0xe50>
					 {
						 sendCharXY(' ',x_of_time,i);
    20b8:	80 91 60 00 	lds	r24, 0x0060
    20bc:	48 2f       	mov	r20, r24
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	80 91 c2 00 	lds	r24, 0x00C2
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	80 e2       	ldi	r24, 0x20	; 32
    20ca:	ba 01       	movw	r22, r20
    20cc:	a9 01       	movw	r20, r18
    20ce:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						 sendCharXY(' ',x_of_date,i);
    20d2:	80 91 62 00 	lds	r24, 0x0062
    20d6:	48 2f       	mov	r20, r24
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	80 91 c2 00 	lds	r24, 0x00C2
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	80 e2       	ldi	r24, 0x20	; 32
    20e4:	ba 01       	movw	r22, r20
    20e6:	a9 01       	movw	r20, r18
    20e8:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 if(button_read('B',2) == PRESSED && x_of_time > 1 && x_of_date > 1 && changeplace == 1)
				 {
					 while(button_read('B',2) == PRESSED);
					 _delay_ms(250);
					 // add loops here
					 for(i = y_of_date; i <= y_of_date + 9;i++)
    20ec:	80 91 c2 00 	lds	r24, 0x00C2
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	80 93 c2 00 	sts	0x00C2, r24
    20f6:	80 91 c2 00 	lds	r24, 0x00C2
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	80 91 63 00 	lds	r24, 0x0063
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	09 96       	adiw	r24, 0x09	; 9
    2108:	82 17       	cp	r24, r18
    210a:	93 07       	cpc	r25, r19
    210c:	ac f6       	brge	.-86     	; 0x20b8 <main+0xe12>
					 {
						 sendCharXY(' ',x_of_time,i);
						 sendCharXY(' ',x_of_date,i);
					 }
					 x_of_time--;
    210e:	80 91 60 00 	lds	r24, 0x0060
    2112:	81 50       	subi	r24, 0x01	; 1
    2114:	80 93 60 00 	sts	0x0060, r24
					 x_of_date--;
    2118:	80 91 62 00 	lds	r24, 0x0062
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	80 93 62 00 	sts	0x0062, r24
				 }
				 if(button_read('B',3) == PRESSED && x_of_time < 7 && x_of_date < 7 && changeplace == 1)
    2122:	82 e4       	ldi	r24, 0x42	; 66
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	63 e0       	ldi	r22, 0x03	; 3
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	09 f0       	breq	.+2      	; 0x2134 <main+0xe8e>
    2132:	15 c1       	rjmp	.+554    	; 0x235e <main+0x10b8>
    2134:	80 91 60 00 	lds	r24, 0x0060
    2138:	87 30       	cpi	r24, 0x07	; 7
    213a:	08 f0       	brcs	.+2      	; 0x213e <main+0xe98>
    213c:	10 c1       	rjmp	.+544    	; 0x235e <main+0x10b8>
    213e:	80 91 62 00 	lds	r24, 0x0062
    2142:	87 30       	cpi	r24, 0x07	; 7
    2144:	08 f0       	brcs	.+2      	; 0x2148 <main+0xea2>
    2146:	0b c1       	rjmp	.+534    	; 0x235e <main+0x10b8>
    2148:	80 91 ca 00 	lds	r24, 0x00CA
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	09 f0       	breq	.+2      	; 0x2152 <main+0xeac>
    2150:	06 c1       	rjmp	.+524    	; 0x235e <main+0x10b8>
				 {
					 while(button_read('B',3) == PRESSED);
    2152:	00 00       	nop
    2154:	82 e4       	ldi	r24, 0x42	; 66
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	63 e0       	ldi	r22, 0x03	; 3
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	c1 f3       	breq	.-16     	; 0x2154 <main+0xeae>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	aa e7       	ldi	r26, 0x7A	; 122
    216a:	b3 e4       	ldi	r27, 0x43	; 67
    216c:	89 af       	sts	0x79, r24
    216e:	9a af       	sts	0x7a, r25
    2170:	ab af       	sts	0x7b, r26
    2172:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2174:	69 ad       	sts	0x69, r22
    2176:	7a ad       	sts	0x6a, r23
    2178:	8b ad       	sts	0x6b, r24
    217a:	9c ad       	sts	0x6c, r25
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a ef       	ldi	r20, 0xFA	; 250
    2182:	54 e4       	ldi	r21, 0x44	; 68
    2184:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 01       	movw	r18, r28
    218e:	23 5c       	subi	r18, 0xC3	; 195
    2190:	3f 4f       	sbci	r19, 0xFF	; 255
    2192:	f9 01       	movw	r30, r18
    2194:	80 83       	st	Z, r24
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	a2 83       	std	Z+2, r26	; 0x02
    219a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    219c:	11 e0       	ldi	r17, 0x01	; 1
    219e:	ce 01       	movw	r24, r28
    21a0:	cd 96       	adiw	r24, 0x3d	; 61
    21a2:	fc 01       	movw	r30, r24
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	93 81       	ldd	r25, Z+3	; 0x03
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	0c f0       	brlt	.+2      	; 0x21be <main+0xf18>
    21bc:	10 e0       	ldi	r17, 0x00	; 0
    21be:	11 23       	and	r17, r17
    21c0:	49 f0       	breq	.+18     	; 0x21d4 <main+0xf2e>
		__ticks = 1;
    21c2:	ce 01       	movw	r24, r28
    21c4:	8f 5b       	subi	r24, 0xBF	; 191
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	21 e0       	ldi	r18, 0x01	; 1
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	fc 01       	movw	r30, r24
    21ce:	31 83       	std	Z+1, r19	; 0x01
    21d0:	20 83       	st	Z, r18
    21d2:	6e c0       	rjmp	.+220    	; 0x22b0 <main+0x100a>
	else if (__tmp > 65535)
    21d4:	11 e0       	ldi	r17, 0x01	; 1
    21d6:	ce 01       	movw	r24, r28
    21d8:	cd 96       	adiw	r24, 0x3d	; 61
    21da:	fc 01       	movw	r30, r24
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	3f ef       	ldi	r19, 0xFF	; 255
    21e8:	4f e7       	ldi	r20, 0x7F	; 127
    21ea:	57 e4       	ldi	r21, 0x47	; 71
    21ec:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__gesf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	0c f0       	brlt	.+2      	; 0x21f6 <main+0xf50>
    21f4:	10 e0       	ldi	r17, 0x00	; 0
    21f6:	11 23       	and	r17, r17
    21f8:	09 f4       	brne	.+2      	; 0x21fc <main+0xf56>
    21fa:	49 c0       	rjmp	.+146    	; 0x228e <main+0xfe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fc:	69 ad       	sts	0x69, r22
    21fe:	7a ad       	sts	0x6a, r23
    2200:	8b ad       	sts	0x6b, r24
    2202:	9c ad       	sts	0x6c, r25
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e2       	ldi	r20, 0x20	; 32
    220a:	51 e4       	ldi	r21, 0x41	; 65
    220c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8e 01       	movw	r16, r28
    2216:	0f 5b       	subi	r16, 0xBF	; 191
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	f8 01       	movw	r30, r16
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	27 c0       	rjmp	.+78     	; 0x227c <main+0xfd6>
    222e:	ce 01       	movw	r24, r28
    2230:	8d 5b       	subi	r24, 0xBD	; 189
    2232:	9f 4f       	sbci	r25, 0xFF	; 255
    2234:	28 ec       	ldi	r18, 0xC8	; 200
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	fc 01       	movw	r30, r24
    223a:	31 83       	std	Z+1, r19	; 0x01
    223c:	20 83       	st	Z, r18
    223e:	ce 01       	movw	r24, r28
    2240:	8d 5b       	subi	r24, 0xBD	; 189
    2242:	9f 4f       	sbci	r25, 0xFF	; 255
    2244:	fc 01       	movw	r30, r24
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	8c 01       	movw	r16, r24
    224c:	c8 01       	movw	r24, r16
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <main+0xfa8>
    2252:	8c 01       	movw	r16, r24
    2254:	ce 01       	movw	r24, r28
    2256:	8d 5b       	subi	r24, 0xBD	; 189
    2258:	9f 4f       	sbci	r25, 0xFF	; 255
    225a:	fc 01       	movw	r30, r24
    225c:	11 83       	std	Z+1, r17	; 0x01
    225e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	ce 01       	movw	r24, r28
    2262:	8f 5b       	subi	r24, 0xBF	; 191
    2264:	9f 4f       	sbci	r25, 0xFF	; 255
    2266:	9e 01       	movw	r18, r28
    2268:	2f 5b       	subi	r18, 0xBF	; 191
    226a:	3f 4f       	sbci	r19, 0xFF	; 255
    226c:	f9 01       	movw	r30, r18
    226e:	20 81       	ld	r18, Z
    2270:	31 81       	ldd	r19, Z+1	; 0x01
    2272:	21 50       	subi	r18, 0x01	; 1
    2274:	30 40       	sbci	r19, 0x00	; 0
    2276:	fc 01       	movw	r30, r24
    2278:	31 83       	std	Z+1, r19	; 0x01
    227a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227c:	ce 01       	movw	r24, r28
    227e:	8f 5b       	subi	r24, 0xBF	; 191
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	fc 01       	movw	r30, r24
    2284:	80 81       	ld	r24, Z
    2286:	91 81       	ldd	r25, Z+1	; 0x01
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	89 f6       	brne	.-94     	; 0x222e <main+0xf88>
    228c:	2e c0       	rjmp	.+92     	; 0x22ea <main+0x1044>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228e:	8e 01       	movw	r16, r28
    2290:	0f 5b       	subi	r16, 0xBF	; 191
    2292:	1f 4f       	sbci	r17, 0xFF	; 255
    2294:	ce 01       	movw	r24, r28
    2296:	cd 96       	adiw	r24, 0x3d	; 61
    2298:	fc 01       	movw	r30, r24
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	80 83       	st	Z, r24
    22b0:	ce 01       	movw	r24, r28
    22b2:	8b 5b       	subi	r24, 0xBB	; 187
    22b4:	9f 4f       	sbci	r25, 0xFF	; 255
    22b6:	9e 01       	movw	r18, r28
    22b8:	2f 5b       	subi	r18, 0xBF	; 191
    22ba:	3f 4f       	sbci	r19, 0xFF	; 255
    22bc:	f9 01       	movw	r30, r18
    22be:	20 81       	ld	r18, Z
    22c0:	31 81       	ldd	r19, Z+1	; 0x01
    22c2:	fc 01       	movw	r30, r24
    22c4:	31 83       	std	Z+1, r19	; 0x01
    22c6:	20 83       	st	Z, r18
    22c8:	ce 01       	movw	r24, r28
    22ca:	8b 5b       	subi	r24, 0xBB	; 187
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	fc 01       	movw	r30, r24
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	8c 01       	movw	r16, r24
    22d6:	c8 01       	movw	r24, r16
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <main+0x1032>
    22dc:	8c 01       	movw	r16, r24
    22de:	ce 01       	movw	r24, r28
    22e0:	8b 5b       	subi	r24, 0xBB	; 187
    22e2:	9f 4f       	sbci	r25, 0xFF	; 255
    22e4:	fc 01       	movw	r30, r24
    22e6:	11 83       	std	Z+1, r17	; 0x01
    22e8:	00 83       	st	Z, r16
					 _delay_ms(250);
				// add loops here
				for(i = y_of_date; i <= y_of_date + 9;i++)
    22ea:	80 91 63 00 	lds	r24, 0x0063
    22ee:	80 93 c2 00 	sts	0x00C2, r24
    22f2:	1f c0       	rjmp	.+62     	; 0x2332 <main+0x108c>
				{
					sendCharXY(' ',x_of_time,i);
    22f4:	80 91 60 00 	lds	r24, 0x0060
    22f8:	48 2f       	mov	r20, r24
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	80 91 c2 00 	lds	r24, 0x00C2
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	80 e2       	ldi	r24, 0x20	; 32
    2306:	ba 01       	movw	r22, r20
    2308:	a9 01       	movw	r20, r18
    230a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					sendCharXY(' ',x_of_date,i);
    230e:	80 91 62 00 	lds	r24, 0x0062
    2312:	48 2f       	mov	r20, r24
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	80 91 c2 00 	lds	r24, 0x00C2
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	80 e2       	ldi	r24, 0x20	; 32
    2320:	ba 01       	movw	r22, r20
    2322:	a9 01       	movw	r20, r18
    2324:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				 if(button_read('B',3) == PRESSED && x_of_time < 7 && x_of_date < 7 && changeplace == 1)
				 {
					 while(button_read('B',3) == PRESSED);
					 _delay_ms(250);
				// add loops here
				for(i = y_of_date; i <= y_of_date + 9;i++)
    2328:	80 91 c2 00 	lds	r24, 0x00C2
    232c:	8f 5f       	subi	r24, 0xFF	; 255
    232e:	80 93 c2 00 	sts	0x00C2, r24
    2332:	80 91 c2 00 	lds	r24, 0x00C2
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	80 91 63 00 	lds	r24, 0x0063
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	09 96       	adiw	r24, 0x09	; 9
    2344:	82 17       	cp	r24, r18
    2346:	93 07       	cpc	r25, r19
    2348:	ac f6       	brge	.-86     	; 0x22f4 <main+0x104e>
				{
					sendCharXY(' ',x_of_time,i);
					sendCharXY(' ',x_of_date,i);
				}
					 x_of_time++;
    234a:	80 91 60 00 	lds	r24, 0x0060
    234e:	8f 5f       	subi	r24, 0xFF	; 255
    2350:	80 93 60 00 	sts	0x0060, r24
					 x_of_date++;
    2354:	80 91 62 00 	lds	r24, 0x0062
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	80 93 62 00 	sts	0x0062, r24
				 }
				 					 									 
				           
			 } while (button1 == NOTPRESSED && button2 == NOTPRESSED);
    235e:	80 91 69 00 	lds	r24, 0x0069
    2362:	90 91 6a 00 	lds	r25, 0x006A
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	91 05       	cpc	r25, r1
    236a:	41 f4       	brne	.+16     	; 0x237c <main+0x10d6>
    236c:	80 91 6b 00 	lds	r24, 0x006B
    2370:	90 91 6c 00 	lds	r25, 0x006C
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	91 05       	cpc	r25, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <main+0x10d6>
    237a:	2d c8       	rjmp	.-4006   	; 0x13d6 <main+0x130>
			if(button1 == PRESSED)
    237c:	80 91 69 00 	lds	r24, 0x0069
    2380:	90 91 6a 00 	lds	r25, 0x006A
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	09 f0       	breq	.+2      	; 0x238a <main+0x10e4>
    2388:	dc c3       	rjmp	.+1976   	; 0x2b42 <main+0x189c>
			 {
				     clear_display();
    238a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <clear_display>
				     while (button_read('B',0) == PRESSED); // stay until it your button is not pressed
    238e:	00 00       	nop
    2390:	82 e4       	ldi	r24, 0x42	; 66
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	c1 f3       	breq	.-16     	; 0x2390 <main+0x10ea>
				    // _delay_ms(250);
					 first_digit = 0;
    23a0:	10 92 c6 00 	sts	0x00C6, r1
					 second_digit = 0;
    23a4:	10 92 c7 00 	sts	0x00C7, r1
					 //_delay_ms(300);
					 sendStrXY("hours:--",X_OF_INPUT,Y_OF_INPUT + 1);
    23a8:	85 e8       	ldi	r24, 0x85	; 133
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	63 e0       	ldi	r22, 0x03	; 3
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	44 e0       	ldi	r20, 0x04	; 4
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <sendStrXY>
					 firstdigithours:
					 do
					 { 
					 sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT+7);
    23b8:	80 91 c6 00 	lds	r24, 0x00C6
    23bc:	80 5d       	subi	r24, 0xD0	; 208
    23be:	63 e0       	ldi	r22, 0x03	; 3
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	4a e0       	ldi	r20, 0x0A	; 10
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 do{
						 button1 = button_read('B',0);
    23ca:	82 e4       	ldi	r24, 0x42	; 66
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    23d6:	90 93 6a 00 	sts	0x006A, r25
    23da:	80 93 69 00 	sts	0x0069, r24
						 button3 = button_read('B',2);
    23de:	82 e4       	ldi	r24, 0x42	; 66
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	70 e0       	ldi	r23, 0x00	; 0
    23e6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    23ea:	90 93 6e 00 	sts	0x006E, r25
    23ee:	80 93 6d 00 	sts	0x006D, r24
						 button4 = button_read('B',3);
    23f2:	82 e4       	ldi	r24, 0x42	; 66
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	63 e0       	ldi	r22, 0x03	; 3
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    23fa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    23fe:	90 93 70 00 	sts	0x0070, r25
    2402:	80 93 6f 00 	sts	0x006F, r24
					 }while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED);
    2406:	80 91 6d 00 	lds	r24, 0x006D
    240a:	90 91 6e 00 	lds	r25, 0x006E
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	91 05       	cpc	r25, r1
    2412:	71 f4       	brne	.+28     	; 0x2430 <main+0x118a>
    2414:	80 91 6f 00 	lds	r24, 0x006F
    2418:	90 91 70 00 	lds	r25, 0x0070
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	91 05       	cpc	r25, r1
    2420:	39 f4       	brne	.+14     	; 0x2430 <main+0x118a>
    2422:	80 91 69 00 	lds	r24, 0x0069
    2426:	90 91 6a 00 	lds	r25, 0x006A
    242a:	81 30       	cpi	r24, 0x01	; 1
    242c:	91 05       	cpc	r25, r1
    242e:	69 f2       	breq	.-102    	; 0x23ca <main+0x1124>
					 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    2430:	00 00       	nop
    2432:	82 e4       	ldi	r24, 0x42	; 66
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	63 e0       	ldi	r22, 0x03	; 3
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	c1 f3       	breq	.-16     	; 0x2432 <main+0x118c>
    2442:	82 e4       	ldi	r24, 0x42	; 66
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	62 e0       	ldi	r22, 0x02	; 2
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	81 f3       	breq	.-32     	; 0x2432 <main+0x118c>
					// _delay_ms(250);
					 if(button3 == PRESSED && ((first_digit < 2 && second_digit < 5) ||  first_digit < 1 ))
    2452:	80 91 6d 00 	lds	r24, 0x006D
    2456:	90 91 6e 00 	lds	r25, 0x006E
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	91 f4       	brne	.+36     	; 0x2482 <main+0x11dc>
    245e:	80 91 c6 00 	lds	r24, 0x00C6
    2462:	82 30       	cpi	r24, 0x02	; 2
    2464:	20 f4       	brcc	.+8      	; 0x246e <main+0x11c8>
    2466:	80 91 c7 00 	lds	r24, 0x00C7
    246a:	85 30       	cpi	r24, 0x05	; 5
    246c:	20 f0       	brcs	.+8      	; 0x2476 <main+0x11d0>
    246e:	80 91 c6 00 	lds	r24, 0x00C6
    2472:	88 23       	and	r24, r24
    2474:	31 f4       	brne	.+12     	; 0x2482 <main+0x11dc>
					 {
						 first_digit++;
    2476:	80 91 c6 00 	lds	r24, 0x00C6
    247a:	8f 5f       	subi	r24, 0xFF	; 255
    247c:	80 93 c6 00 	sts	0x00C6, r24
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <main+0x11fa>
					 }
					 else if(button4 == PRESSED && first_digit > 0)
    2482:	80 91 6f 00 	lds	r24, 0x006F
    2486:	90 91 70 00 	lds	r25, 0x0070
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	49 f4       	brne	.+18     	; 0x24a0 <main+0x11fa>
    248e:	80 91 c6 00 	lds	r24, 0x00C6
    2492:	88 23       	and	r24, r24
    2494:	29 f0       	breq	.+10     	; 0x24a0 <main+0x11fa>
					 {
						 first_digit--;
    2496:	80 91 c6 00 	lds	r24, 0x00C6
    249a:	81 50       	subi	r24, 0x01	; 1
    249c:	80 93 c6 00 	sts	0x00C6, r24
					 }	 
					 }while(button_read('B',0) == NOTPRESSED);
    24a0:	82 e4       	ldi	r24, 0x42	; 66
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    24ac:	81 30       	cpi	r24, 0x01	; 1
    24ae:	91 05       	cpc	r25, r1
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <main+0x120e>
    24b2:	82 cf       	rjmp	.-252    	; 0x23b8 <main+0x1112>
					 while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    24b4:	00 00       	nop
    24b6:	82 e4       	ldi	r24, 0x42	; 66
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	c1 f3       	breq	.-16     	; 0x24b6 <main+0x1210>
					// _delay_ms(250);
					 do{
					 sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT+8);
    24c6:	80 91 c7 00 	lds	r24, 0x00C7
    24ca:	80 5d       	subi	r24, 0xD0	; 208
    24cc:	63 e0       	ldi	r22, 0x03	; 3
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	4b e0       	ldi	r20, 0x0B	; 11
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 do{
						 button1 = button_read('B',0);
    24d8:	82 e4       	ldi	r24, 0x42	; 66
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    24e4:	90 93 6a 00 	sts	0x006A, r25
    24e8:	80 93 69 00 	sts	0x0069, r24
						 button3 = button_read('B',2);
    24ec:	82 e4       	ldi	r24, 0x42	; 66
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    24f8:	90 93 6e 00 	sts	0x006E, r25
    24fc:	80 93 6d 00 	sts	0x006D, r24
						 button4 = button_read('B',3);
    2500:	82 e4       	ldi	r24, 0x42	; 66
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	63 e0       	ldi	r22, 0x03	; 3
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    250c:	90 93 70 00 	sts	0x0070, r25
    2510:	80 93 6f 00 	sts	0x006F, r24
						 button7 = button_read('B',6);
    2514:	82 e4       	ldi	r24, 0x42	; 66
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	66 e0       	ldi	r22, 0x06	; 6
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2520:	90 93 76 00 	sts	0x0076, r25
    2524:	80 93 75 00 	sts	0x0075, r24
					 }while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED && button7 == NOTPRESSED);
    2528:	80 91 6d 00 	lds	r24, 0x006D
    252c:	90 91 6e 00 	lds	r25, 0x006E
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	91 05       	cpc	r25, r1
    2534:	b1 f4       	brne	.+44     	; 0x2562 <main+0x12bc>
    2536:	80 91 6f 00 	lds	r24, 0x006F
    253a:	90 91 70 00 	lds	r25, 0x0070
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	91 05       	cpc	r25, r1
    2542:	79 f4       	brne	.+30     	; 0x2562 <main+0x12bc>
    2544:	80 91 69 00 	lds	r24, 0x0069
    2548:	90 91 6a 00 	lds	r25, 0x006A
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	91 05       	cpc	r25, r1
    2550:	41 f4       	brne	.+16     	; 0x2562 <main+0x12bc>
    2552:	80 91 75 00 	lds	r24, 0x0075
    2556:	90 91 76 00 	lds	r25, 0x0076
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	91 05       	cpc	r25, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <main+0x12bc>
    2560:	bb cf       	rjmp	.-138    	; 0x24d8 <main+0x1232>
					 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    2562:	00 00       	nop
    2564:	82 e4       	ldi	r24, 0x42	; 66
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	63 e0       	ldi	r22, 0x03	; 3
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	c1 f3       	breq	.-16     	; 0x2564 <main+0x12be>
    2574:	82 e4       	ldi	r24, 0x42	; 66
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	62 e0       	ldi	r22, 0x02	; 2
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	81 f3       	breq	.-32     	; 0x2564 <main+0x12be>
    2584:	82 e4       	ldi	r24, 0x42	; 66
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	66 e0       	ldi	r22, 0x06	; 6
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	41 f3       	breq	.-48     	; 0x2564 <main+0x12be>
					// _delay_ms(250);
					  if(button3 == PRESSED && ((first_digit == 2 && second_digit < 4) || (first_digit < 2 && second_digit < 9)))
    2594:	80 91 6d 00 	lds	r24, 0x006D
    2598:	90 91 6e 00 	lds	r25, 0x006E
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	b1 f4       	brne	.+44     	; 0x25cc <main+0x1326>
    25a0:	80 91 c6 00 	lds	r24, 0x00C6
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	21 f4       	brne	.+8      	; 0x25b0 <main+0x130a>
    25a8:	80 91 c7 00 	lds	r24, 0x00C7
    25ac:	84 30       	cpi	r24, 0x04	; 4
    25ae:	40 f0       	brcs	.+16     	; 0x25c0 <main+0x131a>
    25b0:	80 91 c6 00 	lds	r24, 0x00C6
    25b4:	82 30       	cpi	r24, 0x02	; 2
    25b6:	50 f4       	brcc	.+20     	; 0x25cc <main+0x1326>
    25b8:	80 91 c7 00 	lds	r24, 0x00C7
    25bc:	89 30       	cpi	r24, 0x09	; 9
    25be:	30 f4       	brcc	.+12     	; 0x25cc <main+0x1326>
					  {
						  second_digit++;
    25c0:	80 91 c7 00 	lds	r24, 0x00C7
    25c4:	8f 5f       	subi	r24, 0xFF	; 255
    25c6:	80 93 c7 00 	sts	0x00C7, r24
    25ca:	1e c0       	rjmp	.+60     	; 0x2608 <main+0x1362>
					  }
					  else if(button4 == PRESSED && second_digit > 0)
    25cc:	80 91 6f 00 	lds	r24, 0x006F
    25d0:	90 91 70 00 	lds	r25, 0x0070
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	51 f4       	brne	.+20     	; 0x25ec <main+0x1346>
    25d8:	80 91 c7 00 	lds	r24, 0x00C7
    25dc:	88 23       	and	r24, r24
    25de:	31 f0       	breq	.+12     	; 0x25ec <main+0x1346>
					  {
						  second_digit--;
    25e0:	80 91 c7 00 	lds	r24, 0x00C7
    25e4:	81 50       	subi	r24, 0x01	; 1
    25e6:	80 93 c7 00 	sts	0x00C7, r24
    25ea:	0e c0       	rjmp	.+28     	; 0x2608 <main+0x1362>
					  }
					  else if(button7 == PRESSED)
    25ec:	80 91 75 00 	lds	r24, 0x0075
    25f0:	90 91 76 00 	lds	r25, 0x0076
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	41 f4       	brne	.+16     	; 0x2608 <main+0x1362>
					  {
						  sendCharXY('-',X_OF_INPUT,Y_OF_INPUT+8);
    25f8:	8d e2       	ldi	r24, 0x2D	; 45
    25fa:	63 e0       	ldi	r22, 0x03	; 3
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	4b e0       	ldi	r20, 0x0B	; 11
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						  goto firstdigithours;
    2606:	d8 ce       	rjmp	.-592    	; 0x23b8 <main+0x1112>
					  }						  
				    }while(button_read('B',0) == NOTPRESSED);
    2608:	82 e4       	ldi	r24, 0x42	; 66
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2614:	81 30       	cpi	r24, 0x01	; 1
    2616:	91 05       	cpc	r25, r1
    2618:	09 f4       	brne	.+2      	; 0x261c <main+0x1376>
    261a:	55 cf       	rjmp	.-342    	; 0x24c6 <main+0x1220>
					hours_counter = (first_digit * 10) + second_digit;
    261c:	80 91 c6 00 	lds	r24, 0x00C6
    2620:	88 0f       	add	r24, r24
    2622:	98 2f       	mov	r25, r24
    2624:	99 0f       	add	r25, r25
    2626:	99 0f       	add	r25, r25
    2628:	98 0f       	add	r25, r24
    262a:	80 91 c7 00 	lds	r24, 0x00C7
    262e:	89 0f       	add	r24, r25
    2630:	80 93 c5 00 	sts	0x00C5, r24
				    while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    2634:	00 00       	nop
    2636:	82 e4       	ldi	r24, 0x42	; 66
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	70 e0       	ldi	r23, 0x00	; 0
    263e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	c1 f3       	breq	.-16     	; 0x2636 <main+0x1390>
				   // _delay_ms(250);
					
					 clear_display();
    2646:	0e 94 ab 1c 	call	0x3956	; 0x3956 <clear_display>
					 first_digit = 0;
    264a:	10 92 c6 00 	sts	0x00C6, r1
					 second_digit = 0;
    264e:	10 92 c7 00 	sts	0x00C7, r1
					// _delay_ms(300);
					 sendStrXY("minutes:--",X_OF_INPUT,Y_OF_INPUT);	
    2652:	8e e8       	ldi	r24, 0x8E	; 142
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	63 e0       	ldi	r22, 0x03	; 3
    2658:	70 e0       	ldi	r23, 0x00	; 0
    265a:	43 e0       	ldi	r20, 0x03	; 3
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <sendStrXY>
					 firstdigitminutes: 
					 do
					 {
						 
						 sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT+8);
    2662:	80 91 c6 00 	lds	r24, 0x00C6
    2666:	80 5d       	subi	r24, 0xD0	; 208
    2668:	63 e0       	ldi	r22, 0x03	; 3
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	4b e0       	ldi	r20, 0x0B	; 11
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						 do{
							 button1 = button_read('B',0);
    2674:	82 e4       	ldi	r24, 0x42	; 66
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2680:	90 93 6a 00 	sts	0x006A, r25
    2684:	80 93 69 00 	sts	0x0069, r24
							 button3 = button_read('B',2);
    2688:	82 e4       	ldi	r24, 0x42	; 66
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2694:	90 93 6e 00 	sts	0x006E, r25
    2698:	80 93 6d 00 	sts	0x006D, r24
							 button4 = button_read('B',3);
    269c:	82 e4       	ldi	r24, 0x42	; 66
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	63 e0       	ldi	r22, 0x03	; 3
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    26a8:	90 93 70 00 	sts	0x0070, r25
    26ac:	80 93 6f 00 	sts	0x006F, r24
						 }while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED);
    26b0:	80 91 6d 00 	lds	r24, 0x006D
    26b4:	90 91 6e 00 	lds	r25, 0x006E
    26b8:	81 30       	cpi	r24, 0x01	; 1
    26ba:	91 05       	cpc	r25, r1
    26bc:	71 f4       	brne	.+28     	; 0x26da <main+0x1434>
    26be:	80 91 6f 00 	lds	r24, 0x006F
    26c2:	90 91 70 00 	lds	r25, 0x0070
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	91 05       	cpc	r25, r1
    26ca:	39 f4       	brne	.+14     	; 0x26da <main+0x1434>
    26cc:	80 91 69 00 	lds	r24, 0x0069
    26d0:	90 91 6a 00 	lds	r25, 0x006A
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	91 05       	cpc	r25, r1
    26d8:	69 f2       	breq	.-102    	; 0x2674 <main+0x13ce>
						 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    26da:	00 00       	nop
    26dc:	82 e4       	ldi	r24, 0x42	; 66
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	63 e0       	ldi	r22, 0x03	; 3
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	c1 f3       	breq	.-16     	; 0x26dc <main+0x1436>
    26ec:	82 e4       	ldi	r24, 0x42	; 66
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	81 f3       	breq	.-32     	; 0x26dc <main+0x1436>
						// _delay_ms(250);
						  if(button3 == PRESSED && first_digit < 5)
    26fc:	80 91 6d 00 	lds	r24, 0x006D
    2700:	90 91 6e 00 	lds	r25, 0x006E
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	51 f4       	brne	.+20     	; 0x271c <main+0x1476>
    2708:	80 91 c6 00 	lds	r24, 0x00C6
    270c:	85 30       	cpi	r24, 0x05	; 5
    270e:	30 f4       	brcc	.+12     	; 0x271c <main+0x1476>
						  {
							  first_digit++;
    2710:	80 91 c6 00 	lds	r24, 0x00C6
    2714:	8f 5f       	subi	r24, 0xFF	; 255
    2716:	80 93 c6 00 	sts	0x00C6, r24
    271a:	0f c0       	rjmp	.+30     	; 0x273a <main+0x1494>
						  }
						  else if(button4 == PRESSED && first_digit > 0)
    271c:	80 91 6f 00 	lds	r24, 0x006F
    2720:	90 91 70 00 	lds	r25, 0x0070
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	49 f4       	brne	.+18     	; 0x273a <main+0x1494>
    2728:	80 91 c6 00 	lds	r24, 0x00C6
    272c:	88 23       	and	r24, r24
    272e:	29 f0       	breq	.+10     	; 0x273a <main+0x1494>
						  {
							  first_digit--;
    2730:	80 91 c6 00 	lds	r24, 0x00C6
    2734:	81 50       	subi	r24, 0x01	; 1
    2736:	80 93 c6 00 	sts	0x00C6, r24
						  }
					 }while(button1 == NOTPRESSED);
    273a:	80 91 69 00 	lds	r24, 0x0069
    273e:	90 91 6a 00 	lds	r25, 0x006A
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	91 05       	cpc	r25, r1
    2746:	09 f4       	brne	.+2      	; 0x274a <main+0x14a4>
    2748:	8c cf       	rjmp	.-232    	; 0x2662 <main+0x13bc>
					 while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    274a:	00 00       	nop
    274c:	82 e4       	ldi	r24, 0x42	; 66
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	c1 f3       	breq	.-16     	; 0x274c <main+0x14a6>
					// _delay_ms(250);
					do{
					 
					 sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT+9);
    275c:	80 91 c7 00 	lds	r24, 0x00C7
    2760:	80 5d       	subi	r24, 0xD0	; 208
    2762:	63 e0       	ldi	r22, 0x03	; 3
    2764:	70 e0       	ldi	r23, 0x00	; 0
    2766:	4c e0       	ldi	r20, 0x0C	; 12
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					do{
						button1 = button_read('B',0);
    276e:	82 e4       	ldi	r24, 0x42	; 66
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    277a:	90 93 6a 00 	sts	0x006A, r25
    277e:	80 93 69 00 	sts	0x0069, r24
						button3 = button_read('B',2);
    2782:	82 e4       	ldi	r24, 0x42	; 66
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	62 e0       	ldi	r22, 0x02	; 2
    2788:	70 e0       	ldi	r23, 0x00	; 0
    278a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    278e:	90 93 6e 00 	sts	0x006E, r25
    2792:	80 93 6d 00 	sts	0x006D, r24
						button4 = button_read('B',3);
    2796:	82 e4       	ldi	r24, 0x42	; 66
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	63 e0       	ldi	r22, 0x03	; 3
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    27a2:	90 93 70 00 	sts	0x0070, r25
    27a6:	80 93 6f 00 	sts	0x006F, r24
						button7 = button_read('B',6);
    27aa:	82 e4       	ldi	r24, 0x42	; 66
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	66 e0       	ldi	r22, 0x06	; 6
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    27b6:	90 93 76 00 	sts	0x0076, r25
    27ba:	80 93 75 00 	sts	0x0075, r24
					}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED && button7 == NOTPRESSED);
    27be:	80 91 6d 00 	lds	r24, 0x006D
    27c2:	90 91 6e 00 	lds	r25, 0x006E
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	91 05       	cpc	r25, r1
    27ca:	b1 f4       	brne	.+44     	; 0x27f8 <main+0x1552>
    27cc:	80 91 6f 00 	lds	r24, 0x006F
    27d0:	90 91 70 00 	lds	r25, 0x0070
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	91 05       	cpc	r25, r1
    27d8:	79 f4       	brne	.+30     	; 0x27f8 <main+0x1552>
    27da:	80 91 69 00 	lds	r24, 0x0069
    27de:	90 91 6a 00 	lds	r25, 0x006A
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	91 05       	cpc	r25, r1
    27e6:	41 f4       	brne	.+16     	; 0x27f8 <main+0x1552>
    27e8:	80 91 75 00 	lds	r24, 0x0075
    27ec:	90 91 76 00 	lds	r25, 0x0076
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	91 05       	cpc	r25, r1
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <main+0x1552>
    27f6:	bb cf       	rjmp	.-138    	; 0x276e <main+0x14c8>
					 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    27f8:	00 00       	nop
    27fa:	82 e4       	ldi	r24, 0x42	; 66
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	63 e0       	ldi	r22, 0x03	; 3
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	c1 f3       	breq	.-16     	; 0x27fa <main+0x1554>
    280a:	82 e4       	ldi	r24, 0x42	; 66
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	62 e0       	ldi	r22, 0x02	; 2
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	81 f3       	breq	.-32     	; 0x27fa <main+0x1554>
    281a:	82 e4       	ldi	r24, 0x42	; 66
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	66 e0       	ldi	r22, 0x06	; 6
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	41 f3       	breq	.-48     	; 0x27fa <main+0x1554>
					// _delay_ms(250);
					  if(button3 == PRESSED && second_digit < 9)
    282a:	80 91 6d 00 	lds	r24, 0x006D
    282e:	90 91 6e 00 	lds	r25, 0x006E
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	51 f4       	brne	.+20     	; 0x284a <main+0x15a4>
    2836:	80 91 c7 00 	lds	r24, 0x00C7
    283a:	89 30       	cpi	r24, 0x09	; 9
    283c:	30 f4       	brcc	.+12     	; 0x284a <main+0x15a4>
					  {
						  second_digit++;
    283e:	80 91 c7 00 	lds	r24, 0x00C7
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	80 93 c7 00 	sts	0x00C7, r24
    2848:	1e c0       	rjmp	.+60     	; 0x2886 <main+0x15e0>
					  }
					  else if(button4 == PRESSED && second_digit > 0)
    284a:	80 91 6f 00 	lds	r24, 0x006F
    284e:	90 91 70 00 	lds	r25, 0x0070
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	51 f4       	brne	.+20     	; 0x286a <main+0x15c4>
    2856:	80 91 c7 00 	lds	r24, 0x00C7
    285a:	88 23       	and	r24, r24
    285c:	31 f0       	breq	.+12     	; 0x286a <main+0x15c4>
					  {
						  second_digit--;
    285e:	80 91 c7 00 	lds	r24, 0x00C7
    2862:	81 50       	subi	r24, 0x01	; 1
    2864:	80 93 c7 00 	sts	0x00C7, r24
    2868:	0e c0       	rjmp	.+28     	; 0x2886 <main+0x15e0>
					  }
					  else if(button7 == PRESSED)
    286a:	80 91 75 00 	lds	r24, 0x0075
    286e:	90 91 76 00 	lds	r25, 0x0076
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	41 f4       	brne	.+16     	; 0x2886 <main+0x15e0>
					  {
						  sendCharXY('-',X_OF_INPUT,Y_OF_INPUT+9);
    2876:	8d e2       	ldi	r24, 0x2D	; 45
    2878:	63 e0       	ldi	r22, 0x03	; 3
    287a:	70 e0       	ldi	r23, 0x00	; 0
    287c:	4c e0       	ldi	r20, 0x0C	; 12
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						  goto firstdigitminutes;
    2884:	ee ce       	rjmp	.-548    	; 0x2662 <main+0x13bc>
					  }
				 }while(button1 == NOTPRESSED);
    2886:	80 91 69 00 	lds	r24, 0x0069
    288a:	90 91 6a 00 	lds	r25, 0x006A
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	91 05       	cpc	r25, r1
    2892:	09 f4       	brne	.+2      	; 0x2896 <main+0x15f0>
    2894:	63 cf       	rjmp	.-314    	; 0x275c <main+0x14b6>
				 minutes_counter = (first_digit * 10) + second_digit;
    2896:	80 91 c6 00 	lds	r24, 0x00C6
    289a:	88 0f       	add	r24, r24
    289c:	98 2f       	mov	r25, r24
    289e:	99 0f       	add	r25, r25
    28a0:	99 0f       	add	r25, r25
    28a2:	98 0f       	add	r25, r24
    28a4:	80 91 c7 00 	lds	r24, 0x00C7
    28a8:	89 0f       	add	r24, r25
    28aa:	80 93 c4 00 	sts	0x00C4, r24
				 while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    28ae:	00 00       	nop
    28b0:	82 e4       	ldi	r24, 0x42	; 66
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	c1 f3       	breq	.-16     	; 0x28b0 <main+0x160a>
				// _delay_ms(250);
				 clear_display();
    28c0:	0e 94 ab 1c 	call	0x3956	; 0x3956 <clear_display>
				 first_digit = 0;
    28c4:	10 92 c6 00 	sts	0x00C6, r1
				 second_digit = 0;
    28c8:	10 92 c7 00 	sts	0x00C7, r1
				// _delay_ms(300);
				 sendStrXY("seconds:--",X_OF_INPUT,Y_OF_INPUT);
    28cc:	89 e9       	ldi	r24, 0x99	; 153
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	63 e0       	ldi	r22, 0x03	; 3
    28d2:	70 e0       	ldi	r23, 0x00	; 0
    28d4:	43 e0       	ldi	r20, 0x03	; 3
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <sendStrXY>
				 firstdigitseconds:
				 do{
					  sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT+8);
    28dc:	80 91 c6 00 	lds	r24, 0x00C6
    28e0:	80 5d       	subi	r24, 0xD0	; 208
    28e2:	63 e0       	ldi	r22, 0x03	; 3
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	4b e0       	ldi	r20, 0x0B	; 11
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					 do{
						 button1 = button_read('B',0);
    28ee:	82 e4       	ldi	r24, 0x42	; 66
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	70 e0       	ldi	r23, 0x00	; 0
    28f6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    28fa:	90 93 6a 00 	sts	0x006A, r25
    28fe:	80 93 69 00 	sts	0x0069, r24
						 button3 = button_read('B',2);
    2902:	82 e4       	ldi	r24, 0x42	; 66
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	62 e0       	ldi	r22, 0x02	; 2
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    290e:	90 93 6e 00 	sts	0x006E, r25
    2912:	80 93 6d 00 	sts	0x006D, r24
						 button4 = button_read('B',3);
    2916:	82 e4       	ldi	r24, 0x42	; 66
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2922:	90 93 70 00 	sts	0x0070, r25
    2926:	80 93 6f 00 	sts	0x006F, r24
					 }while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED);
    292a:	80 91 6d 00 	lds	r24, 0x006D
    292e:	90 91 6e 00 	lds	r25, 0x006E
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	91 05       	cpc	r25, r1
    2936:	71 f4       	brne	.+28     	; 0x2954 <main+0x16ae>
    2938:	80 91 6f 00 	lds	r24, 0x006F
    293c:	90 91 70 00 	lds	r25, 0x0070
    2940:	81 30       	cpi	r24, 0x01	; 1
    2942:	91 05       	cpc	r25, r1
    2944:	39 f4       	brne	.+14     	; 0x2954 <main+0x16ae>
    2946:	80 91 69 00 	lds	r24, 0x0069
    294a:	90 91 6a 00 	lds	r25, 0x006A
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	91 05       	cpc	r25, r1
    2952:	69 f2       	breq	.-102    	; 0x28ee <main+0x1648>
					 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    2954:	00 00       	nop
    2956:	82 e4       	ldi	r24, 0x42	; 66
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	63 e0       	ldi	r22, 0x03	; 3
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	c1 f3       	breq	.-16     	; 0x2956 <main+0x16b0>
    2966:	82 e4       	ldi	r24, 0x42	; 66
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	62 e0       	ldi	r22, 0x02	; 2
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	81 f3       	breq	.-32     	; 0x2956 <main+0x16b0>
					// _delay_ms(250);
					  if(button3 == PRESSED && first_digit < 5)
    2976:	80 91 6d 00 	lds	r24, 0x006D
    297a:	90 91 6e 00 	lds	r25, 0x006E
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	51 f4       	brne	.+20     	; 0x2996 <main+0x16f0>
    2982:	80 91 c6 00 	lds	r24, 0x00C6
    2986:	85 30       	cpi	r24, 0x05	; 5
    2988:	30 f4       	brcc	.+12     	; 0x2996 <main+0x16f0>
					  {
						  first_digit++;
    298a:	80 91 c6 00 	lds	r24, 0x00C6
    298e:	8f 5f       	subi	r24, 0xFF	; 255
    2990:	80 93 c6 00 	sts	0x00C6, r24
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <main+0x170e>
					  }
					  else if(button4 == PRESSED && first_digit > 0)
    2996:	80 91 6f 00 	lds	r24, 0x006F
    299a:	90 91 70 00 	lds	r25, 0x0070
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	49 f4       	brne	.+18     	; 0x29b4 <main+0x170e>
    29a2:	80 91 c6 00 	lds	r24, 0x00C6
    29a6:	88 23       	and	r24, r24
    29a8:	29 f0       	breq	.+10     	; 0x29b4 <main+0x170e>
					  {
						  first_digit--;
    29aa:	80 91 c6 00 	lds	r24, 0x00C6
    29ae:	81 50       	subi	r24, 0x01	; 1
    29b0:	80 93 c6 00 	sts	0x00C6, r24
					  }
				}while(button1 == NOTPRESSED);
    29b4:	80 91 69 00 	lds	r24, 0x0069
    29b8:	90 91 6a 00 	lds	r25, 0x006A
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	91 05       	cpc	r25, r1
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <main+0x171e>
    29c2:	8c cf       	rjmp	.-232    	; 0x28dc <main+0x1636>
				while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    29c4:	00 00       	nop
    29c6:	82 e4       	ldi	r24, 0x42	; 66
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	70 e0       	ldi	r23, 0x00	; 0
    29ce:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	c1 f3       	breq	.-16     	; 0x29c6 <main+0x1720>
			//	_delay_ms(250);
				do{
				 sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT+9);
    29d6:	80 91 c7 00 	lds	r24, 0x00C7
    29da:	80 5d       	subi	r24, 0xD0	; 208
    29dc:	63 e0       	ldi	r22, 0x03	; 3
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	4c e0       	ldi	r20, 0x0C	; 12
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
				do{
					button1 = button_read('B',0);
    29e8:	82 e4       	ldi	r24, 0x42	; 66
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    29f4:	90 93 6a 00 	sts	0x006A, r25
    29f8:	80 93 69 00 	sts	0x0069, r24
					button3 = button_read('B',2);
    29fc:	82 e4       	ldi	r24, 0x42	; 66
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	62 e0       	ldi	r22, 0x02	; 2
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a08:	90 93 6e 00 	sts	0x006E, r25
    2a0c:	80 93 6d 00 	sts	0x006D, r24
					button4 = button_read('B',3);
    2a10:	82 e4       	ldi	r24, 0x42	; 66
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	63 e0       	ldi	r22, 0x03	; 3
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a1c:	90 93 70 00 	sts	0x0070, r25
    2a20:	80 93 6f 00 	sts	0x006F, r24
					button7 = button_read('B',6);
    2a24:	82 e4       	ldi	r24, 0x42	; 66
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	66 e0       	ldi	r22, 0x06	; 6
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a30:	90 93 76 00 	sts	0x0076, r25
    2a34:	80 93 75 00 	sts	0x0075, r24
					
				}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button1 == NOTPRESSED && button7 == NOTPRESSED);
    2a38:	80 91 6d 00 	lds	r24, 0x006D
    2a3c:	90 91 6e 00 	lds	r25, 0x006E
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	91 05       	cpc	r25, r1
    2a44:	b1 f4       	brne	.+44     	; 0x2a72 <main+0x17cc>
    2a46:	80 91 6f 00 	lds	r24, 0x006F
    2a4a:	90 91 70 00 	lds	r25, 0x0070
    2a4e:	81 30       	cpi	r24, 0x01	; 1
    2a50:	91 05       	cpc	r25, r1
    2a52:	79 f4       	brne	.+30     	; 0x2a72 <main+0x17cc>
    2a54:	80 91 69 00 	lds	r24, 0x0069
    2a58:	90 91 6a 00 	lds	r25, 0x006A
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	91 05       	cpc	r25, r1
    2a60:	41 f4       	brne	.+16     	; 0x2a72 <main+0x17cc>
    2a62:	80 91 75 00 	lds	r24, 0x0075
    2a66:	90 91 76 00 	lds	r25, 0x0076
    2a6a:	81 30       	cpi	r24, 0x01	; 1
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <main+0x17cc>
    2a70:	bb cf       	rjmp	.-138    	; 0x29e8 <main+0x1742>
				 while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    2a72:	00 00       	nop
    2a74:	82 e4       	ldi	r24, 0x42	; 66
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	63 e0       	ldi	r22, 0x03	; 3
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	c1 f3       	breq	.-16     	; 0x2a74 <main+0x17ce>
    2a84:	82 e4       	ldi	r24, 0x42	; 66
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	62 e0       	ldi	r22, 0x02	; 2
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	81 f3       	breq	.-32     	; 0x2a74 <main+0x17ce>
    2a94:	82 e4       	ldi	r24, 0x42	; 66
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	66 e0       	ldi	r22, 0x06	; 6
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	41 f3       	breq	.-48     	; 0x2a74 <main+0x17ce>
			//	 _delay_ms(250);
				  if(button3 == PRESSED && second_digit < 9)
    2aa4:	80 91 6d 00 	lds	r24, 0x006D
    2aa8:	90 91 6e 00 	lds	r25, 0x006E
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	51 f4       	brne	.+20     	; 0x2ac4 <main+0x181e>
    2ab0:	80 91 c7 00 	lds	r24, 0x00C7
    2ab4:	89 30       	cpi	r24, 0x09	; 9
    2ab6:	30 f4       	brcc	.+12     	; 0x2ac4 <main+0x181e>
				  {
					  second_digit++;
    2ab8:	80 91 c7 00 	lds	r24, 0x00C7
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	80 93 c7 00 	sts	0x00C7, r24
    2ac2:	1e c0       	rjmp	.+60     	; 0x2b00 <main+0x185a>
				  }
				  else if(button4 == PRESSED && second_digit > 0)
    2ac4:	80 91 6f 00 	lds	r24, 0x006F
    2ac8:	90 91 70 00 	lds	r25, 0x0070
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	51 f4       	brne	.+20     	; 0x2ae4 <main+0x183e>
    2ad0:	80 91 c7 00 	lds	r24, 0x00C7
    2ad4:	88 23       	and	r24, r24
    2ad6:	31 f0       	breq	.+12     	; 0x2ae4 <main+0x183e>
				  {
					  second_digit--;
    2ad8:	80 91 c7 00 	lds	r24, 0x00C7
    2adc:	81 50       	subi	r24, 0x01	; 1
    2ade:	80 93 c7 00 	sts	0x00C7, r24
    2ae2:	0e c0       	rjmp	.+28     	; 0x2b00 <main+0x185a>
				  }
				  else if(button7 == PRESSED)
    2ae4:	80 91 75 00 	lds	r24, 0x0075
    2ae8:	90 91 76 00 	lds	r25, 0x0076
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	41 f4       	brne	.+16     	; 0x2b00 <main+0x185a>
				  {
					  sendCharXY('-',X_OF_INPUT,Y_OF_INPUT+9);
    2af0:	8d e2       	ldi	r24, 0x2D	; 45
    2af2:	63 e0       	ldi	r22, 0x03	; 3
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	4c e0       	ldi	r20, 0x0C	; 12
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
					  goto firstdigitseconds;  
    2afe:	ee ce       	rjmp	.-548    	; 0x28dc <main+0x1636>
				  }
				 }while(button_read('B',0) == NOTPRESSED);
    2b00:	82 e4       	ldi	r24, 0x42	; 66
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	70 e0       	ldi	r23, 0x00	; 0
    2b08:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	91 05       	cpc	r25, r1
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <main+0x186e>
    2b12:	61 cf       	rjmp	.-318    	; 0x29d6 <main+0x1730>
				 seconds_counter = (first_digit * 10) + second_digit;
    2b14:	80 91 c6 00 	lds	r24, 0x00C6
    2b18:	88 0f       	add	r24, r24
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	99 0f       	add	r25, r25
    2b1e:	99 0f       	add	r25, r25
    2b20:	98 0f       	add	r25, r24
    2b22:	80 91 c7 00 	lds	r24, 0x00C7
    2b26:	89 0f       	add	r24, r25
    2b28:	80 93 c3 00 	sts	0x00C3, r24
			 while(button_read('B',0) == PRESSED);   // stay until it your button is not pressed
    2b2c:	00 00       	nop
    2b2e:	82 e4       	ldi	r24, 0x42	; 66
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	c1 f3       	breq	.-16     	; 0x2b2e <main+0x1888>
			// _delay_ms(250);
			 goto tempchange;
    2b3e:	0c 94 df 09 	jmp	0x13be	; 0x13be <main+0x118>
				}		 
				if(button2 == PRESSED)
    2b42:	80 91 6b 00 	lds	r24, 0x006B
    2b46:	90 91 6c 00 	lds	r25, 0x006C
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	11 f0       	breq	.+4      	; 0x2b52 <main+0x18ac>
    2b4e:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <main+0x12e>
				{
					clear_display();
    2b52:	0e 94 ab 1c 	call	0x3956	; 0x3956 <clear_display>
					while (button_read('B',1) == PRESSED); // stay until it your button is not pressed
    2b56:	00 00       	nop
    2b58:	82 e4       	ldi	r24, 0x42	; 66
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	c1 f3       	breq	.-16     	; 0x2b58 <main+0x18b2>
					//_delay_ms(250);
					
					first_digit = 2;
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	80 93 c6 00 	sts	0x00C6, r24
					second_digit = 0;
    2b6e:	10 92 c7 00 	sts	0x00C7, r1
					third_digit = 2;
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	80 93 c8 00 	sts	0x00C8, r24
					fourth_digit = 4;
    2b78:	84 e0       	ldi	r24, 0x04	; 4
    2b7a:	80 93 c9 00 	sts	0x00C9, r24
				//	_delay_ms(300);
					sendStrXY("year:----",X_OF_INPUT,Y_OF_INPUT + 1);
    2b7e:	84 ea       	ldi	r24, 0xA4	; 164
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	63 e0       	ldi	r22, 0x03	; 3
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	44 e0       	ldi	r20, 0x04	; 4
    2b88:	50 e0       	ldi	r21, 0x00	; 0
    2b8a:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <sendStrXY>
					firstdigityear:
					do
					{
						
						sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT + 6);
    2b8e:	80 91 c6 00 	lds	r24, 0x00C6
    2b92:	80 5d       	subi	r24, 0xD0	; 208
    2b94:	63 e0       	ldi	r22, 0x03	; 3
    2b96:	70 e0       	ldi	r23, 0x00	; 0
    2b98:	49 e0       	ldi	r20, 0x09	; 9
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						do{
							button2 = button_read('B',1);
    2ba0:	82 e4       	ldi	r24, 0x42	; 66
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	61 e0       	ldi	r22, 0x01	; 1
    2ba6:	70 e0       	ldi	r23, 0x00	; 0
    2ba8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2bac:	90 93 6c 00 	sts	0x006C, r25
    2bb0:	80 93 6b 00 	sts	0x006B, r24
							button3 = button_read('B',2);
    2bb4:	82 e4       	ldi	r24, 0x42	; 66
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	62 e0       	ldi	r22, 0x02	; 2
    2bba:	70 e0       	ldi	r23, 0x00	; 0
    2bbc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2bc0:	90 93 6e 00 	sts	0x006E, r25
    2bc4:	80 93 6d 00 	sts	0x006D, r24
							button4 = button_read('B',3);
    2bc8:	82 e4       	ldi	r24, 0x42	; 66
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	63 e0       	ldi	r22, 0x03	; 3
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2bd4:	90 93 70 00 	sts	0x0070, r25
    2bd8:	80 93 6f 00 	sts	0x006F, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED);
    2bdc:	80 91 6d 00 	lds	r24, 0x006D
    2be0:	90 91 6e 00 	lds	r25, 0x006E
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	91 05       	cpc	r25, r1
    2be8:	71 f4       	brne	.+28     	; 0x2c06 <main+0x1960>
    2bea:	80 91 6f 00 	lds	r24, 0x006F
    2bee:	90 91 70 00 	lds	r25, 0x0070
    2bf2:	81 30       	cpi	r24, 0x01	; 1
    2bf4:	91 05       	cpc	r25, r1
    2bf6:	39 f4       	brne	.+14     	; 0x2c06 <main+0x1960>
    2bf8:	80 91 6b 00 	lds	r24, 0x006B
    2bfc:	90 91 6c 00 	lds	r25, 0x006C
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	91 05       	cpc	r25, r1
    2c04:	69 f2       	breq	.-102    	; 0x2ba0 <main+0x18fa>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    2c06:	00 00       	nop
    2c08:	82 e4       	ldi	r24, 0x42	; 66
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	63 e0       	ldi	r22, 0x03	; 3
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	c1 f3       	breq	.-16     	; 0x2c08 <main+0x1962>
    2c18:	82 e4       	ldi	r24, 0x42	; 66
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	62 e0       	ldi	r22, 0x02	; 2
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	81 f3       	breq	.-32     	; 0x2c08 <main+0x1962>
						//_delay_ms(250);
						if(button3 == PRESSED && first_digit < 2)
    2c28:	80 91 6d 00 	lds	r24, 0x006D
    2c2c:	90 91 6e 00 	lds	r25, 0x006E
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	51 f4       	brne	.+20     	; 0x2c48 <main+0x19a2>
    2c34:	80 91 c6 00 	lds	r24, 0x00C6
    2c38:	82 30       	cpi	r24, 0x02	; 2
    2c3a:	30 f4       	brcc	.+12     	; 0x2c48 <main+0x19a2>
						{
							first_digit++;
    2c3c:	80 91 c6 00 	lds	r24, 0x00C6
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	80 93 c6 00 	sts	0x00C6, r24
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <main+0x19c0>
						}
						else if(button4 == PRESSED && first_digit > 1)
    2c48:	80 91 6f 00 	lds	r24, 0x006F
    2c4c:	90 91 70 00 	lds	r25, 0x0070
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	49 f4       	brne	.+18     	; 0x2c66 <main+0x19c0>
    2c54:	80 91 c6 00 	lds	r24, 0x00C6
    2c58:	82 30       	cpi	r24, 0x02	; 2
    2c5a:	28 f0       	brcs	.+10     	; 0x2c66 <main+0x19c0>
						{
							first_digit--;
    2c5c:	80 91 c6 00 	lds	r24, 0x00C6
    2c60:	81 50       	subi	r24, 0x01	; 1
    2c62:	80 93 c6 00 	sts	0x00C6, r24
						}

					}while(button_read('B',1) == NOTPRESSED);
    2c66:	82 e4       	ldi	r24, 0x42	; 66
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	61 e0       	ldi	r22, 0x01	; 1
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c72:	81 30       	cpi	r24, 0x01	; 1
    2c74:	91 05       	cpc	r25, r1
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <main+0x19d4>
    2c78:	8a cf       	rjmp	.-236    	; 0x2b8e <main+0x18e8>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    2c7a:	00 00       	nop
    2c7c:	82 e4       	ldi	r24, 0x42	; 66
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	61 e0       	ldi	r22, 0x01	; 1
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	c1 f3       	breq	.-16     	; 0x2c7c <main+0x19d6>
				//	_delay_ms(250);
					seconddigityear:
					do{
						
						sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT + 7);
    2c8c:	80 91 c7 00 	lds	r24, 0x00C7
    2c90:	80 5d       	subi	r24, 0xD0	; 208
    2c92:	63 e0       	ldi	r22, 0x03	; 3
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	4a e0       	ldi	r20, 0x0A	; 10
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						do{
							button2 = button_read('B',1);
    2c9e:	82 e4       	ldi	r24, 0x42	; 66
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	70 e0       	ldi	r23, 0x00	; 0
    2ca6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2caa:	90 93 6c 00 	sts	0x006C, r25
    2cae:	80 93 6b 00 	sts	0x006B, r24
							button3 = button_read('B',2);
    2cb2:	82 e4       	ldi	r24, 0x42	; 66
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	62 e0       	ldi	r22, 0x02	; 2
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2cbe:	90 93 6e 00 	sts	0x006E, r25
    2cc2:	80 93 6d 00 	sts	0x006D, r24
							button4 = button_read('B',3);
    2cc6:	82 e4       	ldi	r24, 0x42	; 66
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	63 e0       	ldi	r22, 0x03	; 3
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2cd2:	90 93 70 00 	sts	0x0070, r25
    2cd6:	80 93 6f 00 	sts	0x006F, r24
							button7 = button_read('B',6);
    2cda:	82 e4       	ldi	r24, 0x42	; 66
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	66 e0       	ldi	r22, 0x06	; 6
    2ce0:	70 e0       	ldi	r23, 0x00	; 0
    2ce2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2ce6:	90 93 76 00 	sts	0x0076, r25
    2cea:	80 93 75 00 	sts	0x0075, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    2cee:	80 91 6d 00 	lds	r24, 0x006D
    2cf2:	90 91 6e 00 	lds	r25, 0x006E
    2cf6:	81 30       	cpi	r24, 0x01	; 1
    2cf8:	91 05       	cpc	r25, r1
    2cfa:	b1 f4       	brne	.+44     	; 0x2d28 <main+0x1a82>
    2cfc:	80 91 6f 00 	lds	r24, 0x006F
    2d00:	90 91 70 00 	lds	r25, 0x0070
    2d04:	81 30       	cpi	r24, 0x01	; 1
    2d06:	91 05       	cpc	r25, r1
    2d08:	79 f4       	brne	.+30     	; 0x2d28 <main+0x1a82>
    2d0a:	80 91 6b 00 	lds	r24, 0x006B
    2d0e:	90 91 6c 00 	lds	r25, 0x006C
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	91 05       	cpc	r25, r1
    2d16:	41 f4       	brne	.+16     	; 0x2d28 <main+0x1a82>
    2d18:	80 91 75 00 	lds	r24, 0x0075
    2d1c:	90 91 76 00 	lds	r25, 0x0076
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	91 05       	cpc	r25, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <main+0x1a82>
    2d26:	bb cf       	rjmp	.-138    	; 0x2c9e <main+0x19f8>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    2d28:	00 00       	nop
    2d2a:	82 e4       	ldi	r24, 0x42	; 66
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	63 e0       	ldi	r22, 0x03	; 3
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	c1 f3       	breq	.-16     	; 0x2d2a <main+0x1a84>
    2d3a:	82 e4       	ldi	r24, 0x42	; 66
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	62 e0       	ldi	r22, 0x02	; 2
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	81 f3       	breq	.-32     	; 0x2d2a <main+0x1a84>
    2d4a:	82 e4       	ldi	r24, 0x42	; 66
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	66 e0       	ldi	r22, 0x06	; 6
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	41 f3       	breq	.-48     	; 0x2d2a <main+0x1a84>
					//	_delay_ms(250);
						if(button3 == PRESSED && second_digit < 9)
    2d5a:	80 91 6d 00 	lds	r24, 0x006D
    2d5e:	90 91 6e 00 	lds	r25, 0x006E
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	51 f4       	brne	.+20     	; 0x2d7a <main+0x1ad4>
    2d66:	80 91 c7 00 	lds	r24, 0x00C7
    2d6a:	89 30       	cpi	r24, 0x09	; 9
    2d6c:	30 f4       	brcc	.+12     	; 0x2d7a <main+0x1ad4>
						{
							second_digit++;
    2d6e:	80 91 c7 00 	lds	r24, 0x00C7
    2d72:	8f 5f       	subi	r24, 0xFF	; 255
    2d74:	80 93 c7 00 	sts	0x00C7, r24
    2d78:	1e c0       	rjmp	.+60     	; 0x2db6 <main+0x1b10>
						}
						else if(button4 == PRESSED && second_digit > 0)
    2d7a:	80 91 6f 00 	lds	r24, 0x006F
    2d7e:	90 91 70 00 	lds	r25, 0x0070
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	51 f4       	brne	.+20     	; 0x2d9a <main+0x1af4>
    2d86:	80 91 c7 00 	lds	r24, 0x00C7
    2d8a:	88 23       	and	r24, r24
    2d8c:	31 f0       	breq	.+12     	; 0x2d9a <main+0x1af4>
						{
							second_digit--;
    2d8e:	80 91 c7 00 	lds	r24, 0x00C7
    2d92:	81 50       	subi	r24, 0x01	; 1
    2d94:	80 93 c7 00 	sts	0x00C7, r24
    2d98:	0e c0       	rjmp	.+28     	; 0x2db6 <main+0x1b10>
						}
						else if(button7 == PRESSED)
    2d9a:	80 91 75 00 	lds	r24, 0x0075
    2d9e:	90 91 76 00 	lds	r25, 0x0076
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	41 f4       	brne	.+16     	; 0x2db6 <main+0x1b10>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 7);
    2da6:	8d e2       	ldi	r24, 0x2D	; 45
    2da8:	63 e0       	ldi	r22, 0x03	; 3
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	4a e0       	ldi	r20, 0x0A	; 10
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
							goto firstdigityear;
    2db4:	ec ce       	rjmp	.-552    	; 0x2b8e <main+0x18e8>
						}
						
					}while(button_read('B',1) == NOTPRESSED);
    2db6:	82 e4       	ldi	r24, 0x42	; 66
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	61 e0       	ldi	r22, 0x01	; 1
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <main+0x1b24>
    2dc8:	61 cf       	rjmp	.-318    	; 0x2c8c <main+0x19e6>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    2dca:	00 00       	nop
    2dcc:	82 e4       	ldi	r24, 0x42	; 66
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	c1 f3       	breq	.-16     	; 0x2dcc <main+0x1b26>
				//	_delay_ms(250);
					thirddigityear:
					do
					{
						
						sendCharXY(third_digit + 48,X_OF_INPUT,Y_OF_INPUT + 8);
    2ddc:	80 91 c8 00 	lds	r24, 0x00C8
    2de0:	80 5d       	subi	r24, 0xD0	; 208
    2de2:	63 e0       	ldi	r22, 0x03	; 3
    2de4:	70 e0       	ldi	r23, 0x00	; 0
    2de6:	4b e0       	ldi	r20, 0x0B	; 11
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						do{
							button2 = button_read('B',1);
    2dee:	82 e4       	ldi	r24, 0x42	; 66
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	61 e0       	ldi	r22, 0x01	; 1
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2dfa:	90 93 6c 00 	sts	0x006C, r25
    2dfe:	80 93 6b 00 	sts	0x006B, r24
							button3 = button_read('B',2);
    2e02:	82 e4       	ldi	r24, 0x42	; 66
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	62 e0       	ldi	r22, 0x02	; 2
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e0e:	90 93 6e 00 	sts	0x006E, r25
    2e12:	80 93 6d 00 	sts	0x006D, r24
							button4 = button_read('B',3);
    2e16:	82 e4       	ldi	r24, 0x42	; 66
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	63 e0       	ldi	r22, 0x03	; 3
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e22:	90 93 70 00 	sts	0x0070, r25
    2e26:	80 93 6f 00 	sts	0x006F, r24
							button7 = button_read('B',6);
    2e2a:	82 e4       	ldi	r24, 0x42	; 66
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	66 e0       	ldi	r22, 0x06	; 6
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e36:	90 93 76 00 	sts	0x0076, r25
    2e3a:	80 93 75 00 	sts	0x0075, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    2e3e:	80 91 6d 00 	lds	r24, 0x006D
    2e42:	90 91 6e 00 	lds	r25, 0x006E
    2e46:	81 30       	cpi	r24, 0x01	; 1
    2e48:	91 05       	cpc	r25, r1
    2e4a:	b1 f4       	brne	.+44     	; 0x2e78 <main+0x1bd2>
    2e4c:	80 91 6f 00 	lds	r24, 0x006F
    2e50:	90 91 70 00 	lds	r25, 0x0070
    2e54:	81 30       	cpi	r24, 0x01	; 1
    2e56:	91 05       	cpc	r25, r1
    2e58:	79 f4       	brne	.+30     	; 0x2e78 <main+0x1bd2>
    2e5a:	80 91 6b 00 	lds	r24, 0x006B
    2e5e:	90 91 6c 00 	lds	r25, 0x006C
    2e62:	81 30       	cpi	r24, 0x01	; 1
    2e64:	91 05       	cpc	r25, r1
    2e66:	41 f4       	brne	.+16     	; 0x2e78 <main+0x1bd2>
    2e68:	80 91 75 00 	lds	r24, 0x0075
    2e6c:	90 91 76 00 	lds	r25, 0x0076
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	91 05       	cpc	r25, r1
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <main+0x1bd2>
    2e76:	bb cf       	rjmp	.-138    	; 0x2dee <main+0x1b48>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    2e78:	00 00       	nop
    2e7a:	82 e4       	ldi	r24, 0x42	; 66
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	63 e0       	ldi	r22, 0x03	; 3
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	c1 f3       	breq	.-16     	; 0x2e7a <main+0x1bd4>
    2e8a:	82 e4       	ldi	r24, 0x42	; 66
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	62 e0       	ldi	r22, 0x02	; 2
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	81 f3       	breq	.-32     	; 0x2e7a <main+0x1bd4>
    2e9a:	82 e4       	ldi	r24, 0x42	; 66
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	66 e0       	ldi	r22, 0x06	; 6
    2ea0:	70 e0       	ldi	r23, 0x00	; 0
    2ea2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	41 f3       	breq	.-48     	; 0x2e7a <main+0x1bd4>
					//	_delay_ms(250);
						if(button3 == PRESSED && third_digit < 9)
    2eaa:	80 91 6d 00 	lds	r24, 0x006D
    2eae:	90 91 6e 00 	lds	r25, 0x006E
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	51 f4       	brne	.+20     	; 0x2eca <main+0x1c24>
    2eb6:	80 91 c8 00 	lds	r24, 0x00C8
    2eba:	89 30       	cpi	r24, 0x09	; 9
    2ebc:	30 f4       	brcc	.+12     	; 0x2eca <main+0x1c24>
						{
							third_digit++;
    2ebe:	80 91 c8 00 	lds	r24, 0x00C8
    2ec2:	8f 5f       	subi	r24, 0xFF	; 255
    2ec4:	80 93 c8 00 	sts	0x00C8, r24
    2ec8:	1e c0       	rjmp	.+60     	; 0x2f06 <main+0x1c60>
						}
						else if(button4 == PRESSED && third_digit > 0)
    2eca:	80 91 6f 00 	lds	r24, 0x006F
    2ece:	90 91 70 00 	lds	r25, 0x0070
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	51 f4       	brne	.+20     	; 0x2eea <main+0x1c44>
    2ed6:	80 91 c8 00 	lds	r24, 0x00C8
    2eda:	88 23       	and	r24, r24
    2edc:	31 f0       	breq	.+12     	; 0x2eea <main+0x1c44>
						{
							third_digit--;
    2ede:	80 91 c8 00 	lds	r24, 0x00C8
    2ee2:	81 50       	subi	r24, 0x01	; 1
    2ee4:	80 93 c8 00 	sts	0x00C8, r24
    2ee8:	0e c0       	rjmp	.+28     	; 0x2f06 <main+0x1c60>
						}
						else if(button7 == PRESSED)
    2eea:	80 91 75 00 	lds	r24, 0x0075
    2eee:	90 91 76 00 	lds	r25, 0x0076
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	41 f4       	brne	.+16     	; 0x2f06 <main+0x1c60>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 8);
    2ef6:	8d e2       	ldi	r24, 0x2D	; 45
    2ef8:	63 e0       	ldi	r22, 0x03	; 3
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	4b e0       	ldi	r20, 0x0B	; 11
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
							goto seconddigityear;
    2f04:	c3 ce       	rjmp	.-634    	; 0x2c8c <main+0x19e6>
						}
					}while(button_read('B',1) == NOTPRESSED);
    2f06:	82 e4       	ldi	r24, 0x42	; 66
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	61 e0       	ldi	r22, 0x01	; 1
    2f0c:	70 e0       	ldi	r23, 0x00	; 0
    2f0e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f12:	81 30       	cpi	r24, 0x01	; 1
    2f14:	91 05       	cpc	r25, r1
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <main+0x1c74>
    2f18:	61 cf       	rjmp	.-318    	; 0x2ddc <main+0x1b36>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    2f1a:	00 00       	nop
    2f1c:	82 e4       	ldi	r24, 0x42	; 66
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	61 e0       	ldi	r22, 0x01	; 1
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	c1 f3       	breq	.-16     	; 0x2f1c <main+0x1c76>
				//	_delay_ms(250);
					
					do
					{
						sendCharXY(fourth_digit + 48,X_OF_INPUT,Y_OF_INPUT + 9);
    2f2c:	80 91 c9 00 	lds	r24, 0x00C9
    2f30:	80 5d       	subi	r24, 0xD0	; 208
    2f32:	63 e0       	ldi	r22, 0x03	; 3
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	4c e0       	ldi	r20, 0x0C	; 12
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						do{
							button2 = button_read('B',1);
    2f3e:	82 e4       	ldi	r24, 0x42	; 66
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	61 e0       	ldi	r22, 0x01	; 1
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f4a:	90 93 6c 00 	sts	0x006C, r25
    2f4e:	80 93 6b 00 	sts	0x006B, r24
							button3 = button_read('B',2);
    2f52:	82 e4       	ldi	r24, 0x42	; 66
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	62 e0       	ldi	r22, 0x02	; 2
    2f58:	70 e0       	ldi	r23, 0x00	; 0
    2f5a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f5e:	90 93 6e 00 	sts	0x006E, r25
    2f62:	80 93 6d 00 	sts	0x006D, r24
							button4 = button_read('B',3);
    2f66:	82 e4       	ldi	r24, 0x42	; 66
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	63 e0       	ldi	r22, 0x03	; 3
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f72:	90 93 70 00 	sts	0x0070, r25
    2f76:	80 93 6f 00 	sts	0x006F, r24
							button7 = button_read('B',6);
    2f7a:	82 e4       	ldi	r24, 0x42	; 66
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	66 e0       	ldi	r22, 0x06	; 6
    2f80:	70 e0       	ldi	r23, 0x00	; 0
    2f82:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2f86:	90 93 76 00 	sts	0x0076, r25
    2f8a:	80 93 75 00 	sts	0x0075, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    2f8e:	80 91 6d 00 	lds	r24, 0x006D
    2f92:	90 91 6e 00 	lds	r25, 0x006E
    2f96:	81 30       	cpi	r24, 0x01	; 1
    2f98:	91 05       	cpc	r25, r1
    2f9a:	b1 f4       	brne	.+44     	; 0x2fc8 <main+0x1d22>
    2f9c:	80 91 6f 00 	lds	r24, 0x006F
    2fa0:	90 91 70 00 	lds	r25, 0x0070
    2fa4:	81 30       	cpi	r24, 0x01	; 1
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	79 f4       	brne	.+30     	; 0x2fc8 <main+0x1d22>
    2faa:	80 91 6b 00 	lds	r24, 0x006B
    2fae:	90 91 6c 00 	lds	r25, 0x006C
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	41 f4       	brne	.+16     	; 0x2fc8 <main+0x1d22>
    2fb8:	80 91 75 00 	lds	r24, 0x0075
    2fbc:	90 91 76 00 	lds	r25, 0x0076
    2fc0:	81 30       	cpi	r24, 0x01	; 1
    2fc2:	91 05       	cpc	r25, r1
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <main+0x1d22>
    2fc6:	bb cf       	rjmp	.-138    	; 0x2f3e <main+0x1c98>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    2fc8:	00 00       	nop
    2fca:	82 e4       	ldi	r24, 0x42	; 66
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	63 e0       	ldi	r22, 0x03	; 3
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	c1 f3       	breq	.-16     	; 0x2fca <main+0x1d24>
    2fda:	82 e4       	ldi	r24, 0x42	; 66
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	62 e0       	ldi	r22, 0x02	; 2
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	81 f3       	breq	.-32     	; 0x2fca <main+0x1d24>
    2fea:	82 e4       	ldi	r24, 0x42	; 66
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	66 e0       	ldi	r22, 0x06	; 6
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	41 f3       	breq	.-48     	; 0x2fca <main+0x1d24>
					//	_delay_ms(250);
						if(button3 == PRESSED && fourth_digit < 9)
    2ffa:	80 91 6d 00 	lds	r24, 0x006D
    2ffe:	90 91 6e 00 	lds	r25, 0x006E
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	51 f4       	brne	.+20     	; 0x301a <main+0x1d74>
    3006:	80 91 c9 00 	lds	r24, 0x00C9
    300a:	89 30       	cpi	r24, 0x09	; 9
    300c:	30 f4       	brcc	.+12     	; 0x301a <main+0x1d74>
						{
							fourth_digit++;
    300e:	80 91 c9 00 	lds	r24, 0x00C9
    3012:	8f 5f       	subi	r24, 0xFF	; 255
    3014:	80 93 c9 00 	sts	0x00C9, r24
    3018:	1e c0       	rjmp	.+60     	; 0x3056 <main+0x1db0>
						}
						else if(button4 == PRESSED && fourth_digit > 0)
    301a:	80 91 6f 00 	lds	r24, 0x006F
    301e:	90 91 70 00 	lds	r25, 0x0070
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	51 f4       	brne	.+20     	; 0x303a <main+0x1d94>
    3026:	80 91 c9 00 	lds	r24, 0x00C9
    302a:	88 23       	and	r24, r24
    302c:	31 f0       	breq	.+12     	; 0x303a <main+0x1d94>
						{
							fourth_digit--;
    302e:	80 91 c9 00 	lds	r24, 0x00C9
    3032:	81 50       	subi	r24, 0x01	; 1
    3034:	80 93 c9 00 	sts	0x00C9, r24
    3038:	0e c0       	rjmp	.+28     	; 0x3056 <main+0x1db0>
						}
						else if(button7 == PRESSED)
    303a:	80 91 75 00 	lds	r24, 0x0075
    303e:	90 91 76 00 	lds	r25, 0x0076
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	41 f4       	brne	.+16     	; 0x3056 <main+0x1db0>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 9);
    3046:	8d e2       	ldi	r24, 0x2D	; 45
    3048:	63 e0       	ldi	r22, 0x03	; 3
    304a:	70 e0       	ldi	r23, 0x00	; 0
    304c:	4c e0       	ldi	r20, 0x0C	; 12
    304e:	50 e0       	ldi	r21, 0x00	; 0
    3050:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
							goto thirddigityear;
    3054:	c3 ce       	rjmp	.-634    	; 0x2ddc <main+0x1b36>
						}
						
					}while(button_read('B',1) == NOTPRESSED);
    3056:	82 e4       	ldi	r24, 0x42	; 66
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	61 e0       	ldi	r22, 0x01	; 1
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3062:	81 30       	cpi	r24, 0x01	; 1
    3064:	91 05       	cpc	r25, r1
    3066:	09 f4       	brne	.+2      	; 0x306a <main+0x1dc4>
    3068:	61 cf       	rjmp	.-318    	; 0x2f2c <main+0x1c86>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    306a:	00 00       	nop
    306c:	82 e4       	ldi	r24, 0x42	; 66
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	61 e0       	ldi	r22, 0x01	; 1
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	c1 f3       	breq	.-16     	; 0x306c <main+0x1dc6>
					//_delay_ms(250);
					year_counter = (first_digit * 1000) + (second_digit * 100) + (third_digit * 10) + fourth_digit;
    307c:	80 91 c6 00 	lds	r24, 0x00C6
    3080:	48 2f       	mov	r20, r24
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	88 ee       	ldi	r24, 0xE8	; 232
    3086:	93 e0       	ldi	r25, 0x03	; 3
    3088:	48 9f       	mul	r20, r24
    308a:	90 01       	movw	r18, r0
    308c:	49 9f       	mul	r20, r25
    308e:	30 0d       	add	r19, r0
    3090:	58 9f       	mul	r21, r24
    3092:	30 0d       	add	r19, r0
    3094:	11 24       	eor	r1, r1
    3096:	80 91 c7 00 	lds	r24, 0x00C7
    309a:	68 2f       	mov	r22, r24
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	44 e6       	ldi	r20, 0x64	; 100
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	64 9f       	mul	r22, r20
    30a4:	c0 01       	movw	r24, r0
    30a6:	65 9f       	mul	r22, r21
    30a8:	90 0d       	add	r25, r0
    30aa:	74 9f       	mul	r23, r20
    30ac:	90 0d       	add	r25, r0
    30ae:	11 24       	eor	r1, r1
    30b0:	28 0f       	add	r18, r24
    30b2:	39 1f       	adc	r19, r25
    30b4:	80 91 c8 00 	lds	r24, 0x00C8
    30b8:	88 2f       	mov	r24, r24
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	ac 01       	movw	r20, r24
    30c2:	44 0f       	add	r20, r20
    30c4:	55 1f       	adc	r21, r21
    30c6:	44 0f       	add	r20, r20
    30c8:	55 1f       	adc	r21, r21
    30ca:	84 0f       	add	r24, r20
    30cc:	95 1f       	adc	r25, r21
    30ce:	28 0f       	add	r18, r24
    30d0:	39 1f       	adc	r19, r25
    30d2:	80 91 c9 00 	lds	r24, 0x00C9
    30d6:	88 2f       	mov	r24, r24
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	82 0f       	add	r24, r18
    30dc:	93 1f       	adc	r25, r19
    30de:	90 93 67 00 	sts	0x0067, r25
    30e2:	80 93 66 00 	sts	0x0066, r24
					
					
					clear_display();
    30e6:	0e 94 ab 1c 	call	0x3956	; 0x3956 <clear_display>
					first_digit = 0;
    30ea:	10 92 c6 00 	sts	0x00C6, r1
					second_digit = 1;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	80 93 c7 00 	sts	0x00C7, r24
					//_delay_ms(300);
					sendStrXY("month:--",X_OF_INPUT,Y_OF_INPUT + 1);
    30f4:	8e ea       	ldi	r24, 0xAE	; 174
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	63 e0       	ldi	r22, 0x03	; 3
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	44 e0       	ldi	r20, 0x04	; 4
    30fe:	50 e0       	ldi	r21, 0x00	; 0
    3100:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <sendStrXY>
					do
					{
						firstdigitmonth:
						sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT + 7);
    3104:	80 91 c6 00 	lds	r24, 0x00C6
    3108:	80 5d       	subi	r24, 0xD0	; 208
    310a:	63 e0       	ldi	r22, 0x03	; 3
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	4a e0       	ldi	r20, 0x0A	; 10
    3110:	50 e0       	ldi	r21, 0x00	; 0
    3112:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						do{
							button2 = button_read('B',1);
    3116:	82 e4       	ldi	r24, 0x42	; 66
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	61 e0       	ldi	r22, 0x01	; 1
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3122:	90 93 6c 00 	sts	0x006C, r25
    3126:	80 93 6b 00 	sts	0x006B, r24
							button3 = button_read('B',2);
    312a:	82 e4       	ldi	r24, 0x42	; 66
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	62 e0       	ldi	r22, 0x02	; 2
    3130:	70 e0       	ldi	r23, 0x00	; 0
    3132:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3136:	90 93 6e 00 	sts	0x006E, r25
    313a:	80 93 6d 00 	sts	0x006D, r24
							button4 = button_read('B',3);
    313e:	82 e4       	ldi	r24, 0x42	; 66
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	63 e0       	ldi	r22, 0x03	; 3
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    314a:	90 93 70 00 	sts	0x0070, r25
    314e:	80 93 6f 00 	sts	0x006F, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED);
    3152:	80 91 6d 00 	lds	r24, 0x006D
    3156:	90 91 6e 00 	lds	r25, 0x006E
    315a:	81 30       	cpi	r24, 0x01	; 1
    315c:	91 05       	cpc	r25, r1
    315e:	71 f4       	brne	.+28     	; 0x317c <main+0x1ed6>
    3160:	80 91 6f 00 	lds	r24, 0x006F
    3164:	90 91 70 00 	lds	r25, 0x0070
    3168:	81 30       	cpi	r24, 0x01	; 1
    316a:	91 05       	cpc	r25, r1
    316c:	39 f4       	brne	.+14     	; 0x317c <main+0x1ed6>
    316e:	80 91 6b 00 	lds	r24, 0x006B
    3172:	90 91 6c 00 	lds	r25, 0x006C
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	91 05       	cpc	r25, r1
    317a:	69 f2       	breq	.-102    	; 0x3116 <main+0x1e70>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    317c:	00 00       	nop
    317e:	82 e4       	ldi	r24, 0x42	; 66
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	63 e0       	ldi	r22, 0x03	; 3
    3184:	70 e0       	ldi	r23, 0x00	; 0
    3186:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	c1 f3       	breq	.-16     	; 0x317e <main+0x1ed8>
    318e:	82 e4       	ldi	r24, 0x42	; 66
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	62 e0       	ldi	r22, 0x02	; 2
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	81 f3       	breq	.-32     	; 0x317e <main+0x1ed8>
					//	_delay_ms(250);
						if(button3 == PRESSED && first_digit < 1)
    319e:	80 91 6d 00 	lds	r24, 0x006D
    31a2:	90 91 6e 00 	lds	r25, 0x006E
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	51 f4       	brne	.+20     	; 0x31be <main+0x1f18>
    31aa:	80 91 c6 00 	lds	r24, 0x00C6
    31ae:	88 23       	and	r24, r24
    31b0:	31 f4       	brne	.+12     	; 0x31be <main+0x1f18>
						{
							first_digit++;
    31b2:	80 91 c6 00 	lds	r24, 0x00C6
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	80 93 c6 00 	sts	0x00C6, r24
    31bc:	17 c0       	rjmp	.+46     	; 0x31ec <main+0x1f46>
						}
						else if(button4 == PRESSED && ((first_digit > 0 && second_digit > 0) || first_digit > 1))
    31be:	80 91 6f 00 	lds	r24, 0x006F
    31c2:	90 91 70 00 	lds	r25, 0x0070
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	89 f4       	brne	.+34     	; 0x31ec <main+0x1f46>
    31ca:	80 91 c6 00 	lds	r24, 0x00C6
    31ce:	88 23       	and	r24, r24
    31d0:	21 f0       	breq	.+8      	; 0x31da <main+0x1f34>
    31d2:	80 91 c7 00 	lds	r24, 0x00C7
    31d6:	88 23       	and	r24, r24
    31d8:	21 f4       	brne	.+8      	; 0x31e2 <main+0x1f3c>
    31da:	80 91 c6 00 	lds	r24, 0x00C6
    31de:	82 30       	cpi	r24, 0x02	; 2
    31e0:	28 f0       	brcs	.+10     	; 0x31ec <main+0x1f46>
						{
							first_digit--;
    31e2:	80 91 c6 00 	lds	r24, 0x00C6
    31e6:	81 50       	subi	r24, 0x01	; 1
    31e8:	80 93 c6 00 	sts	0x00C6, r24
						}
						
					}while(button2 == NOTPRESSED);
    31ec:	80 91 6b 00 	lds	r24, 0x006B
    31f0:	90 91 6c 00 	lds	r25, 0x006C
    31f4:	81 30       	cpi	r24, 0x01	; 1
    31f6:	91 05       	cpc	r25, r1
    31f8:	09 f4       	brne	.+2      	; 0x31fc <main+0x1f56>
    31fa:	84 cf       	rjmp	.-248    	; 0x3104 <main+0x1e5e>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    31fc:	00 00       	nop
    31fe:	82 e4       	ldi	r24, 0x42	; 66
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	61 e0       	ldi	r22, 0x01	; 1
    3204:	70 e0       	ldi	r23, 0x00	; 0
    3206:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	c1 f3       	breq	.-16     	; 0x31fe <main+0x1f58>
					//_delay_ms(250);
					do{
						
						sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT + 8);
    320e:	80 91 c7 00 	lds	r24, 0x00C7
    3212:	80 5d       	subi	r24, 0xD0	; 208
    3214:	63 e0       	ldi	r22, 0x03	; 3
    3216:	70 e0       	ldi	r23, 0x00	; 0
    3218:	4b e0       	ldi	r20, 0x0B	; 11
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						do{
							button2 = button_read('B',1);
    3220:	82 e4       	ldi	r24, 0x42	; 66
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    322c:	90 93 6c 00 	sts	0x006C, r25
    3230:	80 93 6b 00 	sts	0x006B, r24
							button3 = button_read('B',2);
    3234:	82 e4       	ldi	r24, 0x42	; 66
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	62 e0       	ldi	r22, 0x02	; 2
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3240:	90 93 6e 00 	sts	0x006E, r25
    3244:	80 93 6d 00 	sts	0x006D, r24
							button4 = button_read('B',3);
    3248:	82 e4       	ldi	r24, 0x42	; 66
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	63 e0       	ldi	r22, 0x03	; 3
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3254:	90 93 70 00 	sts	0x0070, r25
    3258:	80 93 6f 00 	sts	0x006F, r24
							button7 = button_read('B',6);
    325c:	82 e4       	ldi	r24, 0x42	; 66
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	66 e0       	ldi	r22, 0x06	; 6
    3262:	70 e0       	ldi	r23, 0x00	; 0
    3264:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3268:	90 93 76 00 	sts	0x0076, r25
    326c:	80 93 75 00 	sts	0x0075, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    3270:	80 91 6d 00 	lds	r24, 0x006D
    3274:	90 91 6e 00 	lds	r25, 0x006E
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	91 05       	cpc	r25, r1
    327c:	b1 f4       	brne	.+44     	; 0x32aa <main+0x2004>
    327e:	80 91 6f 00 	lds	r24, 0x006F
    3282:	90 91 70 00 	lds	r25, 0x0070
    3286:	81 30       	cpi	r24, 0x01	; 1
    3288:	91 05       	cpc	r25, r1
    328a:	79 f4       	brne	.+30     	; 0x32aa <main+0x2004>
    328c:	80 91 6b 00 	lds	r24, 0x006B
    3290:	90 91 6c 00 	lds	r25, 0x006C
    3294:	81 30       	cpi	r24, 0x01	; 1
    3296:	91 05       	cpc	r25, r1
    3298:	41 f4       	brne	.+16     	; 0x32aa <main+0x2004>
    329a:	80 91 75 00 	lds	r24, 0x0075
    329e:	90 91 76 00 	lds	r25, 0x0076
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	91 05       	cpc	r25, r1
    32a6:	09 f4       	brne	.+2      	; 0x32aa <main+0x2004>
    32a8:	bb cf       	rjmp	.-138    	; 0x3220 <main+0x1f7a>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    32aa:	00 00       	nop
    32ac:	82 e4       	ldi	r24, 0x42	; 66
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	63 e0       	ldi	r22, 0x03	; 3
    32b2:	70 e0       	ldi	r23, 0x00	; 0
    32b4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	c1 f3       	breq	.-16     	; 0x32ac <main+0x2006>
    32bc:	82 e4       	ldi	r24, 0x42	; 66
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	62 e0       	ldi	r22, 0x02	; 2
    32c2:	70 e0       	ldi	r23, 0x00	; 0
    32c4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	81 f3       	breq	.-32     	; 0x32ac <main+0x2006>
    32cc:	82 e4       	ldi	r24, 0x42	; 66
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	66 e0       	ldi	r22, 0x06	; 6
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	41 f3       	breq	.-48     	; 0x32ac <main+0x2006>
					//	_delay_ms(250);
						if(button3 == PRESSED && ((second_digit < 9 && first_digit == 0) || (second_digit<2 && first_digit == 1)) )
    32dc:	80 91 6d 00 	lds	r24, 0x006D
    32e0:	90 91 6e 00 	lds	r25, 0x006E
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	b1 f4       	brne	.+44     	; 0x3314 <main+0x206e>
    32e8:	80 91 c7 00 	lds	r24, 0x00C7
    32ec:	89 30       	cpi	r24, 0x09	; 9
    32ee:	20 f4       	brcc	.+8      	; 0x32f8 <main+0x2052>
    32f0:	80 91 c6 00 	lds	r24, 0x00C6
    32f4:	88 23       	and	r24, r24
    32f6:	41 f0       	breq	.+16     	; 0x3308 <main+0x2062>
    32f8:	80 91 c7 00 	lds	r24, 0x00C7
    32fc:	82 30       	cpi	r24, 0x02	; 2
    32fe:	50 f4       	brcc	.+20     	; 0x3314 <main+0x206e>
    3300:	80 91 c6 00 	lds	r24, 0x00C6
    3304:	81 30       	cpi	r24, 0x01	; 1
    3306:	31 f4       	brne	.+12     	; 0x3314 <main+0x206e>
						{
							second_digit++;
    3308:	80 91 c7 00 	lds	r24, 0x00C7
    330c:	8f 5f       	subi	r24, 0xFF	; 255
    330e:	80 93 c7 00 	sts	0x00C7, r24
    3312:	2a c0       	rjmp	.+84     	; 0x3368 <main+0x20c2>
						}
						else if(button4 == PRESSED && ((second_digit > 0 && first_digit == 1) || (second_digit > 1 && first_digit == 0)))
    3314:	80 91 6f 00 	lds	r24, 0x006F
    3318:	90 91 70 00 	lds	r25, 0x0070
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	b1 f4       	brne	.+44     	; 0x334c <main+0x20a6>
    3320:	80 91 c7 00 	lds	r24, 0x00C7
    3324:	88 23       	and	r24, r24
    3326:	21 f0       	breq	.+8      	; 0x3330 <main+0x208a>
    3328:	80 91 c6 00 	lds	r24, 0x00C6
    332c:	81 30       	cpi	r24, 0x01	; 1
    332e:	41 f0       	breq	.+16     	; 0x3340 <main+0x209a>
    3330:	80 91 c7 00 	lds	r24, 0x00C7
    3334:	82 30       	cpi	r24, 0x02	; 2
    3336:	50 f0       	brcs	.+20     	; 0x334c <main+0x20a6>
    3338:	80 91 c6 00 	lds	r24, 0x00C6
    333c:	88 23       	and	r24, r24
    333e:	31 f4       	brne	.+12     	; 0x334c <main+0x20a6>
						{
							second_digit--;
    3340:	80 91 c7 00 	lds	r24, 0x00C7
    3344:	81 50       	subi	r24, 0x01	; 1
    3346:	80 93 c7 00 	sts	0x00C7, r24
    334a:	0e c0       	rjmp	.+28     	; 0x3368 <main+0x20c2>
						}
						else if(button7 == PRESSED)
    334c:	80 91 75 00 	lds	r24, 0x0075
    3350:	90 91 76 00 	lds	r25, 0x0076
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	41 f4       	brne	.+16     	; 0x3368 <main+0x20c2>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 8);
    3358:	8d e2       	ldi	r24, 0x2D	; 45
    335a:	63 e0       	ldi	r22, 0x03	; 3
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	4b e0       	ldi	r20, 0x0B	; 11
    3360:	50 e0       	ldi	r21, 0x00	; 0
    3362:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
							goto firstdigitmonth;
    3366:	ce ce       	rjmp	.-612    	; 0x3104 <main+0x1e5e>
						}
					}while(button2 == NOTPRESSED);
    3368:	80 91 6b 00 	lds	r24, 0x006B
    336c:	90 91 6c 00 	lds	r25, 0x006C
    3370:	81 30       	cpi	r24, 0x01	; 1
    3372:	91 05       	cpc	r25, r1
    3374:	09 f4       	brne	.+2      	; 0x3378 <main+0x20d2>
    3376:	4b cf       	rjmp	.-362    	; 0x320e <main+0x1f68>
					month_counter = (first_digit * 10) + second_digit;
    3378:	80 91 c6 00 	lds	r24, 0x00C6
    337c:	88 0f       	add	r24, r24
    337e:	98 2f       	mov	r25, r24
    3380:	99 0f       	add	r25, r25
    3382:	99 0f       	add	r25, r25
    3384:	98 0f       	add	r25, r24
    3386:	80 91 c7 00 	lds	r24, 0x00C7
    338a:	89 0f       	add	r24, r25
    338c:	80 93 65 00 	sts	0x0065, r24
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    3390:	00 00       	nop
    3392:	82 e4       	ldi	r24, 0x42	; 66
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	61 e0       	ldi	r22, 0x01	; 1
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    339e:	00 97       	sbiw	r24, 0x00	; 0
    33a0:	c1 f3       	breq	.-16     	; 0x3392 <main+0x20ec>
				//	_delay_ms(250);
					clear_display();
    33a2:	0e 94 ab 1c 	call	0x3956	; 0x3956 <clear_display>
					first_digit = 0;
    33a6:	10 92 c6 00 	sts	0x00C6, r1
					second_digit = 1;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	80 93 c7 00 	sts	0x00C7, r24
				//	_delay_ms(300);
					sendStrXY("day:--",X_OF_INPUT,Y_OF_INPUT + 2);
    33b0:	87 eb       	ldi	r24, 0xB7	; 183
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	63 e0       	ldi	r22, 0x03	; 3
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	45 e0       	ldi	r20, 0x05	; 5
    33ba:	50 e0       	ldi	r21, 0x00	; 0
    33bc:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <sendStrXY>
					do{
						firstdigitday:
						sendCharXY(first_digit + 48,X_OF_INPUT,Y_OF_INPUT + 6);
    33c0:	80 91 c6 00 	lds	r24, 0x00C6
    33c4:	80 5d       	subi	r24, 0xD0	; 208
    33c6:	63 e0       	ldi	r22, 0x03	; 3
    33c8:	70 e0       	ldi	r23, 0x00	; 0
    33ca:	49 e0       	ldi	r20, 0x09	; 9
    33cc:	50 e0       	ldi	r21, 0x00	; 0
    33ce:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						do{
							button2 = button_read('B',1);
    33d2:	82 e4       	ldi	r24, 0x42	; 66
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	61 e0       	ldi	r22, 0x01	; 1
    33d8:	70 e0       	ldi	r23, 0x00	; 0
    33da:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    33de:	90 93 6c 00 	sts	0x006C, r25
    33e2:	80 93 6b 00 	sts	0x006B, r24
							button3 = button_read('B',2);
    33e6:	82 e4       	ldi	r24, 0x42	; 66
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	62 e0       	ldi	r22, 0x02	; 2
    33ec:	70 e0       	ldi	r23, 0x00	; 0
    33ee:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    33f2:	90 93 6e 00 	sts	0x006E, r25
    33f6:	80 93 6d 00 	sts	0x006D, r24
							button4 = button_read('B',3);
    33fa:	82 e4       	ldi	r24, 0x42	; 66
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	63 e0       	ldi	r22, 0x03	; 3
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3406:	90 93 70 00 	sts	0x0070, r25
    340a:	80 93 6f 00 	sts	0x006F, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED);
    340e:	80 91 6d 00 	lds	r24, 0x006D
    3412:	90 91 6e 00 	lds	r25, 0x006E
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	91 05       	cpc	r25, r1
    341a:	71 f4       	brne	.+28     	; 0x3438 <main+0x2192>
    341c:	80 91 6f 00 	lds	r24, 0x006F
    3420:	90 91 70 00 	lds	r25, 0x0070
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	91 05       	cpc	r25, r1
    3428:	39 f4       	brne	.+14     	; 0x3438 <main+0x2192>
    342a:	80 91 6b 00 	lds	r24, 0x006B
    342e:	90 91 6c 00 	lds	r25, 0x006C
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	91 05       	cpc	r25, r1
    3436:	69 f2       	breq	.-102    	; 0x33d2 <main+0x212c>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED);
    3438:	00 00       	nop
    343a:	82 e4       	ldi	r24, 0x42	; 66
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	63 e0       	ldi	r22, 0x03	; 3
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	c1 f3       	breq	.-16     	; 0x343a <main+0x2194>
    344a:	82 e4       	ldi	r24, 0x42	; 66
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	62 e0       	ldi	r22, 0x02	; 2
    3450:	70 e0       	ldi	r23, 0x00	; 0
    3452:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	81 f3       	breq	.-32     	; 0x343a <main+0x2194>
					//	_delay_ms(250);
						if(button3 == PRESSED && first_digit < 3)
    345a:	80 91 6d 00 	lds	r24, 0x006D
    345e:	90 91 6e 00 	lds	r25, 0x006E
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	51 f4       	brne	.+20     	; 0x347a <main+0x21d4>
    3466:	80 91 c6 00 	lds	r24, 0x00C6
    346a:	83 30       	cpi	r24, 0x03	; 3
    346c:	30 f4       	brcc	.+12     	; 0x347a <main+0x21d4>
						{
							first_digit++;
    346e:	80 91 c6 00 	lds	r24, 0x00C6
    3472:	8f 5f       	subi	r24, 0xFF	; 255
    3474:	80 93 c6 00 	sts	0x00C6, r24
    3478:	17 c0       	rjmp	.+46     	; 0x34a8 <main+0x2202>
						}
						else if(button4 == PRESSED && ((first_digit > 0 && second_digit == 1) || (first_digit > 1)))
    347a:	80 91 6f 00 	lds	r24, 0x006F
    347e:	90 91 70 00 	lds	r25, 0x0070
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	89 f4       	brne	.+34     	; 0x34a8 <main+0x2202>
    3486:	80 91 c6 00 	lds	r24, 0x00C6
    348a:	88 23       	and	r24, r24
    348c:	21 f0       	breq	.+8      	; 0x3496 <main+0x21f0>
    348e:	80 91 c7 00 	lds	r24, 0x00C7
    3492:	81 30       	cpi	r24, 0x01	; 1
    3494:	21 f0       	breq	.+8      	; 0x349e <main+0x21f8>
    3496:	80 91 c6 00 	lds	r24, 0x00C6
    349a:	82 30       	cpi	r24, 0x02	; 2
    349c:	28 f0       	brcs	.+10     	; 0x34a8 <main+0x2202>
						{
							first_digit--;
    349e:	80 91 c6 00 	lds	r24, 0x00C6
    34a2:	81 50       	subi	r24, 0x01	; 1
    34a4:	80 93 c6 00 	sts	0x00C6, r24
						}
					}while(button2 == NOTPRESSED);
    34a8:	80 91 6b 00 	lds	r24, 0x006B
    34ac:	90 91 6c 00 	lds	r25, 0x006C
    34b0:	81 30       	cpi	r24, 0x01	; 1
    34b2:	91 05       	cpc	r25, r1
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <main+0x2212>
    34b6:	84 cf       	rjmp	.-248    	; 0x33c0 <main+0x211a>
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    34b8:	00 00       	nop
    34ba:	82 e4       	ldi	r24, 0x42	; 66
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	61 e0       	ldi	r22, 0x01	; 1
    34c0:	70 e0       	ldi	r23, 0x00	; 0
    34c2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	c1 f3       	breq	.-16     	; 0x34ba <main+0x2214>
				//	_delay_ms(250);
					do{
						sendCharXY(second_digit + 48,X_OF_INPUT,Y_OF_INPUT + 7);
    34ca:	80 91 c7 00 	lds	r24, 0x00C7
    34ce:	80 5d       	subi	r24, 0xD0	; 208
    34d0:	63 e0       	ldi	r22, 0x03	; 3
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	4a e0       	ldi	r20, 0x0A	; 10
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
						do{
							button2 = button_read('B',1);
    34dc:	82 e4       	ldi	r24, 0x42	; 66
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	61 e0       	ldi	r22, 0x01	; 1
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    34e8:	90 93 6c 00 	sts	0x006C, r25
    34ec:	80 93 6b 00 	sts	0x006B, r24
							button3 = button_read('B',2);
    34f0:	82 e4       	ldi	r24, 0x42	; 66
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	62 e0       	ldi	r22, 0x02	; 2
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    34fc:	90 93 6e 00 	sts	0x006E, r25
    3500:	80 93 6d 00 	sts	0x006D, r24
							button4 = button_read('B',3);
    3504:	82 e4       	ldi	r24, 0x42	; 66
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	63 e0       	ldi	r22, 0x03	; 3
    350a:	70 e0       	ldi	r23, 0x00	; 0
    350c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3510:	90 93 70 00 	sts	0x0070, r25
    3514:	80 93 6f 00 	sts	0x006F, r24
							button7 = button_read('B',6);
    3518:	82 e4       	ldi	r24, 0x42	; 66
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	66 e0       	ldi	r22, 0x06	; 6
    351e:	70 e0       	ldi	r23, 0x00	; 0
    3520:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3524:	90 93 76 00 	sts	0x0076, r25
    3528:	80 93 75 00 	sts	0x0075, r24
						}while(button3 == NOTPRESSED && button4 == NOTPRESSED && button2 == NOTPRESSED && button7 == NOTPRESSED);
    352c:	80 91 6d 00 	lds	r24, 0x006D
    3530:	90 91 6e 00 	lds	r25, 0x006E
    3534:	81 30       	cpi	r24, 0x01	; 1
    3536:	91 05       	cpc	r25, r1
    3538:	b1 f4       	brne	.+44     	; 0x3566 <main+0x22c0>
    353a:	80 91 6f 00 	lds	r24, 0x006F
    353e:	90 91 70 00 	lds	r25, 0x0070
    3542:	81 30       	cpi	r24, 0x01	; 1
    3544:	91 05       	cpc	r25, r1
    3546:	79 f4       	brne	.+30     	; 0x3566 <main+0x22c0>
    3548:	80 91 6b 00 	lds	r24, 0x006B
    354c:	90 91 6c 00 	lds	r25, 0x006C
    3550:	81 30       	cpi	r24, 0x01	; 1
    3552:	91 05       	cpc	r25, r1
    3554:	41 f4       	brne	.+16     	; 0x3566 <main+0x22c0>
    3556:	80 91 75 00 	lds	r24, 0x0075
    355a:	90 91 76 00 	lds	r25, 0x0076
    355e:	81 30       	cpi	r24, 0x01	; 1
    3560:	91 05       	cpc	r25, r1
    3562:	09 f4       	brne	.+2      	; 0x3566 <main+0x22c0>
    3564:	bb cf       	rjmp	.-138    	; 0x34dc <main+0x2236>
						while(button_read('B',3) == PRESSED || button_read('B',2) == PRESSED || button_read('B',6) == PRESSED);
    3566:	00 00       	nop
    3568:	82 e4       	ldi	r24, 0x42	; 66
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	63 e0       	ldi	r22, 0x03	; 3
    356e:	70 e0       	ldi	r23, 0x00	; 0
    3570:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	c1 f3       	breq	.-16     	; 0x3568 <main+0x22c2>
    3578:	82 e4       	ldi	r24, 0x42	; 66
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	62 e0       	ldi	r22, 0x02	; 2
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3584:	00 97       	sbiw	r24, 0x00	; 0
    3586:	81 f3       	breq	.-32     	; 0x3568 <main+0x22c2>
    3588:	82 e4       	ldi	r24, 0x42	; 66
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	66 e0       	ldi	r22, 0x06	; 6
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3594:	00 97       	sbiw	r24, 0x00	; 0
    3596:	41 f3       	breq	.-48     	; 0x3568 <main+0x22c2>
				//		_delay_ms(250);
						if(button3 == PRESSED && ((second_digit < 9 && first_digit < 3) || (second_digit<1 && first_digit == 3)))
    3598:	80 91 6d 00 	lds	r24, 0x006D
    359c:	90 91 6e 00 	lds	r25, 0x006E
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	b1 f4       	brne	.+44     	; 0x35d0 <main+0x232a>
    35a4:	80 91 c7 00 	lds	r24, 0x00C7
    35a8:	89 30       	cpi	r24, 0x09	; 9
    35aa:	20 f4       	brcc	.+8      	; 0x35b4 <main+0x230e>
    35ac:	80 91 c6 00 	lds	r24, 0x00C6
    35b0:	83 30       	cpi	r24, 0x03	; 3
    35b2:	40 f0       	brcs	.+16     	; 0x35c4 <main+0x231e>
    35b4:	80 91 c7 00 	lds	r24, 0x00C7
    35b8:	88 23       	and	r24, r24
    35ba:	51 f4       	brne	.+20     	; 0x35d0 <main+0x232a>
    35bc:	80 91 c6 00 	lds	r24, 0x00C6
    35c0:	83 30       	cpi	r24, 0x03	; 3
    35c2:	31 f4       	brne	.+12     	; 0x35d0 <main+0x232a>
						{
							second_digit++;
    35c4:	80 91 c7 00 	lds	r24, 0x00C7
    35c8:	8f 5f       	subi	r24, 0xFF	; 255
    35ca:	80 93 c7 00 	sts	0x00C7, r24
    35ce:	2a c0       	rjmp	.+84     	; 0x3624 <main+0x237e>
						}
						else if(button4 == PRESSED && ((second_digit > 0 && first_digit > 0) || (second_digit > 1 && first_digit == 0)))
    35d0:	80 91 6f 00 	lds	r24, 0x006F
    35d4:	90 91 70 00 	lds	r25, 0x0070
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	b1 f4       	brne	.+44     	; 0x3608 <main+0x2362>
    35dc:	80 91 c7 00 	lds	r24, 0x00C7
    35e0:	88 23       	and	r24, r24
    35e2:	21 f0       	breq	.+8      	; 0x35ec <main+0x2346>
    35e4:	80 91 c6 00 	lds	r24, 0x00C6
    35e8:	88 23       	and	r24, r24
    35ea:	41 f4       	brne	.+16     	; 0x35fc <main+0x2356>
    35ec:	80 91 c7 00 	lds	r24, 0x00C7
    35f0:	82 30       	cpi	r24, 0x02	; 2
    35f2:	50 f0       	brcs	.+20     	; 0x3608 <main+0x2362>
    35f4:	80 91 c6 00 	lds	r24, 0x00C6
    35f8:	88 23       	and	r24, r24
    35fa:	31 f4       	brne	.+12     	; 0x3608 <main+0x2362>
						{
							second_digit--;
    35fc:	80 91 c7 00 	lds	r24, 0x00C7
    3600:	81 50       	subi	r24, 0x01	; 1
    3602:	80 93 c7 00 	sts	0x00C7, r24
    3606:	0e c0       	rjmp	.+28     	; 0x3624 <main+0x237e>
						}
						else if(button7 == PRESSED)
    3608:	80 91 75 00 	lds	r24, 0x0075
    360c:	90 91 76 00 	lds	r25, 0x0076
    3610:	00 97       	sbiw	r24, 0x00	; 0
    3612:	41 f4       	brne	.+16     	; 0x3624 <main+0x237e>
						{
							sendCharXY('-',X_OF_INPUT,Y_OF_INPUT + 7);
    3614:	8d e2       	ldi	r24, 0x2D	; 45
    3616:	63 e0       	ldi	r22, 0x03	; 3
    3618:	70 e0       	ldi	r23, 0x00	; 0
    361a:	4a e0       	ldi	r20, 0x0A	; 10
    361c:	50 e0       	ldi	r21, 0x00	; 0
    361e:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <sendCharXY>
							goto firstdigitday;
    3622:	ce ce       	rjmp	.-612    	; 0x33c0 <main+0x211a>
						}
					}while(button_read('B',1) == NOTPRESSED);
    3624:	82 e4       	ldi	r24, 0x42	; 66
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	61 e0       	ldi	r22, 0x01	; 1
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    3630:	81 30       	cpi	r24, 0x01	; 1
    3632:	91 05       	cpc	r25, r1
    3634:	09 f4       	brne	.+2      	; 0x3638 <main+0x2392>
    3636:	49 cf       	rjmp	.-366    	; 0x34ca <main+0x2224>
					day_counter = (first_digit * 10) + second_digit;
    3638:	80 91 c6 00 	lds	r24, 0x00C6
    363c:	88 0f       	add	r24, r24
    363e:	98 2f       	mov	r25, r24
    3640:	99 0f       	add	r25, r25
    3642:	99 0f       	add	r25, r25
    3644:	98 0f       	add	r25, r24
    3646:	80 91 c7 00 	lds	r24, 0x00C7
    364a:	89 0f       	add	r24, r25
    364c:	80 93 64 00 	sts	0x0064, r24
					while(button_read('B',1) == PRESSED);   // stay until it your button is not pressed
    3650:	00 00       	nop
    3652:	82 e4       	ldi	r24, 0x42	; 66
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	61 e0       	ldi	r22, 0x01	; 1
    3658:	70 e0       	ldi	r23, 0x00	; 0
    365a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <button_read>
    365e:	00 97       	sbiw	r24, 0x00	; 0
    3660:	c1 f3       	breq	.-16     	; 0x3652 <main+0x23ac>
			//		_delay_ms(250);
					goto tempchange;
    3662:	0c 94 df 09 	jmp	0x13be	; 0x13be <main+0x118>

00003666 <__vector_5>:
				}			 					
return 0;
}									 		

ISR(TIMER2_OVF_vect)
{
    3666:	1f 92       	push	r1
    3668:	0f 92       	push	r0
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	0f 92       	push	r0
    366e:	11 24       	eor	r1, r1
    3670:	8f 93       	push	r24
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
	seconds_counter++;
    367a:	80 91 c3 00 	lds	r24, 0x00C3
    367e:	8f 5f       	subi	r24, 0xFF	; 255
    3680:	80 93 c3 00 	sts	0x00C3, r24
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	8f 91       	pop	r24
    368a:	0f 90       	pop	r0
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	0f 90       	pop	r0
    3690:	1f 90       	pop	r1
    3692:	18 95       	reti

00003694 <ssd1306_command>:
#include "data.h"
#include "ssd1306.h"
uint8_t _i2c_address=0x78;    //display write address

void  ssd1306_command(uint8_t c)
{
    3694:	cf 93       	push	r28
    3696:	df 93       	push	r29
    3698:	00 d0       	rcall	.+0      	; 0x369a <ssd1306_command+0x6>
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t control = 0x00; // some use 0X00 other examples use 0X80. I tried both
    36a0:	19 82       	std	Y+1, r1	; 0x01
	I2C_start();
    36a2:	0e 94 fe 07 	call	0xffc	; 0xffc <I2C_start>
	//I2C_Write();
	I2C_write_address(_i2c_address);
    36a6:	80 91 be 00 	lds	r24, 0x00BE
    36aa:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_write_address>
	I2C_write_data(control); // This is Command
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_write_data(c);
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_stop();
    36ba:	0e 94 92 08 	call	0x1124	; 0x1124 <I2C_stop>
}
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	08 95       	ret

000036c8 <ssd1306_data>:
////////////////////////////////////////////
//
void  ssd1306_data(uint8_t c)
{
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	0f 92       	push	r0
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	89 83       	std	Y+1, r24	; 0x01
	I2C_start();
    36d4:	0e 94 fe 07 	call	0xffc	; 0xffc <I2C_start>
	I2C_write_address(_i2c_address);
    36d8:	80 91 be 00 	lds	r24, 0x00BE
    36dc:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_write_address>
	I2C_write_data(0X40); // This byte is DATA
    36e0:	80 e4       	ldi	r24, 0x40	; 64
    36e2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_write_data(c);
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_stop();
    36ec:	0e 94 92 08 	call	0x1124	; 0x1124 <I2C_stop>
}
    36f0:	0f 90       	pop	r0
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	08 95       	ret

000036f8 <setColAddress>:
///////////////////////////////////////////////////
// Used when doing Horizontal or Vertical Addressing
void setColAddress()
{
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
	ssd1306_command(SSD1306_COLUMNADDR); // 0x21 COMMAND
    3700:	81 e2       	ldi	r24, 0x21	; 33
    3702:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0); // Column start address
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address
    370c:	8f e7       	ldi	r24, 0x7F	; 127
    370e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
}
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	08 95       	ret

00003718 <setPageAddress>:
/////////////////////////////////////////////////////
// Used when doing Horizontal or Vertical Addressing
void setPageAddress()
{
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
	ssd1306_command(SSD1306_PAGEADDR); // 0x22 COMMAND
    3720:	82 e2       	ldi	r24, 0x22	; 34
    3722:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0); // Start Page address
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command((SSD1306_LCDHEIGHT/8)-1);// End Page address
    372c:	87 e0       	ldi	r24, 0x07	; 7
    372e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
}
    3732:	df 91       	pop	r29
    3734:	cf 91       	pop	r28
    3736:	08 95       	ret

00003738 <InitializeDisplay>:
///////////////////////////////////////////////////////////////////
// init according to SSD1306 data sheet and many places on the web
void  InitializeDisplay()
{
    3738:	0f 93       	push	r16
    373a:	1f 93       	push	r17
    373c:	cf 93       	push	r28
    373e:	df 93       	push	r29
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
    3744:	2e 97       	sbiw	r28, 0x0e	; 14
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
	DDRA|=(1<<DDA2)|(1<<DDA4);
    3750:	8a e3       	ldi	r24, 0x3A	; 58
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	2a e3       	ldi	r18, 0x3A	; 58
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	f9 01       	movw	r30, r18
    375a:	20 81       	ld	r18, Z
    375c:	24 61       	ori	r18, 0x14	; 20
    375e:	fc 01       	movw	r30, r24
    3760:	20 83       	st	Z, r18
	PORTA|=(1<<PA2);
    3762:	8b e3       	ldi	r24, 0x3B	; 59
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	2b e3       	ldi	r18, 0x3B	; 59
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	f9 01       	movw	r30, r18
    376c:	20 81       	ld	r18, Z
    376e:	24 60       	ori	r18, 0x04	; 4
    3770:	fc 01       	movw	r30, r24
    3772:	20 83       	st	Z, r18
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	a8 ec       	ldi	r26, 0xC8	; 200
    377a:	b2 e4       	ldi	r27, 0x42	; 66
    377c:	89 83       	std	Y+1, r24	; 0x01
    377e:	9a 83       	std	Y+2, r25	; 0x02
    3780:	ab 83       	std	Y+3, r26	; 0x03
    3782:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3784:	69 81       	ldd	r22, Y+1	; 0x01
    3786:	7a 81       	ldd	r23, Y+2	; 0x02
    3788:	8b 81       	ldd	r24, Y+3	; 0x03
    378a:	9c 81       	ldd	r25, Y+4	; 0x04
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	4a ef       	ldi	r20, 0xFA	; 250
    3792:	54 e4       	ldi	r21, 0x44	; 68
    3794:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	8d 83       	std	Y+5, r24	; 0x05
    379e:	9e 83       	std	Y+6, r25	; 0x06
    37a0:	af 83       	std	Y+7, r26	; 0x07
    37a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    37a4:	11 e0       	ldi	r17, 0x01	; 1
    37a6:	6d 81       	ldd	r22, Y+5	; 0x05
    37a8:	7e 81       	ldd	r23, Y+6	; 0x06
    37aa:	8f 81       	ldd	r24, Y+7	; 0x07
    37ac:	98 85       	ldd	r25, Y+8	; 0x08
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	40 e8       	ldi	r20, 0x80	; 128
    37b4:	5f e3       	ldi	r21, 0x3F	; 63
    37b6:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    37ba:	88 23       	and	r24, r24
    37bc:	0c f0       	brlt	.+2      	; 0x37c0 <InitializeDisplay+0x88>
    37be:	10 e0       	ldi	r17, 0x00	; 0
    37c0:	11 23       	and	r17, r17
    37c2:	29 f0       	breq	.+10     	; 0x37ce <InitializeDisplay+0x96>
		__ticks = 1;
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	9a 87       	std	Y+10, r25	; 0x0a
    37ca:	89 87       	std	Y+9, r24	; 0x09
    37cc:	46 c0       	rjmp	.+140    	; 0x385a <InitializeDisplay+0x122>
	else if (__tmp > 65535)
    37ce:	11 e0       	ldi	r17, 0x01	; 1
    37d0:	6d 81       	ldd	r22, Y+5	; 0x05
    37d2:	7e 81       	ldd	r23, Y+6	; 0x06
    37d4:	8f 81       	ldd	r24, Y+7	; 0x07
    37d6:	98 85       	ldd	r25, Y+8	; 0x08
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	3f ef       	ldi	r19, 0xFF	; 255
    37dc:	4f e7       	ldi	r20, 0x7F	; 127
    37de:	57 e4       	ldi	r21, 0x47	; 71
    37e0:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__gesf2>
    37e4:	18 16       	cp	r1, r24
    37e6:	0c f0       	brlt	.+2      	; 0x37ea <InitializeDisplay+0xb2>
    37e8:	10 e0       	ldi	r17, 0x00	; 0
    37ea:	11 23       	and	r17, r17
    37ec:	61 f1       	breq	.+88     	; 0x3846 <InitializeDisplay+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ee:	69 81       	ldd	r22, Y+1	; 0x01
    37f0:	7a 81       	ldd	r23, Y+2	; 0x02
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	9c 81       	ldd	r25, Y+4	; 0x04
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e2       	ldi	r20, 0x20	; 32
    37fc:	51 e4       	ldi	r21, 0x41	; 65
    37fe:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__mulsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	9a 87       	std	Y+10, r25	; 0x0a
    3814:	89 87       	std	Y+9, r24	; 0x09
    3816:	12 c0       	rjmp	.+36     	; 0x383c <InitializeDisplay+0x104>
    3818:	88 ec       	ldi	r24, 0xC8	; 200
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	9c 87       	std	Y+12, r25	; 0x0c
    381e:	8b 87       	std	Y+11, r24	; 0x0b
    3820:	8b 85       	ldd	r24, Y+11	; 0x0b
    3822:	9c 85       	ldd	r25, Y+12	; 0x0c
    3824:	8c 01       	movw	r16, r24
    3826:	c8 01       	movw	r24, r16
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <InitializeDisplay+0xf0>
    382c:	8c 01       	movw	r16, r24
    382e:	1c 87       	std	Y+12, r17	; 0x0c
    3830:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3832:	89 85       	ldd	r24, Y+9	; 0x09
    3834:	9a 85       	ldd	r25, Y+10	; 0x0a
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	9a 87       	std	Y+10, r25	; 0x0a
    383a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383c:	89 85       	ldd	r24, Y+9	; 0x09
    383e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	51 f7       	brne	.-44     	; 0x3818 <InitializeDisplay+0xe0>
    3844:	17 c0       	rjmp	.+46     	; 0x3874 <InitializeDisplay+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3846:	6d 81       	ldd	r22, Y+5	; 0x05
    3848:	7e 81       	ldd	r23, Y+6	; 0x06
    384a:	8f 81       	ldd	r24, Y+7	; 0x07
    384c:	98 85       	ldd	r25, Y+8	; 0x08
    384e:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	9a 87       	std	Y+10, r25	; 0x0a
    3858:	89 87       	std	Y+9, r24	; 0x09
    385a:	89 85       	ldd	r24, Y+9	; 0x09
    385c:	9a 85       	ldd	r25, Y+10	; 0x0a
    385e:	9e 87       	std	Y+14, r25	; 0x0e
    3860:	8d 87       	std	Y+13, r24	; 0x0d
    3862:	8d 85       	ldd	r24, Y+13	; 0x0d
    3864:	9e 85       	ldd	r25, Y+14	; 0x0e
    3866:	8c 01       	movw	r16, r24
    3868:	f8 01       	movw	r30, r16
    386a:	31 97       	sbiw	r30, 0x01	; 1
    386c:	f1 f7       	brne	.-4      	; 0x386a <InitializeDisplay+0x132>
    386e:	8f 01       	movw	r16, r30
    3870:	1e 87       	std	Y+14, r17	; 0x0e
    3872:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	
	
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
    3874:	8e ea       	ldi	r24, 0xAE	; 174
    3876:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
    387a:	85 ed       	ldi	r24, 0xD5	; 213
    387c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
    3880:	80 e8       	ldi	r24, 0x80	; 128
    3882:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
    3886:	88 ea       	ldi	r24, 0xA8	; 168
    3888:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0x3F);
    388c:	8f e3       	ldi	r24, 0x3F	; 63
    388e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
    3892:	83 ed       	ldi	r24, 0xD3	; 211
    3894:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
    389e:	80 e4       	ldi	r24, 0x40	; 64
    38a0:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
    38a4:	8d e8       	ldi	r24, 0x8D	; 141
    38a6:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0x14);  // using internal VCC
    38aa:	84 e1       	ldi	r24, 0x14	; 20
    38ac:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	//ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
	//ssd1306_command(0x00);          // 0x00 horizontal addressing
	
	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
    38b0:	81 ea       	ldi	r24, 0xA1	; 161
    38b2:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
    38b6:	88 ec       	ldi	r24, 0xC8	; 200
    38b8:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
    38bc:	8a ed       	ldi	r24, 0xDA	; 218
    38be:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0x12);
    38c2:	82 e1       	ldi	r24, 0x12	; 18
    38c4:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
    38c8:	81 e8       	ldi	r24, 0x81	; 129
    38ca:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0xCF);
    38ce:	8f ec       	ldi	r24, 0xCF	; 207
    38d0:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
    38d4:	89 ed       	ldi	r24, 0xD9	; 217
    38d6:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0xF1);
    38da:	81 ef       	ldi	r24, 0xF1	; 241
    38dc:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
    38e0:	8b ed       	ldi	r24, 0xDB	; 219
    38e2:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0x40);
    38e6:	80 e4       	ldi	r24, 0x40	; 64
    38e8:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    38ec:	84 ea       	ldi	r24, 0xA4	; 164
    38ee:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
    38f2:	86 ea       	ldi	r24, 0xA6	; 166
    38f4:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	
	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
    38f8:	8f ea       	ldi	r24, 0xAF	; 175
    38fa:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
}
    38fe:	2e 96       	adiw	r28, 0x0e	; 14
    3900:	0f b6       	in	r0, 0x3f	; 63
    3902:	f8 94       	cli
    3904:	de bf       	out	0x3e, r29	; 62
    3906:	0f be       	out	0x3f, r0	; 63
    3908:	cd bf       	out	0x3d, r28	; 61
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	08 95       	ret

00003914 <reset_display>:
//////////////////////////////
//

void reset_display(void)
{
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
	displayOff();
    391c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <displayOff>
	clear_display();
    3920:	0e 94 ab 1c 	call	0x3956	; 0x3956 <clear_display>
	displayOn();
    3924:	0e 94 97 1c 	call	0x392e	; 0x392e <displayOn>
}
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	08 95       	ret

0000392e <displayOn>:


//==========================================================//
// Turns display on.
void displayOn(void)
{
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
	ssd1306_command(0xaf);        //display on
    3936:	8f ea       	ldi	r24, 0xAF	; 175
    3938:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
}
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	08 95       	ret

00003942 <displayOff>:

//==========================================================//
// Turns display off.
void displayOff(void)
{
    3942:	cf 93       	push	r28
    3944:	df 93       	push	r29
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
	ssd1306_command(0xae);		//display off
    394a:	8e ea       	ldi	r24, 0xAE	; 174
    394c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
}
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	08 95       	ret

00003956 <clear_display>:

//==========================================================//
// Clears the display by sending 0 to all the screen map.
void clear_display(void)
{
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29
    395a:	00 d0       	rcall	.+0      	; 0x395c <clear_display+0x6>
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62
	unsigned char i,k;
	for(k=0;k<8;k++)
    3960:	1a 82       	std	Y+2, r1	; 0x02
    3962:	12 c0       	rjmp	.+36     	; 0x3988 <clear_display+0x32>
	{
		setXY(k,0);
    3964:	8a 81       	ldd	r24, Y+2	; 0x02
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <setXY>
		{
			for(i=0;i<128;i++)     //clear all COL
    396c:	19 82       	std	Y+1, r1	; 0x01
    396e:	06 c0       	rjmp	.+12     	; 0x397c <clear_display+0x26>
			{
				SendChar(0);         //clear all COL
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	0e 94 cc 1c 	call	0x3998	; 0x3998 <SendChar>
	unsigned char i,k;
	for(k=0;k<8;k++)
	{
		setXY(k,0);
		{
			for(i=0;i<128;i++)     //clear all COL
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	8f 5f       	subi	r24, 0xFF	; 255
    397a:	89 83       	std	Y+1, r24	; 0x01
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	88 23       	and	r24, r24
    3980:	bc f7       	brge	.-18     	; 0x3970 <clear_display+0x1a>
//==========================================================//
// Clears the display by sending 0 to all the screen map.
void clear_display(void)
{
	unsigned char i,k;
	for(k=0;k<8;k++)
    3982:	8a 81       	ldd	r24, Y+2	; 0x02
    3984:	8f 5f       	subi	r24, 0xFF	; 255
    3986:	8a 83       	std	Y+2, r24	; 0x02
    3988:	8a 81       	ldd	r24, Y+2	; 0x02
    398a:	88 30       	cpi	r24, 0x08	; 8
    398c:	58 f3       	brcs	.-42     	; 0x3964 <clear_display+0xe>
				SendChar(0);         //clear all COL
				//delay(10);
			}
		}
	}
}
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	08 95       	ret

00003998 <SendChar>:
//==========================================================//
// Actually this sends a byte, not a char to draw in the display.
// Display's chars uses 8 byte font the small ones and 96 bytes
// for the big number font.
void SendChar(unsigned char data)
{
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	0f 92       	push	r0
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
    39a2:	89 83       	std	Y+1, r24	; 0x01
	I2C_start(); // begin transmitting
    39a4:	0e 94 fe 07 	call	0xffc	; 0xffc <I2C_start>
	I2C_write_address(_i2c_address);
    39a8:	80 91 be 00 	lds	r24, 0x00BE
    39ac:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_write_address>
	I2C_write_data(0x40);//data mode
    39b0:	80 e4       	ldi	r24, 0x40	; 64
    39b2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_write_data(data);
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	I2C_stop();    // stop transmitting
    39bc:	0e 94 92 08 	call	0x1124	; 0x1124 <I2C_stop>
}
    39c0:	0f 90       	pop	r0
    39c2:	df 91       	pop	r29
    39c4:	cf 91       	pop	r28
    39c6:	08 95       	ret

000039c8 <sendCharXY>:
//==========================================================//
// Prints a display char (not just a byte) in coordinates X Y,
// being multiples of 8. This means we have 16 COLS (0-15)
// and 8 ROWS (0-7).
void sendCharXY(unsigned char data, int X, int Y)
{
    39c8:	1f 93       	push	r17
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	2a 97       	sbiw	r28, 0x0a	; 10
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	8e 83       	std	Y+6, r24	; 0x06
    39e0:	78 87       	std	Y+8, r23	; 0x08
    39e2:	6f 83       	std	Y+7, r22	; 0x07
    39e4:	5a 87       	std	Y+10, r21	; 0x0a
    39e6:	49 87       	std	Y+9, r20	; 0x09
	setXY(X, Y);
    39e8:	8f 81       	ldd	r24, Y+7	; 0x07
    39ea:	99 85       	ldd	r25, Y+9	; 0x09
    39ec:	69 2f       	mov	r22, r25
    39ee:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <setXY>
	I2C_start(); // begin transmitting
    39f2:	0e 94 fe 07 	call	0xffc	; 0xffc <I2C_start>
	I2C_write_address(_i2c_address);
    39f6:	80 91 be 00 	lds	r24, 0x00BE
    39fa:	0e 94 40 08 	call	0x1080	; 0x1080 <I2C_write_address>
	I2C_write_data(0x40);//data mode
    39fe:	80 e4       	ldi	r24, 0x40	; 64
    3a00:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	
	for(int i=0;i<8;i++)
    3a04:	1a 82       	std	Y+2, r1	; 0x02
    3a06:	19 82       	std	Y+1, r1	; 0x01
    3a08:	20 c0       	rjmp	.+64     	; 0x3a4a <sendCharXY+0x82>
	I2C_write_data(pgm_read_byte(myFont[data-0x20]+i)); /*change to I2C_write_data(pgm_read_byte(myFont[*string-0x20]+i));
    3a0a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a0c:	88 2f       	mov	r24, r24
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	80 97       	sbiw	r24, 0x20	; 32
    3a12:	9c 01       	movw	r18, r24
    3a14:	22 0f       	add	r18, r18
    3a16:	33 1f       	adc	r19, r19
    3a18:	22 0f       	add	r18, r18
    3a1a:	33 1f       	adc	r19, r19
    3a1c:	22 0f       	add	r18, r18
    3a1e:	33 1f       	adc	r19, r19
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	9a 81       	ldd	r25, Y+2	; 0x02
    3a24:	82 0f       	add	r24, r18
    3a26:	93 1f       	adc	r25, r19
    3a28:	8c 5a       	subi	r24, 0xAC	; 172
    3a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2c:	9c 83       	std	Y+4, r25	; 0x04
    3a2e:	8b 83       	std	Y+3, r24	; 0x03
    3a30:	8b 81       	ldd	r24, Y+3	; 0x03
    3a32:	9c 81       	ldd	r25, Y+4	; 0x04
    3a34:	fc 01       	movw	r30, r24
    3a36:	14 91       	lpm	r17, Z
    3a38:	1d 83       	std	Y+5, r17	; 0x05
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <I2C_write_data>
	setXY(X, Y);
	I2C_start(); // begin transmitting
	I2C_write_address(_i2c_address);
	I2C_write_data(0x40);//data mode
	
	for(int i=0;i<8;i++)
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
    3a42:	9a 81       	ldd	r25, Y+2	; 0x02
    3a44:	01 96       	adiw	r24, 0x01	; 1
    3a46:	9a 83       	std	Y+2, r25	; 0x02
    3a48:	89 83       	std	Y+1, r24	; 0x01
    3a4a:	89 81       	ldd	r24, Y+1	; 0x01
    3a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4e:	88 30       	cpi	r24, 0x08	; 8
    3a50:	91 05       	cpc	r25, r1
    3a52:	dc f2       	brlt	.-74     	; 0x3a0a <sendCharXY+0x42>
	I2C_write_data(pgm_read_byte(myFont[data-0x20]+i)); /*change to I2C_write_data(pgm_read_byte(myFont[*string-0x20]+i));
			                                                 if you are using program memory to store my font array*/
	
	I2C_stop();    // stop transmitting
    3a54:	0e 94 92 08 	call	0x1124	; 0x1124 <I2C_stop>
}
    3a58:	2a 96       	adiw	r28, 0x0a	; 10
    3a5a:	0f b6       	in	r0, 0x3f	; 63
    3a5c:	f8 94       	cli
    3a5e:	de bf       	out	0x3e, r29	; 62
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	cd bf       	out	0x3d, r28	; 61
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	1f 91       	pop	r17
    3a6a:	08 95       	ret

00003a6c <setXY>:

//==========================================================//
// Set the cursor position in a 16 COL * 8 ROW map.
void setXY(unsigned char row,unsigned char col)
{
    3a6c:	cf 93       	push	r28
    3a6e:	df 93       	push	r29
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <setXY+0x6>
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	89 83       	std	Y+1, r24	; 0x01
    3a78:	6a 83       	std	Y+2, r22	; 0x02
	ssd1306_command(0xb0+row);                //set page address
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	80 55       	subi	r24, 0x50	; 80
    3a7e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0x00+(8*col&0x0f));       //set low col address
    3a82:	8a 81       	ldd	r24, Y+2	; 0x02
    3a84:	88 0f       	add	r24, r24
    3a86:	88 0f       	add	r24, r24
    3a88:	88 0f       	add	r24, r24
    3a8a:	8f 70       	andi	r24, 0x0F	; 15
    3a8c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
	ssd1306_command(0x10+((8*col>>4)&0x0f));  //set high col address
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	88 2f       	mov	r24, r24
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	88 0f       	add	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	95 95       	asr	r25
    3aa4:	87 95       	ror	r24
    3aa6:	95 95       	asr	r25
    3aa8:	87 95       	ror	r24
    3aaa:	95 95       	asr	r25
    3aac:	87 95       	ror	r24
    3aae:	95 95       	asr	r25
    3ab0:	87 95       	ror	r24
    3ab2:	8f 70       	andi	r24, 0x0F	; 15
    3ab4:	80 5f       	subi	r24, 0xF0	; 240
    3ab6:	0e 94 4a 1b 	call	0x3694	; 0x3694 <ssd1306_command>
}
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	08 95       	ret

00003ac4 <sendStr>:


//==========================================================//
// Prints a string regardless the cursor position.
void sendStr(char *string)
{
    3ac4:	1f 93       	push	r17
    3ac6:	cf 93       	push	r28
    3ac8:	df 93       	push	r29
    3aca:	00 d0       	rcall	.+0      	; 0x3acc <sendStr+0x8>
    3acc:	00 d0       	rcall	.+0      	; 0x3ace <sendStr+0xa>
    3ace:	00 d0       	rcall	.+0      	; 0x3ad0 <sendStr+0xc>
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char i=0;
    3ad8:	19 82       	std	Y+1, r1	; 0x01
	while(*string != NULL)
    3ada:	2c c0       	rjmp	.+88     	; 0x3b34 <sendStr+0x70>
	{
		for(i=0;i<8;i++)
    3adc:	19 82       	std	Y+1, r1	; 0x01
    3ade:	22 c0       	rjmp	.+68     	; 0x3b24 <sendStr+0x60>
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i)); /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
    3ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	80 81       	ld	r24, Z
    3ae8:	88 2f       	mov	r24, r24
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	80 97       	sbiw	r24, 0x20	; 32
    3aee:	9c 01       	movw	r18, r24
    3af0:	22 0f       	add	r18, r18
    3af2:	33 1f       	adc	r19, r19
    3af4:	22 0f       	add	r18, r18
    3af6:	33 1f       	adc	r19, r19
    3af8:	22 0f       	add	r18, r18
    3afa:	33 1f       	adc	r19, r19
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	88 2f       	mov	r24, r24
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	82 0f       	add	r24, r18
    3b04:	93 1f       	adc	r25, r19
    3b06:	8c 5a       	subi	r24, 0xAC	; 172
    3b08:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0a:	9b 83       	std	Y+3, r25	; 0x03
    3b0c:	8a 83       	std	Y+2, r24	; 0x02
    3b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b10:	9b 81       	ldd	r25, Y+3	; 0x03
    3b12:	fc 01       	movw	r30, r24
    3b14:	14 91       	lpm	r17, Z
    3b16:	1c 83       	std	Y+4, r17	; 0x04
    3b18:	8c 81       	ldd	r24, Y+4	; 0x04
    3b1a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <SendChar>
void sendStr(char *string)
{
	unsigned char i=0;
	while(*string != NULL)
	{
		for(i=0;i<8;i++)
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	8f 5f       	subi	r24, 0xFF	; 255
    3b22:	89 83       	std	Y+1, r24	; 0x01
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	88 30       	cpi	r24, 0x08	; 8
    3b28:	d8 f2       	brcs	.-74     	; 0x3ae0 <sendStr+0x1c>
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i)); /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
			                                                 if you are using program memory to store my font array*/
		}
		string++;
    3b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2e:	01 96       	adiw	r24, 0x01	; 1
    3b30:	9e 83       	std	Y+6, r25	; 0x06
    3b32:	8d 83       	std	Y+5, r24	; 0x05
//==========================================================//
// Prints a string regardless the cursor position.
void sendStr(char *string)
{
	unsigned char i=0;
	while(*string != NULL)
    3b34:	8d 81       	ldd	r24, Y+5	; 0x05
    3b36:	9e 81       	ldd	r25, Y+6	; 0x06
    3b38:	fc 01       	movw	r30, r24
    3b3a:	80 81       	ld	r24, Z
    3b3c:	88 2f       	mov	r24, r24
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	00 97       	sbiw	r24, 0x00	; 0
    3b42:	61 f6       	brne	.-104    	; 0x3adc <sendStr+0x18>
			SendChar(pgm_read_byte(myFont[*string-0x20]+i)); /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
			                                                 if you are using program memory to store my font array*/
		}
		string++;
	}
}
    3b44:	26 96       	adiw	r28, 0x06	; 6
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	de bf       	out	0x3e, r29	; 62
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	cd bf       	out	0x3d, r28	; 61
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	1f 91       	pop	r17
    3b56:	08 95       	ret

00003b58 <sendStrXY>:

//==========================================================//
// Prints a string in coordinates X Y, being multiples of 8.
// This means we have 16 COLS (0-15) and 8 ROWS (0-7).
void sendStrXY( char *string, int X, int Y)
{
    3b58:	1f 93       	push	r17
    3b5a:	cf 93       	push	r28
    3b5c:	df 93       	push	r29
    3b5e:	cd b7       	in	r28, 0x3d	; 61
    3b60:	de b7       	in	r29, 0x3e	; 62
    3b62:	2a 97       	sbiw	r28, 0x0a	; 10
    3b64:	0f b6       	in	r0, 0x3f	; 63
    3b66:	f8 94       	cli
    3b68:	de bf       	out	0x3e, r29	; 62
    3b6a:	0f be       	out	0x3f, r0	; 63
    3b6c:	cd bf       	out	0x3d, r28	; 61
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
    3b72:	78 87       	std	Y+8, r23	; 0x08
    3b74:	6f 83       	std	Y+7, r22	; 0x07
    3b76:	5a 87       	std	Y+10, r21	; 0x0a
    3b78:	49 87       	std	Y+9, r20	; 0x09
	setXY(X,Y);
    3b7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b7c:	99 85       	ldd	r25, Y+9	; 0x09
    3b7e:	69 2f       	mov	r22, r25
    3b80:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <setXY>
	unsigned char i=0;
    3b84:	19 82       	std	Y+1, r1	; 0x01
	while(*string)
    3b86:	2c c0       	rjmp	.+88     	; 0x3be0 <sendStrXY+0x88>
	{
		for(i=0;i<8;i++)
    3b88:	19 82       	std	Y+1, r1	; 0x01
    3b8a:	22 c0       	rjmp	.+68     	; 0x3bd0 <sendStrXY+0x78>
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i));          /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
    3b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b90:	fc 01       	movw	r30, r24
    3b92:	80 81       	ld	r24, Z
    3b94:	88 2f       	mov	r24, r24
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	80 97       	sbiw	r24, 0x20	; 32
    3b9a:	9c 01       	movw	r18, r24
    3b9c:	22 0f       	add	r18, r18
    3b9e:	33 1f       	adc	r19, r19
    3ba0:	22 0f       	add	r18, r18
    3ba2:	33 1f       	adc	r19, r19
    3ba4:	22 0f       	add	r18, r18
    3ba6:	33 1f       	adc	r19, r19
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	88 2f       	mov	r24, r24
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	82 0f       	add	r24, r18
    3bb0:	93 1f       	adc	r25, r19
    3bb2:	8c 5a       	subi	r24, 0xAC	; 172
    3bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb6:	9b 83       	std	Y+3, r25	; 0x03
    3bb8:	8a 83       	std	Y+2, r24	; 0x02
    3bba:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	14 91       	lpm	r17, Z
    3bc2:	1c 83       	std	Y+4, r17	; 0x04
    3bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc6:	0e 94 cc 1c 	call	0x3998	; 0x3998 <SendChar>
{
	setXY(X,Y);
	unsigned char i=0;
	while(*string)
	{
		for(i=0;i<8;i++)
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	8f 5f       	subi	r24, 0xFF	; 255
    3bce:	89 83       	std	Y+1, r24	; 0x01
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	88 30       	cpi	r24, 0x08	; 8
    3bd4:	d8 f2       	brcs	.-74     	; 0x3b8c <sendStrXY+0x34>
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i));          /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
			                                                             if you are using program memory to store my font array*/
		}
		string++;
    3bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bda:	01 96       	adiw	r24, 0x01	; 1
    3bdc:	9e 83       	std	Y+6, r25	; 0x06
    3bde:	8d 83       	std	Y+5, r24	; 0x05
// This means we have 16 COLS (0-15) and 8 ROWS (0-7).
void sendStrXY( char *string, int X, int Y)
{
	setXY(X,Y);
	unsigned char i=0;
	while(*string)
    3be0:	8d 81       	ldd	r24, Y+5	; 0x05
    3be2:	9e 81       	ldd	r25, Y+6	; 0x06
    3be4:	fc 01       	movw	r30, r24
    3be6:	80 81       	ld	r24, Z
    3be8:	88 23       	and	r24, r24
    3bea:	71 f6       	brne	.-100    	; 0x3b88 <sendStrXY+0x30>
			SendChar(pgm_read_byte(myFont[*string-0x20]+i));          /*change to SendChar(pgm_read_byte(myFont[*string-0x20]+i));
			                                                             if you are using program memory to store my font array*/
		}
		string++;
	}
    3bec:	2a 96       	adiw	r28, 0x0a	; 10
    3bee:	0f b6       	in	r0, 0x3f	; 63
    3bf0:	f8 94       	cli
    3bf2:	de bf       	out	0x3e, r29	; 62
    3bf4:	0f be       	out	0x3f, r0	; 63
    3bf6:	cd bf       	out	0x3d, r28	; 61
    3bf8:	df 91       	pop	r29
    3bfa:	cf 91       	pop	r28
    3bfc:	1f 91       	pop	r17
    3bfe:	08 95       	ret

00003c00 <timer2_overflow_init_interrupt>:
#include "std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer2_overflow_init_interrupt(void)
{
    3c00:	cf 93       	push	r28
    3c02:	df 93       	push	r29
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
	/* select timer clock */
	SET_BIT(ASSR,AS2);
    3c08:	82 e4       	ldi	r24, 0x42	; 66
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	22 e4       	ldi	r18, 0x42	; 66
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	f9 01       	movw	r30, r18
    3c12:	20 81       	ld	r18, Z
    3c14:	28 60       	ori	r18, 0x08	; 8
    3c16:	fc 01       	movw	r30, r24
    3c18:	20 83       	st	Z, r18
	/* select timer pre scalar */
	SET_BIT(TCCR2,CS20);
    3c1a:	85 e4       	ldi	r24, 0x45	; 69
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	25 e4       	ldi	r18, 0x45	; 69
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	f9 01       	movw	r30, r18
    3c24:	20 81       	ld	r18, Z
    3c26:	21 60       	ori	r18, 0x01	; 1
    3c28:	fc 01       	movw	r30, r24
    3c2a:	20 83       	st	Z, r18
	SET_BIT(TCCR2,CS22);
    3c2c:	85 e4       	ldi	r24, 0x45	; 69
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	25 e4       	ldi	r18, 0x45	; 69
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	f9 01       	movw	r30, r18
    3c36:	20 81       	ld	r18, Z
    3c38:	24 60       	ori	r18, 0x04	; 4
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	20 83       	st	Z, r18
	/* enable interrupt*/
	sei();
    3c3e:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
    3c40:	89 e5       	ldi	r24, 0x59	; 89
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	29 e5       	ldi	r18, 0x59	; 89
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	f9 01       	movw	r30, r18
    3c4a:	20 81       	ld	r18, Z
    3c4c:	20 64       	ori	r18, 0x40	; 64
    3c4e:	fc 01       	movw	r30, r24
    3c50:	20 83       	st	Z, r18
}
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	08 95       	ret

00003c58 <timer_CTC_init_interrupt>:
void timer_CTC_init_interrupt(void)
{
    3c58:	cf 93       	push	r28
    3c5a:	df 93       	push	r29
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    3c60:	83 e5       	ldi	r24, 0x53	; 83
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	23 e5       	ldi	r18, 0x53	; 83
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	f9 01       	movw	r30, r18
    3c6a:	20 81       	ld	r18, Z
    3c6c:	28 60       	ori	r18, 0x08	; 8
    3c6e:	fc 01       	movw	r30, r24
    3c70:	20 83       	st	Z, r18
	/* load a value in OCR0 */
	OCR0=80;
    3c72:	8c e5       	ldi	r24, 0x5C	; 92
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	20 e5       	ldi	r18, 0x50	; 80
    3c78:	fc 01       	movw	r30, r24
    3c7a:	20 83       	st	Z, r18
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
    3c7c:	83 e5       	ldi	r24, 0x53	; 83
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	23 e5       	ldi	r18, 0x53	; 83
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	f9 01       	movw	r30, r18
    3c86:	20 81       	ld	r18, Z
    3c88:	21 60       	ori	r18, 0x01	; 1
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	20 83       	st	Z, r18
	SET_BIT(TCCR0,CS02);
    3c8e:	83 e5       	ldi	r24, 0x53	; 83
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	23 e5       	ldi	r18, 0x53	; 83
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	f9 01       	movw	r30, r18
    3c98:	20 81       	ld	r18, Z
    3c9a:	24 60       	ori	r18, 0x04	; 4
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	20 83       	st	Z, r18
	/* enable interrupt*/
	sei();
    3ca0:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
    3ca2:	89 e5       	ldi	r24, 0x59	; 89
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	29 e5       	ldi	r18, 0x59	; 89
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	f9 01       	movw	r30, r18
    3cac:	20 81       	ld	r18, Z
    3cae:	22 60       	ori	r18, 0x02	; 2
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	20 83       	st	Z, r18
}
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	08 95       	ret

00003cba <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
    3cba:	cf 93       	push	r28
    3cbc:	df 93       	push	r29
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    3cc2:	87 e3       	ldi	r24, 0x37	; 55
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	27 e3       	ldi	r18, 0x37	; 55
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	f9 01       	movw	r30, r18
    3ccc:	20 81       	ld	r18, Z
    3cce:	28 60       	ori	r18, 0x08	; 8
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	20 83       	st	Z, r18
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    3cd4:	83 e5       	ldi	r24, 0x53	; 83
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	23 e5       	ldi	r18, 0x53	; 83
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	f9 01       	movw	r30, r18
    3cde:	20 81       	ld	r18, Z
    3ce0:	28 60       	ori	r18, 0x08	; 8
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	20 83       	st	Z, r18
	/* load a value in OCR0 */
	OCR0=64;
    3ce6:	8c e5       	ldi	r24, 0x5C	; 92
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	20 e4       	ldi	r18, 0x40	; 64
    3cec:	fc 01       	movw	r30, r24
    3cee:	20 83       	st	Z, r18
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    3cf0:	83 e5       	ldi	r24, 0x53	; 83
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	23 e5       	ldi	r18, 0x53	; 83
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	f9 01       	movw	r30, r18
    3cfa:	20 81       	ld	r18, Z
    3cfc:	21 60       	ori	r18, 0x01	; 1
    3cfe:	fc 01       	movw	r30, r24
    3d00:	20 83       	st	Z, r18
	SET_BIT(TCCR0,CS02);
    3d02:	83 e5       	ldi	r24, 0x53	; 83
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	23 e5       	ldi	r18, 0x53	; 83
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	f9 01       	movw	r30, r18
    3d0c:	20 81       	ld	r18, Z
    3d0e:	24 60       	ori	r18, 0x04	; 4
    3d10:	fc 01       	movw	r30, r24
    3d12:	20 83       	st	Z, r18
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
    3d14:	83 e5       	ldi	r24, 0x53	; 83
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	23 e5       	ldi	r18, 0x53	; 83
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	f9 01       	movw	r30, r18
    3d1e:	20 81       	ld	r18, Z
    3d20:	20 61       	ori	r18, 0x10	; 16
    3d22:	fc 01       	movw	r30, r24
    3d24:	20 83       	st	Z, r18
}
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	08 95       	ret

00003d2c <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
    3d2c:	cf 93       	push	r28
    3d2e:	df 93       	push	r29
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    3d34:	87 e3       	ldi	r24, 0x37	; 55
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	27 e3       	ldi	r18, 0x37	; 55
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	f9 01       	movw	r30, r18
    3d3e:	20 81       	ld	r18, Z
    3d40:	28 60       	ori	r18, 0x08	; 8
    3d42:	fc 01       	movw	r30, r24
    3d44:	20 83       	st	Z, r18
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
    3d46:	83 e5       	ldi	r24, 0x53	; 83
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	23 e5       	ldi	r18, 0x53	; 83
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	f9 01       	movw	r30, r18
    3d50:	20 81       	ld	r18, Z
    3d52:	20 64       	ori	r18, 0x40	; 64
    3d54:	fc 01       	movw	r30, r24
    3d56:	20 83       	st	Z, r18
	SET_BIT(TCCR0,WGM01);
    3d58:	83 e5       	ldi	r24, 0x53	; 83
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	23 e5       	ldi	r18, 0x53	; 83
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	f9 01       	movw	r30, r18
    3d62:	20 81       	ld	r18, Z
    3d64:	28 60       	ori	r18, 0x08	; 8
    3d66:	fc 01       	movw	r30, r24
    3d68:	20 83       	st	Z, r18
	/* load a value in OCR0 */
	OCR0=64;
    3d6a:	8c e5       	ldi	r24, 0x5C	; 92
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	20 e4       	ldi	r18, 0x40	; 64
    3d70:	fc 01       	movw	r30, r24
    3d72:	20 83       	st	Z, r18
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    3d74:	83 e5       	ldi	r24, 0x53	; 83
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	23 e5       	ldi	r18, 0x53	; 83
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	f9 01       	movw	r30, r18
    3d7e:	20 81       	ld	r18, Z
    3d80:	21 60       	ori	r18, 0x01	; 1
    3d82:	fc 01       	movw	r30, r24
    3d84:	20 83       	st	Z, r18
	SET_BIT(TCCR0,CS02);
    3d86:	83 e5       	ldi	r24, 0x53	; 83
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	23 e5       	ldi	r18, 0x53	; 83
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	f9 01       	movw	r30, r18
    3d90:	20 81       	ld	r18, Z
    3d92:	24 60       	ori	r18, 0x04	; 4
    3d94:	fc 01       	movw	r30, r24
    3d96:	20 83       	st	Z, r18
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
    3d98:	83 e5       	ldi	r24, 0x53	; 83
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	23 e5       	ldi	r18, 0x53	; 83
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	f9 01       	movw	r30, r18
    3da2:	20 81       	ld	r18, Z
    3da4:	20 61       	ori	r18, 0x10	; 16
    3da6:	fc 01       	movw	r30, r24
    3da8:	20 83       	st	Z, r18
	SET_BIT(TCCR0,COM01);
    3daa:	83 e5       	ldi	r24, 0x53	; 83
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	23 e5       	ldi	r18, 0x53	; 83
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	f9 01       	movw	r30, r18
    3db4:	20 81       	ld	r18, Z
    3db6:	20 62       	ori	r18, 0x20	; 32
    3db8:	fc 01       	movw	r30, r24
    3dba:	20 83       	st	Z, r18
}
    3dbc:	df 91       	pop	r29
    3dbe:	cf 91       	pop	r28
    3dc0:	08 95       	ret

00003dc2 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
    3dc2:	cf 93       	push	r28
    3dc4:	df 93       	push	r29
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    3dca:	87 e3       	ldi	r24, 0x37	; 55
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	27 e3       	ldi	r18, 0x37	; 55
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	f9 01       	movw	r30, r18
    3dd4:	20 81       	ld	r18, Z
    3dd6:	28 60       	ori	r18, 0x08	; 8
    3dd8:	fc 01       	movw	r30, r24
    3dda:	20 83       	st	Z, r18
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
    3ddc:	83 e5       	ldi	r24, 0x53	; 83
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	23 e5       	ldi	r18, 0x53	; 83
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	f9 01       	movw	r30, r18
    3de6:	20 81       	ld	r18, Z
    3de8:	20 64       	ori	r18, 0x40	; 64
    3dea:	fc 01       	movw	r30, r24
    3dec:	20 83       	st	Z, r18
	/* load a value in OCR0 */
	OCR0=64;
    3dee:	8c e5       	ldi	r24, 0x5C	; 92
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	20 e4       	ldi	r18, 0x40	; 64
    3df4:	fc 01       	movw	r30, r24
    3df6:	20 83       	st	Z, r18
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    3df8:	83 e5       	ldi	r24, 0x53	; 83
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	23 e5       	ldi	r18, 0x53	; 83
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	f9 01       	movw	r30, r18
    3e02:	20 81       	ld	r18, Z
    3e04:	21 60       	ori	r18, 0x01	; 1
    3e06:	fc 01       	movw	r30, r24
    3e08:	20 83       	st	Z, r18
	SET_BIT(TCCR0,CS02);
    3e0a:	83 e5       	ldi	r24, 0x53	; 83
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	23 e5       	ldi	r18, 0x53	; 83
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	f9 01       	movw	r30, r18
    3e14:	20 81       	ld	r18, Z
    3e16:	24 60       	ori	r18, 0x04	; 4
    3e18:	fc 01       	movw	r30, r24
    3e1a:	20 83       	st	Z, r18
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
    3e1c:	83 e5       	ldi	r24, 0x53	; 83
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	23 e5       	ldi	r18, 0x53	; 83
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	f9 01       	movw	r30, r18
    3e26:	20 81       	ld	r18, Z
    3e28:	20 61       	ori	r18, 0x10	; 16
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	20 83       	st	Z, r18
	SET_BIT(TCCR0,COM01);
    3e2e:	83 e5       	ldi	r24, 0x53	; 83
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	23 e5       	ldi	r18, 0x53	; 83
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	f9 01       	movw	r30, r18
    3e38:	20 81       	ld	r18, Z
    3e3a:	20 62       	ori	r18, 0x20	; 32
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	20 83       	st	Z, r18
}
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	08 95       	ret

00003e46 <__subsf3>:
    3e46:	50 58       	subi	r21, 0x80	; 128

00003e48 <__addsf3>:
    3e48:	bb 27       	eor	r27, r27
    3e4a:	aa 27       	eor	r26, r26
    3e4c:	0e d0       	rcall	.+28     	; 0x3e6a <__addsf3x>
    3e4e:	08 c1       	rjmp	.+528    	; 0x4060 <__fp_round>
    3e50:	f9 d0       	rcall	.+498    	; 0x4044 <__fp_pscA>
    3e52:	30 f0       	brcs	.+12     	; 0x3e60 <__addsf3+0x18>
    3e54:	fe d0       	rcall	.+508    	; 0x4052 <__fp_pscB>
    3e56:	20 f0       	brcs	.+8      	; 0x3e60 <__addsf3+0x18>
    3e58:	31 f4       	brne	.+12     	; 0x3e66 <__addsf3+0x1e>
    3e5a:	9f 3f       	cpi	r25, 0xFF	; 255
    3e5c:	11 f4       	brne	.+4      	; 0x3e62 <__addsf3+0x1a>
    3e5e:	1e f4       	brtc	.+6      	; 0x3e66 <__addsf3+0x1e>
    3e60:	ee c0       	rjmp	.+476    	; 0x403e <__fp_nan>
    3e62:	0e f4       	brtc	.+2      	; 0x3e66 <__addsf3+0x1e>
    3e64:	e0 95       	com	r30
    3e66:	e7 fb       	bst	r30, 7
    3e68:	e4 c0       	rjmp	.+456    	; 0x4032 <__fp_inf>

00003e6a <__addsf3x>:
    3e6a:	e9 2f       	mov	r30, r25
    3e6c:	0a d1       	rcall	.+532    	; 0x4082 <__fp_split3>
    3e6e:	80 f3       	brcs	.-32     	; 0x3e50 <__addsf3+0x8>
    3e70:	ba 17       	cp	r27, r26
    3e72:	62 07       	cpc	r22, r18
    3e74:	73 07       	cpc	r23, r19
    3e76:	84 07       	cpc	r24, r20
    3e78:	95 07       	cpc	r25, r21
    3e7a:	18 f0       	brcs	.+6      	; 0x3e82 <__addsf3x+0x18>
    3e7c:	71 f4       	brne	.+28     	; 0x3e9a <__addsf3x+0x30>
    3e7e:	9e f5       	brtc	.+102    	; 0x3ee6 <__addsf3x+0x7c>
    3e80:	22 c1       	rjmp	.+580    	; 0x40c6 <__fp_zero>
    3e82:	0e f4       	brtc	.+2      	; 0x3e86 <__addsf3x+0x1c>
    3e84:	e0 95       	com	r30
    3e86:	0b 2e       	mov	r0, r27
    3e88:	ba 2f       	mov	r27, r26
    3e8a:	a0 2d       	mov	r26, r0
    3e8c:	0b 01       	movw	r0, r22
    3e8e:	b9 01       	movw	r22, r18
    3e90:	90 01       	movw	r18, r0
    3e92:	0c 01       	movw	r0, r24
    3e94:	ca 01       	movw	r24, r20
    3e96:	a0 01       	movw	r20, r0
    3e98:	11 24       	eor	r1, r1
    3e9a:	ff 27       	eor	r31, r31
    3e9c:	59 1b       	sub	r21, r25
    3e9e:	99 f0       	breq	.+38     	; 0x3ec6 <__addsf3x+0x5c>
    3ea0:	59 3f       	cpi	r21, 0xF9	; 249
    3ea2:	50 f4       	brcc	.+20     	; 0x3eb8 <__addsf3x+0x4e>
    3ea4:	50 3e       	cpi	r21, 0xE0	; 224
    3ea6:	68 f1       	brcs	.+90     	; 0x3f02 <__addsf3x+0x98>
    3ea8:	1a 16       	cp	r1, r26
    3eaa:	f0 40       	sbci	r31, 0x00	; 0
    3eac:	a2 2f       	mov	r26, r18
    3eae:	23 2f       	mov	r18, r19
    3eb0:	34 2f       	mov	r19, r20
    3eb2:	44 27       	eor	r20, r20
    3eb4:	58 5f       	subi	r21, 0xF8	; 248
    3eb6:	f3 cf       	rjmp	.-26     	; 0x3e9e <__addsf3x+0x34>
    3eb8:	46 95       	lsr	r20
    3eba:	37 95       	ror	r19
    3ebc:	27 95       	ror	r18
    3ebe:	a7 95       	ror	r26
    3ec0:	f0 40       	sbci	r31, 0x00	; 0
    3ec2:	53 95       	inc	r21
    3ec4:	c9 f7       	brne	.-14     	; 0x3eb8 <__addsf3x+0x4e>
    3ec6:	7e f4       	brtc	.+30     	; 0x3ee6 <__addsf3x+0x7c>
    3ec8:	1f 16       	cp	r1, r31
    3eca:	ba 0b       	sbc	r27, r26
    3ecc:	62 0b       	sbc	r22, r18
    3ece:	73 0b       	sbc	r23, r19
    3ed0:	84 0b       	sbc	r24, r20
    3ed2:	ba f0       	brmi	.+46     	; 0x3f02 <__addsf3x+0x98>
    3ed4:	91 50       	subi	r25, 0x01	; 1
    3ed6:	a1 f0       	breq	.+40     	; 0x3f00 <__addsf3x+0x96>
    3ed8:	ff 0f       	add	r31, r31
    3eda:	bb 1f       	adc	r27, r27
    3edc:	66 1f       	adc	r22, r22
    3ede:	77 1f       	adc	r23, r23
    3ee0:	88 1f       	adc	r24, r24
    3ee2:	c2 f7       	brpl	.-16     	; 0x3ed4 <__addsf3x+0x6a>
    3ee4:	0e c0       	rjmp	.+28     	; 0x3f02 <__addsf3x+0x98>
    3ee6:	ba 0f       	add	r27, r26
    3ee8:	62 1f       	adc	r22, r18
    3eea:	73 1f       	adc	r23, r19
    3eec:	84 1f       	adc	r24, r20
    3eee:	48 f4       	brcc	.+18     	; 0x3f02 <__addsf3x+0x98>
    3ef0:	87 95       	ror	r24
    3ef2:	77 95       	ror	r23
    3ef4:	67 95       	ror	r22
    3ef6:	b7 95       	ror	r27
    3ef8:	f7 95       	ror	r31
    3efa:	9e 3f       	cpi	r25, 0xFE	; 254
    3efc:	08 f0       	brcs	.+2      	; 0x3f00 <__addsf3x+0x96>
    3efe:	b3 cf       	rjmp	.-154    	; 0x3e66 <__addsf3+0x1e>
    3f00:	93 95       	inc	r25
    3f02:	88 0f       	add	r24, r24
    3f04:	08 f0       	brcs	.+2      	; 0x3f08 <__addsf3x+0x9e>
    3f06:	99 27       	eor	r25, r25
    3f08:	ee 0f       	add	r30, r30
    3f0a:	97 95       	ror	r25
    3f0c:	87 95       	ror	r24
    3f0e:	08 95       	ret

00003f10 <__cmpsf2>:
    3f10:	6c d0       	rcall	.+216    	; 0x3fea <__fp_cmp>
    3f12:	08 f4       	brcc	.+2      	; 0x3f16 <__cmpsf2+0x6>
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	08 95       	ret

00003f18 <__fixunssfsi>:
    3f18:	bc d0       	rcall	.+376    	; 0x4092 <__fp_splitA>
    3f1a:	88 f0       	brcs	.+34     	; 0x3f3e <__fixunssfsi+0x26>
    3f1c:	9f 57       	subi	r25, 0x7F	; 127
    3f1e:	90 f0       	brcs	.+36     	; 0x3f44 <__fixunssfsi+0x2c>
    3f20:	b9 2f       	mov	r27, r25
    3f22:	99 27       	eor	r25, r25
    3f24:	b7 51       	subi	r27, 0x17	; 23
    3f26:	a0 f0       	brcs	.+40     	; 0x3f50 <__fixunssfsi+0x38>
    3f28:	d1 f0       	breq	.+52     	; 0x3f5e <__fixunssfsi+0x46>
    3f2a:	66 0f       	add	r22, r22
    3f2c:	77 1f       	adc	r23, r23
    3f2e:	88 1f       	adc	r24, r24
    3f30:	99 1f       	adc	r25, r25
    3f32:	1a f0       	brmi	.+6      	; 0x3f3a <__fixunssfsi+0x22>
    3f34:	ba 95       	dec	r27
    3f36:	c9 f7       	brne	.-14     	; 0x3f2a <__fixunssfsi+0x12>
    3f38:	12 c0       	rjmp	.+36     	; 0x3f5e <__fixunssfsi+0x46>
    3f3a:	b1 30       	cpi	r27, 0x01	; 1
    3f3c:	81 f0       	breq	.+32     	; 0x3f5e <__fixunssfsi+0x46>
    3f3e:	c3 d0       	rcall	.+390    	; 0x40c6 <__fp_zero>
    3f40:	b1 e0       	ldi	r27, 0x01	; 1
    3f42:	08 95       	ret
    3f44:	c0 c0       	rjmp	.+384    	; 0x40c6 <__fp_zero>
    3f46:	67 2f       	mov	r22, r23
    3f48:	78 2f       	mov	r23, r24
    3f4a:	88 27       	eor	r24, r24
    3f4c:	b8 5f       	subi	r27, 0xF8	; 248
    3f4e:	39 f0       	breq	.+14     	; 0x3f5e <__fixunssfsi+0x46>
    3f50:	b9 3f       	cpi	r27, 0xF9	; 249
    3f52:	cc f3       	brlt	.-14     	; 0x3f46 <__fixunssfsi+0x2e>
    3f54:	86 95       	lsr	r24
    3f56:	77 95       	ror	r23
    3f58:	67 95       	ror	r22
    3f5a:	b3 95       	inc	r27
    3f5c:	d9 f7       	brne	.-10     	; 0x3f54 <__fixunssfsi+0x3c>
    3f5e:	3e f4       	brtc	.+14     	; 0x3f6e <__fixunssfsi+0x56>
    3f60:	90 95       	com	r25
    3f62:	80 95       	com	r24
    3f64:	70 95       	com	r23
    3f66:	61 95       	neg	r22
    3f68:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6e:	08 95       	ret

00003f70 <__floatunsisf>:
    3f70:	e8 94       	clt
    3f72:	09 c0       	rjmp	.+18     	; 0x3f86 <__floatsisf+0x12>

00003f74 <__floatsisf>:
    3f74:	97 fb       	bst	r25, 7
    3f76:	3e f4       	brtc	.+14     	; 0x3f86 <__floatsisf+0x12>
    3f78:	90 95       	com	r25
    3f7a:	80 95       	com	r24
    3f7c:	70 95       	com	r23
    3f7e:	61 95       	neg	r22
    3f80:	7f 4f       	sbci	r23, 0xFF	; 255
    3f82:	8f 4f       	sbci	r24, 0xFF	; 255
    3f84:	9f 4f       	sbci	r25, 0xFF	; 255
    3f86:	99 23       	and	r25, r25
    3f88:	a9 f0       	breq	.+42     	; 0x3fb4 <__floatsisf+0x40>
    3f8a:	f9 2f       	mov	r31, r25
    3f8c:	96 e9       	ldi	r25, 0x96	; 150
    3f8e:	bb 27       	eor	r27, r27
    3f90:	93 95       	inc	r25
    3f92:	f6 95       	lsr	r31
    3f94:	87 95       	ror	r24
    3f96:	77 95       	ror	r23
    3f98:	67 95       	ror	r22
    3f9a:	b7 95       	ror	r27
    3f9c:	f1 11       	cpse	r31, r1
    3f9e:	f8 cf       	rjmp	.-16     	; 0x3f90 <__floatsisf+0x1c>
    3fa0:	fa f4       	brpl	.+62     	; 0x3fe0 <__floatsisf+0x6c>
    3fa2:	bb 0f       	add	r27, r27
    3fa4:	11 f4       	brne	.+4      	; 0x3faa <__floatsisf+0x36>
    3fa6:	60 ff       	sbrs	r22, 0
    3fa8:	1b c0       	rjmp	.+54     	; 0x3fe0 <__floatsisf+0x6c>
    3faa:	6f 5f       	subi	r22, 0xFF	; 255
    3fac:	7f 4f       	sbci	r23, 0xFF	; 255
    3fae:	8f 4f       	sbci	r24, 0xFF	; 255
    3fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb2:	16 c0       	rjmp	.+44     	; 0x3fe0 <__floatsisf+0x6c>
    3fb4:	88 23       	and	r24, r24
    3fb6:	11 f0       	breq	.+4      	; 0x3fbc <__floatsisf+0x48>
    3fb8:	96 e9       	ldi	r25, 0x96	; 150
    3fba:	11 c0       	rjmp	.+34     	; 0x3fde <__floatsisf+0x6a>
    3fbc:	77 23       	and	r23, r23
    3fbe:	21 f0       	breq	.+8      	; 0x3fc8 <__floatsisf+0x54>
    3fc0:	9e e8       	ldi	r25, 0x8E	; 142
    3fc2:	87 2f       	mov	r24, r23
    3fc4:	76 2f       	mov	r23, r22
    3fc6:	05 c0       	rjmp	.+10     	; 0x3fd2 <__floatsisf+0x5e>
    3fc8:	66 23       	and	r22, r22
    3fca:	71 f0       	breq	.+28     	; 0x3fe8 <__floatsisf+0x74>
    3fcc:	96 e8       	ldi	r25, 0x86	; 134
    3fce:	86 2f       	mov	r24, r22
    3fd0:	70 e0       	ldi	r23, 0x00	; 0
    3fd2:	60 e0       	ldi	r22, 0x00	; 0
    3fd4:	2a f0       	brmi	.+10     	; 0x3fe0 <__floatsisf+0x6c>
    3fd6:	9a 95       	dec	r25
    3fd8:	66 0f       	add	r22, r22
    3fda:	77 1f       	adc	r23, r23
    3fdc:	88 1f       	adc	r24, r24
    3fde:	da f7       	brpl	.-10     	; 0x3fd6 <__floatsisf+0x62>
    3fe0:	88 0f       	add	r24, r24
    3fe2:	96 95       	lsr	r25
    3fe4:	87 95       	ror	r24
    3fe6:	97 f9       	bld	r25, 7
    3fe8:	08 95       	ret

00003fea <__fp_cmp>:
    3fea:	99 0f       	add	r25, r25
    3fec:	00 08       	sbc	r0, r0
    3fee:	55 0f       	add	r21, r21
    3ff0:	aa 0b       	sbc	r26, r26
    3ff2:	e0 e8       	ldi	r30, 0x80	; 128
    3ff4:	fe ef       	ldi	r31, 0xFE	; 254
    3ff6:	16 16       	cp	r1, r22
    3ff8:	17 06       	cpc	r1, r23
    3ffa:	e8 07       	cpc	r30, r24
    3ffc:	f9 07       	cpc	r31, r25
    3ffe:	c0 f0       	brcs	.+48     	; 0x4030 <__fp_cmp+0x46>
    4000:	12 16       	cp	r1, r18
    4002:	13 06       	cpc	r1, r19
    4004:	e4 07       	cpc	r30, r20
    4006:	f5 07       	cpc	r31, r21
    4008:	98 f0       	brcs	.+38     	; 0x4030 <__fp_cmp+0x46>
    400a:	62 1b       	sub	r22, r18
    400c:	73 0b       	sbc	r23, r19
    400e:	84 0b       	sbc	r24, r20
    4010:	95 0b       	sbc	r25, r21
    4012:	39 f4       	brne	.+14     	; 0x4022 <__fp_cmp+0x38>
    4014:	0a 26       	eor	r0, r26
    4016:	61 f0       	breq	.+24     	; 0x4030 <__fp_cmp+0x46>
    4018:	23 2b       	or	r18, r19
    401a:	24 2b       	or	r18, r20
    401c:	25 2b       	or	r18, r21
    401e:	21 f4       	brne	.+8      	; 0x4028 <__fp_cmp+0x3e>
    4020:	08 95       	ret
    4022:	0a 26       	eor	r0, r26
    4024:	09 f4       	brne	.+2      	; 0x4028 <__fp_cmp+0x3e>
    4026:	a1 40       	sbci	r26, 0x01	; 1
    4028:	a6 95       	lsr	r26
    402a:	8f ef       	ldi	r24, 0xFF	; 255
    402c:	81 1d       	adc	r24, r1
    402e:	81 1d       	adc	r24, r1
    4030:	08 95       	ret

00004032 <__fp_inf>:
    4032:	97 f9       	bld	r25, 7
    4034:	9f 67       	ori	r25, 0x7F	; 127
    4036:	80 e8       	ldi	r24, 0x80	; 128
    4038:	70 e0       	ldi	r23, 0x00	; 0
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	08 95       	ret

0000403e <__fp_nan>:
    403e:	9f ef       	ldi	r25, 0xFF	; 255
    4040:	80 ec       	ldi	r24, 0xC0	; 192
    4042:	08 95       	ret

00004044 <__fp_pscA>:
    4044:	00 24       	eor	r0, r0
    4046:	0a 94       	dec	r0
    4048:	16 16       	cp	r1, r22
    404a:	17 06       	cpc	r1, r23
    404c:	18 06       	cpc	r1, r24
    404e:	09 06       	cpc	r0, r25
    4050:	08 95       	ret

00004052 <__fp_pscB>:
    4052:	00 24       	eor	r0, r0
    4054:	0a 94       	dec	r0
    4056:	12 16       	cp	r1, r18
    4058:	13 06       	cpc	r1, r19
    405a:	14 06       	cpc	r1, r20
    405c:	05 06       	cpc	r0, r21
    405e:	08 95       	ret

00004060 <__fp_round>:
    4060:	09 2e       	mov	r0, r25
    4062:	03 94       	inc	r0
    4064:	00 0c       	add	r0, r0
    4066:	11 f4       	brne	.+4      	; 0x406c <__fp_round+0xc>
    4068:	88 23       	and	r24, r24
    406a:	52 f0       	brmi	.+20     	; 0x4080 <__fp_round+0x20>
    406c:	bb 0f       	add	r27, r27
    406e:	40 f4       	brcc	.+16     	; 0x4080 <__fp_round+0x20>
    4070:	bf 2b       	or	r27, r31
    4072:	11 f4       	brne	.+4      	; 0x4078 <__fp_round+0x18>
    4074:	60 ff       	sbrs	r22, 0
    4076:	04 c0       	rjmp	.+8      	; 0x4080 <__fp_round+0x20>
    4078:	6f 5f       	subi	r22, 0xFF	; 255
    407a:	7f 4f       	sbci	r23, 0xFF	; 255
    407c:	8f 4f       	sbci	r24, 0xFF	; 255
    407e:	9f 4f       	sbci	r25, 0xFF	; 255
    4080:	08 95       	ret

00004082 <__fp_split3>:
    4082:	57 fd       	sbrc	r21, 7
    4084:	90 58       	subi	r25, 0x80	; 128
    4086:	44 0f       	add	r20, r20
    4088:	55 1f       	adc	r21, r21
    408a:	59 f0       	breq	.+22     	; 0x40a2 <__fp_splitA+0x10>
    408c:	5f 3f       	cpi	r21, 0xFF	; 255
    408e:	71 f0       	breq	.+28     	; 0x40ac <__fp_splitA+0x1a>
    4090:	47 95       	ror	r20

00004092 <__fp_splitA>:
    4092:	88 0f       	add	r24, r24
    4094:	97 fb       	bst	r25, 7
    4096:	99 1f       	adc	r25, r25
    4098:	61 f0       	breq	.+24     	; 0x40b2 <__fp_splitA+0x20>
    409a:	9f 3f       	cpi	r25, 0xFF	; 255
    409c:	79 f0       	breq	.+30     	; 0x40bc <__fp_splitA+0x2a>
    409e:	87 95       	ror	r24
    40a0:	08 95       	ret
    40a2:	12 16       	cp	r1, r18
    40a4:	13 06       	cpc	r1, r19
    40a6:	14 06       	cpc	r1, r20
    40a8:	55 1f       	adc	r21, r21
    40aa:	f2 cf       	rjmp	.-28     	; 0x4090 <__fp_split3+0xe>
    40ac:	46 95       	lsr	r20
    40ae:	f1 df       	rcall	.-30     	; 0x4092 <__fp_splitA>
    40b0:	08 c0       	rjmp	.+16     	; 0x40c2 <__fp_splitA+0x30>
    40b2:	16 16       	cp	r1, r22
    40b4:	17 06       	cpc	r1, r23
    40b6:	18 06       	cpc	r1, r24
    40b8:	99 1f       	adc	r25, r25
    40ba:	f1 cf       	rjmp	.-30     	; 0x409e <__fp_splitA+0xc>
    40bc:	86 95       	lsr	r24
    40be:	71 05       	cpc	r23, r1
    40c0:	61 05       	cpc	r22, r1
    40c2:	08 94       	sec
    40c4:	08 95       	ret

000040c6 <__fp_zero>:
    40c6:	e8 94       	clt

000040c8 <__fp_szero>:
    40c8:	bb 27       	eor	r27, r27
    40ca:	66 27       	eor	r22, r22
    40cc:	77 27       	eor	r23, r23
    40ce:	cb 01       	movw	r24, r22
    40d0:	97 f9       	bld	r25, 7
    40d2:	08 95       	ret

000040d4 <__gesf2>:
    40d4:	8a df       	rcall	.-236    	; 0x3fea <__fp_cmp>
    40d6:	08 f4       	brcc	.+2      	; 0x40da <__gesf2+0x6>
    40d8:	8f ef       	ldi	r24, 0xFF	; 255
    40da:	08 95       	ret

000040dc <__mulsf3>:
    40dc:	0b d0       	rcall	.+22     	; 0x40f4 <__mulsf3x>
    40de:	c0 cf       	rjmp	.-128    	; 0x4060 <__fp_round>
    40e0:	b1 df       	rcall	.-158    	; 0x4044 <__fp_pscA>
    40e2:	28 f0       	brcs	.+10     	; 0x40ee <__mulsf3+0x12>
    40e4:	b6 df       	rcall	.-148    	; 0x4052 <__fp_pscB>
    40e6:	18 f0       	brcs	.+6      	; 0x40ee <__mulsf3+0x12>
    40e8:	95 23       	and	r25, r21
    40ea:	09 f0       	breq	.+2      	; 0x40ee <__mulsf3+0x12>
    40ec:	a2 cf       	rjmp	.-188    	; 0x4032 <__fp_inf>
    40ee:	a7 cf       	rjmp	.-178    	; 0x403e <__fp_nan>
    40f0:	11 24       	eor	r1, r1
    40f2:	ea cf       	rjmp	.-44     	; 0x40c8 <__fp_szero>

000040f4 <__mulsf3x>:
    40f4:	c6 df       	rcall	.-116    	; 0x4082 <__fp_split3>
    40f6:	a0 f3       	brcs	.-24     	; 0x40e0 <__mulsf3+0x4>

000040f8 <__mulsf3_pse>:
    40f8:	95 9f       	mul	r25, r21
    40fa:	d1 f3       	breq	.-12     	; 0x40f0 <__mulsf3+0x14>
    40fc:	95 0f       	add	r25, r21
    40fe:	50 e0       	ldi	r21, 0x00	; 0
    4100:	55 1f       	adc	r21, r21
    4102:	62 9f       	mul	r22, r18
    4104:	f0 01       	movw	r30, r0
    4106:	72 9f       	mul	r23, r18
    4108:	bb 27       	eor	r27, r27
    410a:	f0 0d       	add	r31, r0
    410c:	b1 1d       	adc	r27, r1
    410e:	63 9f       	mul	r22, r19
    4110:	aa 27       	eor	r26, r26
    4112:	f0 0d       	add	r31, r0
    4114:	b1 1d       	adc	r27, r1
    4116:	aa 1f       	adc	r26, r26
    4118:	64 9f       	mul	r22, r20
    411a:	66 27       	eor	r22, r22
    411c:	b0 0d       	add	r27, r0
    411e:	a1 1d       	adc	r26, r1
    4120:	66 1f       	adc	r22, r22
    4122:	82 9f       	mul	r24, r18
    4124:	22 27       	eor	r18, r18
    4126:	b0 0d       	add	r27, r0
    4128:	a1 1d       	adc	r26, r1
    412a:	62 1f       	adc	r22, r18
    412c:	73 9f       	mul	r23, r19
    412e:	b0 0d       	add	r27, r0
    4130:	a1 1d       	adc	r26, r1
    4132:	62 1f       	adc	r22, r18
    4134:	83 9f       	mul	r24, r19
    4136:	a0 0d       	add	r26, r0
    4138:	61 1d       	adc	r22, r1
    413a:	22 1f       	adc	r18, r18
    413c:	74 9f       	mul	r23, r20
    413e:	33 27       	eor	r19, r19
    4140:	a0 0d       	add	r26, r0
    4142:	61 1d       	adc	r22, r1
    4144:	23 1f       	adc	r18, r19
    4146:	84 9f       	mul	r24, r20
    4148:	60 0d       	add	r22, r0
    414a:	21 1d       	adc	r18, r1
    414c:	82 2f       	mov	r24, r18
    414e:	76 2f       	mov	r23, r22
    4150:	6a 2f       	mov	r22, r26
    4152:	11 24       	eor	r1, r1
    4154:	9f 57       	subi	r25, 0x7F	; 127
    4156:	50 40       	sbci	r21, 0x00	; 0
    4158:	8a f0       	brmi	.+34     	; 0x417c <__mulsf3_pse+0x84>
    415a:	e1 f0       	breq	.+56     	; 0x4194 <__mulsf3_pse+0x9c>
    415c:	88 23       	and	r24, r24
    415e:	4a f0       	brmi	.+18     	; 0x4172 <__mulsf3_pse+0x7a>
    4160:	ee 0f       	add	r30, r30
    4162:	ff 1f       	adc	r31, r31
    4164:	bb 1f       	adc	r27, r27
    4166:	66 1f       	adc	r22, r22
    4168:	77 1f       	adc	r23, r23
    416a:	88 1f       	adc	r24, r24
    416c:	91 50       	subi	r25, 0x01	; 1
    416e:	50 40       	sbci	r21, 0x00	; 0
    4170:	a9 f7       	brne	.-22     	; 0x415c <__mulsf3_pse+0x64>
    4172:	9e 3f       	cpi	r25, 0xFE	; 254
    4174:	51 05       	cpc	r21, r1
    4176:	70 f0       	brcs	.+28     	; 0x4194 <__mulsf3_pse+0x9c>
    4178:	5c cf       	rjmp	.-328    	; 0x4032 <__fp_inf>
    417a:	a6 cf       	rjmp	.-180    	; 0x40c8 <__fp_szero>
    417c:	5f 3f       	cpi	r21, 0xFF	; 255
    417e:	ec f3       	brlt	.-6      	; 0x417a <__mulsf3_pse+0x82>
    4180:	98 3e       	cpi	r25, 0xE8	; 232
    4182:	dc f3       	brlt	.-10     	; 0x417a <__mulsf3_pse+0x82>
    4184:	86 95       	lsr	r24
    4186:	77 95       	ror	r23
    4188:	67 95       	ror	r22
    418a:	b7 95       	ror	r27
    418c:	f7 95       	ror	r31
    418e:	e7 95       	ror	r30
    4190:	9f 5f       	subi	r25, 0xFF	; 255
    4192:	c1 f7       	brne	.-16     	; 0x4184 <__mulsf3_pse+0x8c>
    4194:	fe 2b       	or	r31, r30
    4196:	88 0f       	add	r24, r24
    4198:	91 1d       	adc	r25, r1
    419a:	96 95       	lsr	r25
    419c:	87 95       	ror	r24
    419e:	97 f9       	bld	r25, 7
    41a0:	08 95       	ret

000041a2 <__udivmodqi4>:
    41a2:	99 1b       	sub	r25, r25
    41a4:	79 e0       	ldi	r23, 0x09	; 9
    41a6:	04 c0       	rjmp	.+8      	; 0x41b0 <__udivmodqi4_ep>

000041a8 <__udivmodqi4_loop>:
    41a8:	99 1f       	adc	r25, r25
    41aa:	96 17       	cp	r25, r22
    41ac:	08 f0       	brcs	.+2      	; 0x41b0 <__udivmodqi4_ep>
    41ae:	96 1b       	sub	r25, r22

000041b0 <__udivmodqi4_ep>:
    41b0:	88 1f       	adc	r24, r24
    41b2:	7a 95       	dec	r23
    41b4:	c9 f7       	brne	.-14     	; 0x41a8 <__udivmodqi4_loop>
    41b6:	80 95       	com	r24
    41b8:	08 95       	ret

000041ba <__udivmodhi4>:
    41ba:	aa 1b       	sub	r26, r26
    41bc:	bb 1b       	sub	r27, r27
    41be:	51 e1       	ldi	r21, 0x11	; 17
    41c0:	07 c0       	rjmp	.+14     	; 0x41d0 <__udivmodhi4_ep>

000041c2 <__udivmodhi4_loop>:
    41c2:	aa 1f       	adc	r26, r26
    41c4:	bb 1f       	adc	r27, r27
    41c6:	a6 17       	cp	r26, r22
    41c8:	b7 07       	cpc	r27, r23
    41ca:	10 f0       	brcs	.+4      	; 0x41d0 <__udivmodhi4_ep>
    41cc:	a6 1b       	sub	r26, r22
    41ce:	b7 0b       	sbc	r27, r23

000041d0 <__udivmodhi4_ep>:
    41d0:	88 1f       	adc	r24, r24
    41d2:	99 1f       	adc	r25, r25
    41d4:	5a 95       	dec	r21
    41d6:	a9 f7       	brne	.-22     	; 0x41c2 <__udivmodhi4_loop>
    41d8:	80 95       	com	r24
    41da:	90 95       	com	r25
    41dc:	bc 01       	movw	r22, r24
    41de:	cd 01       	movw	r24, r26
    41e0:	08 95       	ret

000041e2 <__udivmodsi4>:
    41e2:	a1 e2       	ldi	r26, 0x21	; 33
    41e4:	1a 2e       	mov	r1, r26
    41e6:	aa 1b       	sub	r26, r26
    41e8:	bb 1b       	sub	r27, r27
    41ea:	fd 01       	movw	r30, r26
    41ec:	0d c0       	rjmp	.+26     	; 0x4208 <__udivmodsi4_ep>

000041ee <__udivmodsi4_loop>:
    41ee:	aa 1f       	adc	r26, r26
    41f0:	bb 1f       	adc	r27, r27
    41f2:	ee 1f       	adc	r30, r30
    41f4:	ff 1f       	adc	r31, r31
    41f6:	a2 17       	cp	r26, r18
    41f8:	b3 07       	cpc	r27, r19
    41fa:	e4 07       	cpc	r30, r20
    41fc:	f5 07       	cpc	r31, r21
    41fe:	20 f0       	brcs	.+8      	; 0x4208 <__udivmodsi4_ep>
    4200:	a2 1b       	sub	r26, r18
    4202:	b3 0b       	sbc	r27, r19
    4204:	e4 0b       	sbc	r30, r20
    4206:	f5 0b       	sbc	r31, r21

00004208 <__udivmodsi4_ep>:
    4208:	66 1f       	adc	r22, r22
    420a:	77 1f       	adc	r23, r23
    420c:	88 1f       	adc	r24, r24
    420e:	99 1f       	adc	r25, r25
    4210:	1a 94       	dec	r1
    4212:	69 f7       	brne	.-38     	; 0x41ee <__udivmodsi4_loop>
    4214:	60 95       	com	r22
    4216:	70 95       	com	r23
    4218:	80 95       	com	r24
    421a:	90 95       	com	r25
    421c:	9b 01       	movw	r18, r22
    421e:	ac 01       	movw	r20, r24
    4220:	bd 01       	movw	r22, r26
    4222:	cf 01       	movw	r24, r30
    4224:	08 95       	ret

00004226 <_exit>:
    4226:	f8 94       	cli

00004228 <__stop_program>:
    4228:	ff cf       	rjmp	.-2      	; 0x4228 <__stop_program>
